modelQ$RT_Quantile <- as.factor(modelQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
#Data
data <- dataset.recognised[dataset.recognised$participant==j, ]
RTQ <- data.frame(matrix(ncol=0,nrow=0))
#Within those quantile bins, work out the RT quantiles
for(j in 1:n.bins) {
this.min <- bin.edge.left[j]
this.max <- bin.edge.right[j]
this.subset <- data[(data$response_error >= this.min)&(data$response_error < this.max), ]
this.RTQuantile<- quantile(this.subset$response_RT,
probs=c(0.1, 0.3, 0.9))
RTQ <- rbind(RTQ,this.RTQuantile)
#data.subset <- rbind(data.subset,this.subset)
}
k <- 1
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.5, 0.9))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
modelQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
modelQ[,1]=rep(angles[,1],each=3)
modelQ[,2]=Q[,1]
modelQ[,3]=Q[,2]
colnames(modelQ) <- c("Error","RT_Quantile","RT")
modelQ$RT_Quantile <- as.factor(modelQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
#Data
data <- dataset.recognised[dataset.recognised$participant==k, ]
RTQ <- data.frame(matrix(ncol=0,nrow=0))
#Within those quantile bins, work out the RT quantiles
for(j in 1:n.bins) {
this.min <- bin.edge.left[j]
this.max <- bin.edge.right[j]
this.subset <- data[(data$response_error >= this.min)&(data$response_error < this.max), ]
this.RTQuantile<- quantile(this.subset$response_RT,
probs=c(0.1, 0.3, 0.9))
RTQ <- rbind(RTQ,this.RTQuantile)
#data.subset <- rbind(data.subset,this.subset)
}
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.5, 0.9))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
modelQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
modelQ[,1]=rep(angles[,1],each=3)
modelQ[,2]=Q[,1]
modelQ[,3]=Q[,2]
colnames(modelQ) <- c("Error","RT_Quantile","RT")
modelQ$RT_Quantile <- as.factor(modelQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
#Data
data <- dataset.recognised[dataset.recognised$participant==k, ]
# setting up angles for data
bin.edge.right <- seq(-pi, pi, length.out = 10)
bin.edge.right <- bin.edge.right[-1]
bin.edge.left <- c(-pi, bin.edge.right[1:(length(bin.edge.right)-1)])
n.bins <- length(bin.edge.right)
RTQ <- data.frame(matrix(ncol=0,nrow=0))
#Within those quantile bins, work out the RT quantiles
for(j in 1:n.bins) {
this.min <- bin.edge.left[j]
this.max <- bin.edge.right[j]
this.subset <- data[(data$response_error >= this.min)&(data$response_error < this.max), ]
this.RTQuantile<- quantile(this.subset$response_RT,
probs=c(0.1, 0.3, 0.9))
RTQ <- rbind(RTQ,this.RTQuantile)
#data.subset <- rbind(data.subset,this.subset)
}
data.Q <- data.frame(matrix(ncol=4,nrow=27))
data.Q[,1] <- rep(c(1:9),each = 3)
data.Q[1:12,2] <- rep(bin.edge.left[1:4],each = 3)
data.Q[13:15,2]<- rep(0)
data.Q[16:27,2] <- rep(bin.edge.right[6:9],each = 3)
data.Q[,3] <- c(.1,.3,.9)
#Had a bit of difficulty getting the third column (Actual RTs) in- this is my shoddy workaround
RTtrans <- t(RTQ)
data.Q[,4] <- c(RTtrans)
colnames(data.Q) <- c("Error_Bin","Error","RT_Quantile","RT")
data.Q$RT_Quantile <- as.factor(data.Q$RT_Quantile)
name = paste("rtQuantile",i,sep="_")
#rtPlot <- ggplot(data = data.Q,aes(x=data.Q$Error, y=data.Q$RT, group=data.Q$RT_Quantile, colour = RT_Quantile)) + geom_point() + geom_smooth(se=FALSE) + labs(title =paste("QxQ, Participant No. ",j,sep = " "), x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
QxQ <- ggplot(data = modelQ,aes(x=modelQ$Error, y=modelQ$RT, group=modelQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title =paste("QxQ, Participant No. ",k,sep = " "), x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette) + geom_point(data = data.Q, aes(x=data.Q$Error, y=data.Q$RT, group=data.Q$RT_Quantile, colour = RT_Quantile)) + geom_smooth(se=FALSE)
#ggsave("QxQ_1.jpeg", plot = MixQPP)
QxQ
View(`1_time`)
modelQ$RT
time[1,]
time[1,]
time[2,]
time[1,]
View(data.Q)
View(modelQ)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/parameterEstimates")
library(ggplot2)
Recog <- read.csv("recognisedParams.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(Unrecog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(High) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point(color = "blue") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised", x = "kappa1", y = "rho")
highPlot1 <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05)+ labs(title ="Recognised High Confidence (Low Img)", x = "kappa1", y = "rho")
highPlot2 <- ggplot(High,aes(x = High$kappa2, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised High Confidence (High Img)", x = "kappa2", y = "rho")
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point(colour = "green") + geom_text(label=rownames(Unrecog), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Unrecognised", x = "kappa1", y = "rho")
recogPlot
highPlot1
highPlot2
unrecogPlot
High$rho
mean(High$rho)
mean(Recog$rho)
mean(Unrecog$rho)
Recog$rho
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
#Model
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
joint<-paste(i,"jointDist",sep="_")
theta<-paste(i,"theta",sep="_")
time<-paste(i,"time",sep="_")
assign(joint,read.csv(paste(i,"jointDist.csv",sep=""),header = FALSE))
assign(theta,read.csv(paste(i,"theta.csv",sep=""), header = FALSE))
assign(time,read.csv(paste(i,"time.csv",sep=""), header = FALSE))
}
#data
setwd("~/GitHub/sourcemem/analysis/data")
dataset <- read.csv("dataset.csv", na.strings = " NA")
dataset <- dataset[,-1] #removes the first variable, which are these weird row labels
dataset[,3] <- as.numeric(factor(dataset$condition, levels=c(' LOW', ' HIGH')))
dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
# Set up all the different dataset subsets
#Group Level
# No Recognition Foils
dataset.no.na <- dataset[dataset$type!=' FOIL', ]
dataset.na <- dataset[dataset$type==' FOIL', ]
# Stimulus only, conditioned on imageability+concreteness ratings
dataset.low <- dataset.no.na[dataset.no.na$condition == 1, ]
dataset.high <- dataset.no.na[dataset.no.na$condition == 2, ]
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
#recognition ratings
dataset.recog_1 <- dataset.no.na[dataset.no.na$recog_rating==1, ]
dataset.recog_2 <- dataset.no.na[dataset.no.na$recog_rating==2, ]
dataset.recog_3 <- dataset.no.na[dataset.no.na$recog_rating==3, ]
dataset.recog_4 <- dataset.no.na[dataset.no.na$recog_rating==4, ]
dataset.recog_5 <- dataset.no.na[dataset.no.na$recog_rating==5, ]
dataset.recog_6 <- dataset.no.na[dataset.no.na$recog_rating==6, ]
dataset.unrecognised <- rbind(dataset.recog_1, dataset.recog_2, dataset.recog_3)
dataset.recognised <- rbind(dataset.recog_4, dataset.recog_5, dataset.recog_6)
dataset.recognised <- dataset.recognised[!(dataset.recognised$response_RT>10),]
dataset.recognised <- dataset.recognised[!(dataset.recognised$response_RT<.25),]
for (i in participants){
data <- dataset.recognised[dataset.recognised$participant==i, ]
name <- paste("part",i,sep = "_")
assign(name, data)
}
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.5, 0.9))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
modelQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
modelQ[,1]=rep(angles[,1],each=3)
modelQ[,2]=Q[,1]
modelQ[,3]=Q[,2]
colnames(modelQ) <- c("Error","RT_Quantile","RT")
modelQ$RT_Quantile <- as.factor(modelQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
#Data
data <- dataset.recognised[dataset.recognised$participant==k, ]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
#Model
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
joint<-paste(i,"jointDist",sep="_")
theta<-paste(i,"theta",sep="_")
time<-paste(i,"time",sep="_")
assign(joint,read.csv(paste(i,"jointDist.csv",sep=""),header = FALSE))
assign(theta,read.csv(paste(i,"theta.csv",sep=""), header = FALSE))
assign(time,read.csv(paste(i,"time.csv",sep=""), header = FALSE))
}
#data
setwd("~/GitHub/sourcemem/analysis/data")
dataset <- read.csv("dataset.csv", na.strings = " NA")
dataset <- dataset[,-1] #removes the first variable, which are these weird row labels
dataset[,3] <- as.numeric(factor(dataset$condition, levels=c(' LOW', ' HIGH')))
dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
# Set up all the different dataset subsets
#Group Level
# No Recognition Foils
dataset.no.na <- dataset[dataset$type!=' FOIL', ]
dataset.na <- dataset[dataset$type==' FOIL', ]
# Stimulus only, conditioned on imageability+concreteness ratings
dataset.low <- dataset.no.na[dataset.no.na$condition == 1, ]
dataset.high <- dataset.no.na[dataset.no.na$condition == 2, ]
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
#recognition ratings
dataset.recog_1 <- dataset.no.na[dataset.no.na$recog_rating==1, ]
dataset.recog_2 <- dataset.no.na[dataset.no.na$recog_rating==2, ]
dataset.recog_3 <- dataset.no.na[dataset.no.na$recog_rating==3, ]
dataset.recog_4 <- dataset.no.na[dataset.no.na$recog_rating==4, ]
dataset.recog_5 <- dataset.no.na[dataset.no.na$recog_rating==5, ]
dataset.recog_6 <- dataset.no.na[dataset.no.na$recog_rating==6, ]
dataset.unrecognised <- rbind(dataset.recog_1, dataset.recog_2, dataset.recog_3)
dataset.recognised <- rbind(dataset.recog_4, dataset.recog_5, dataset.recog_6)
dataset.recognised <- dataset.recognised[!(dataset.recognised$response_RT>10),]
dataset.recognised <- dataset.recognised[!(dataset.recognised$response_RT<.25),]
for (i in participants){
data <- dataset.recognised[dataset.recognised$participant==i, ]
name <- paste("part",i,sep = "_")
assign(name, data)
}
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.5, 0.9))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
modelQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
modelQ[,1]=rep(angles[,1],each=3)
modelQ[,2]=Q[,1]
modelQ[,3]=Q[,2]
colnames(modelQ) <- c("Error","RT_Quantile","RT")
modelQ$RT_Quantile <- as.factor(modelQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
#Data
k<- 1
data <- dataset.recognised[dataset.recognised$participant==k, ]
# setting up angles for data
bin.edge.right <- seq(-pi, pi, length.out = 10)
bin.edge.right <- bin.edge.right[-1]
bin.edge.left <- c(-pi, bin.edge.right[1:(length(bin.edge.right)-1)])
n.bins <- length(bin.edge.right)
RTQ <- data.frame(matrix(ncol=0,nrow=0))
#Within those quantile bins, work out the RT quantiles
for(j in 1:n.bins) {
this.min <- bin.edge.left[j]
this.max <- bin.edge.right[j]
this.subset <- data[(data$response_error >= this.min)&(data$response_error < this.max), ]
this.RTQuantile<- quantile(this.subset$response_RT,
probs=c(0.1, 0.5, 0.9))
RTQ <- rbind(RTQ,this.RTQuantile)
#data.subset <- rbind(data.subset,this.subset)
}
data.Q <- data.frame(matrix(ncol=4,nrow=27))
data.Q[,1] <- rep(c(1:9),each = 3)
data.Q[1:12,2] <- rep(bin.edge.left[1:4],each = 3)
data.Q[13:15,2]<- rep(0)
data.Q[16:27,2] <- rep(bin.edge.right[6:9],each = 3)
data.Q[,3] <- c(.1,.5,.9)
#Had a bit of difficulty getting the third column (Actual RTs) in- this is my shoddy workaround
RTtrans <- t(RTQ)
data.Q[,4] <- c(RTtrans)
colnames(data.Q) <- c("Error_Bin","Error","RT_Quantile","RT")
data.Q$RT_Quantile <- as.factor(data.Q$RT_Quantile)
name = paste("rtQuantile",i,sep="_")
#rtPlot <- ggplot(data = data.Q,aes(x=data.Q$Error, y=data.Q$RT, group=data.Q$RT_Quantile, colour = RT_Quantile)) + geom_point() + geom_smooth(se=FALSE) + labs(title =paste("QxQ, Participant No. ",j,sep = " "), x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
QxQ <- ggplot(data = modelQ,aes(x=modelQ$Error, y=modelQ$RT, group=modelQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title =paste("QxQ, Participant No. ",k,sep = " "), x = "Response Error (degrees)", y = "Response Time (s)") + geom_point(data = data.Q, aes(x=data.Q$Error, y=data.Q$RT, group=data.Q$RT_Quantile, colour = RT_Quantile)) + geom_smooth(se=FALSE)
QxQ
#ggsave("QxQ_1.jpeg", plot = MixQPP)
View(this.subset)
View(ys)
View(`1_time`)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/parameterEstimates")
library(ggplot2)
Recog <- read.csv("recogParams2.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(Unrecog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(High) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point(color = "blue") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised", x = "kappa1", y = "rho")
highPlot1 <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05)+ labs(title ="Recognised High Confidence (Low Img)", x = "kappa1", y = "rho")
highPlot2 <- ggplot(High,aes(x = High$kappa2, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised High Confidence (High Img)", x = "kappa2", y = "rho")
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point(colour = "green") + geom_text(label=rownames(Unrecog), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Unrecognised", x = "kappa1", y = "rho")
recogPlot
highPlot1
highPlot2
unrecogPlot
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/parameterEstimates")
library(ggplot2)
Recog <- read.csv("recogParams2.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(Unrecog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(High) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
recogPlot1 <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point(color = "blue") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised (Low Img)", x = "kappa1", y = "rho")
recogPlot2 <- ggplot(Recog,aes(x = Recog$kappa2, y = Recog$rho)) + geom_point(color = "blue") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised (High Img)", x = "kappa2", y = "rho")
highPlot1 <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05)+ labs(title ="Recognised High Confidence (Low Img)", x = "kappa1", y = "rho")
highPlot2 <- ggplot(High,aes(x = High$kappa2, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised High Confidence (High Img)", x = "kappa2", y = "rho")
unrecogPlot1 <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point(colour = "green") + geom_text(label=rownames(Unrecog), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Unrecognised (Low Img)", x = "kappa1", y = "rho")
unrecogPlot2 <- ggplot(Unrecog,aes(x = Unrecog$kappa2, y = Unrecog$rho)) + geom_point(colour = "green") + geom_text(label=rownames(Unrecog), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Unrecognised (High Img)", x = "kappa2", y = "rho")
recogPlot
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/parameterEstimates")
library(ggplot2)
Recog <- read.csv("recogParams2.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(Unrecog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(High) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
recogPlot1 <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point(color = "blue") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised (Low Img)", x = "kappa1", y = "rho")
recogPlot2 <- ggplot(Recog,aes(x = Recog$kappa2, y = Recog$rho)) + geom_point(color = "blue") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised (High Img)", x = "kappa2", y = "rho")
highPlot1 <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05)+ labs(title ="Recognised High Confidence (Low Img)", x = "kappa1", y = "rho")
highPlot2 <- ggplot(High,aes(x = High$kappa2, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised High Confidence (High Img)", x = "kappa2", y = "rho")
unrecogPlot1 <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point(colour = "green") + geom_text(label=rownames(Unrecog), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Unrecognised (Low Img)", x = "kappa1", y = "rho")
unrecogPlot2 <- ggplot(Unrecog,aes(x = Unrecog$kappa2, y = Unrecog$rho)) + geom_point(colour = "green") + geom_text(label=rownames(Unrecog), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Unrecognised (High Img)", x = "kappa2", y = "rho")
recogPlot1
recogPlot2
highPlot1
highPlot2
unrecogPlot1
unrecogPlot2
recogPlot1 <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point(color = "blue", size = .5) + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised (Low Img)", x = "kappa1", y = "rho")
recogPlot1
recogPlot1 <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point(color = "blue", size = 2.0) + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recognised (Low Img)", x = "kappa1", y = "rho")
recogPlot1
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
#Model
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
joint<-paste(i,"jointDist",sep="_")
theta<-paste(i,"theta",sep="_")
time<-paste(i,"time",sep="_")
assign(joint,read.csv(paste(i,"jointDist.csv",sep=""),header = FALSE))
assign(theta,read.csv(paste(i,"theta.csv",sep=""), header = FALSE))
assign(time,read.csv(paste(i,"time.csv",sep=""), header = FALSE))
}
#data
setwd("~/GitHub/sourcemem/analysis/data")
dataset <- read.csv("dataset.csv", na.strings = " NA")
dataset <- dataset[,-1] #removes the first variable, which are these weird row labels
dataset[,3] <- as.numeric(factor(dataset$condition, levels=c(' LOW', ' HIGH')))
dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
# Set up all the different dataset subsets
#Group Level
# No Recognition Foils
dataset.no.na <- dataset[dataset$type!=' FOIL', ]
dataset.na <- dataset[dataset$type==' FOIL', ]
# Stimulus only, conditioned on imageability+concreteness ratings
dataset.low <- dataset.no.na[dataset.no.na$condition == 1, ]
dataset.high <- dataset.no.na[dataset.no.na$condition == 2, ]
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
#recognition ratings
dataset.recog_1 <- dataset.no.na[dataset.no.na$recog_rating==1, ]
dataset.recog_2 <- dataset.no.na[dataset.no.na$recog_rating==2, ]
dataset.recog_3 <- dataset.no.na[dataset.no.na$recog_rating==3, ]
dataset.recog_4 <- dataset.no.na[dataset.no.na$recog_rating==4, ]
dataset.recog_5 <- dataset.no.na[dataset.no.na$recog_rating==5, ]
dataset.recog_6 <- dataset.no.na[dataset.no.na$recog_rating==6, ]
dataset.unrecognised <- rbind(dataset.recog_1, dataset.recog_2, dataset.recog_3)
dataset.recognised <- rbind(dataset.recog_4, dataset.recog_5, dataset.recog_6)
dataset.recognised <- dataset.recognised[!(dataset.recognised$response_RT>10),]
dataset.recognised <- dataset.recognised[!(dataset.recognised$response_RT<.25),]
for (i in participants){
data <- dataset.recognised[dataset.recognised$participant==i, ]
name <- paste("part",i,sep = "_")
assign(name, data)
}
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.5, 0.9))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
modelQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
modelQ[,1]=rep(angles[,1],each=3)
modelQ[,2]=Q[,1]
modelQ[,3]=Q[,2]
colnames(modelQ) <- c("Error","RT_Quantile","RT")
modelQ$RT_Quantile <- as.factor(modelQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
#Data
k<- 1
data <- dataset.recognised[dataset.recognised$participant==k, ]
# setting up angles for data
bin.edge.right <- seq(-pi, pi, length.out = 10)
bin.edge.right <- bin.edge.right[-1]
bin.edge.left <- c(-pi, bin.edge.right[1:(length(bin.edge.right)-1)])
n.bins <- length(bin.edge.right)
RTQ <- data.frame(matrix(ncol=0,nrow=0))
#Within those quantile bins, work out the RT quantiles
for(j in 1:n.bins) {
this.min <- bin.edge.left[j]
this.max <- bin.edge.right[j]
this.subset <- data[(data$response_error >= this.min)&(data$response_error < this.max), ]
this.RTQuantile<- quantile(this.subset$response_RT,
probs=c(0.1, 0.5, 0.9))
RTQ <- rbind(RTQ,this.RTQuantile)
#data.subset <- rbind(data.subset,this.subset)
}
data.Q <- data.frame(matrix(ncol=4,nrow=27))
data.Q[,1] <- rep(c(1:9),each = 3)
data.Q[1:12,2] <- rep(bin.edge.left[1:4],each = 3)
data.Q[13:15,2]<- rep(0)
data.Q[16:27,2] <- rep(bin.edge.right[6:9],each = 3)
data.Q[,3] <- c(.1,.5,.9)
#Had a bit of difficulty getting the third column (Actual RTs) in- this is my shoddy workaround
RTtrans <- t(RTQ)
data.Q[,4] <- c(RTtrans)
colnames(data.Q) <- c("Error_Bin","Error","RT_Quantile","RT")
data.Q$RT_Quantile <- as.factor(data.Q$RT_Quantile)
name = paste("rtQuantile",i,sep="_")
#rtPlot <- ggplot(data = data.Q,aes(x=data.Q$Error, y=data.Q$RT, group=data.Q$RT_Quantile, colour = RT_Quantile)) + geom_point() + geom_smooth(se=FALSE) + labs(title =paste("QxQ, Participant No. ",j,sep = " "), x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
QxQ <- ggplot(data = modelQ,aes(x=modelQ$Error, y=modelQ$RT, group=modelQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title =paste("QxQ, Participant No. ",k,sep = " "), x = "Response Error (degrees)", y = "Response Time (s)") + geom_point(data = data.Q, aes(x=data.Q$Error, y=data.Q$RT, group=data.Q$RT_Quantile, colour = RT_Quantile)) + geom_smooth(se=FALSE)
QxQ
#ggsave("QxQ_1.jpeg", plot = MixQPP)
View(1_jointDistribution)
View(`1_jointDistribution``)
``
View(`1_jointDistribution`)
View(`1_jointDist`)
Recog <- read.csv("recognisedParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
Recog$rho
View(`4_time`)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd('C:/Users/jason/Documents/GitHub/sourcemem/EXPIMG/analysis/data/')
dataset <- data.frame()
participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p15","p16","p17","p18","p19","p20")
for (i in participants){
participant_dataset <- data.frame()
for (j in 1:4){
sessions = c("1","2","3","4")
s <- j
this_session_dataset <- read.csv(paste(i,"_",j,".csv",sep=""))
participant_dataset <- rbind(participant_dataset,this_session_dataset)
}
participant_dataset$participant <- i
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
#Recoding Low/High
dataset$condition <- relevel(dataset$condition," LOW")
dataset$condition <- as.numeric(factor(dataset$condition))
#dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
dataset$response_error <- as.numeric(as.character(dataset$response_error))
dataset.no.na <- dataset[dataset$type!=' FOIL', ]
dataset.na <- dataset[dataset$type==' FOIL', ]
recog <- dataset.no.na[dataset.no.na$recog_rating > 3, ]
unrecog <- dataset.no.na[dataset.no.na$recog_rating <= 3, ]
high <- dataset.no.na[dataset.no.na$recog_rating == 6, ]
allHist<- ggplot(data = dataset.no.na, aes(x = dataset.no.na$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="All Recognition Ratings", x = "Response Error (radians)", y = "Frequency") + theme_classic()
unrecogHist<- ggplot(data = unrecog, aes(x = unrecog$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="Unrecognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
recogHist<- ggplot(data = recog, aes(x = recog$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="Recognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
highHist<- ggplot(data = high, aes(x = high$response_error)) + geom_histogram(bins = 100)+ scale_y_continuous(limits=c(0, 700)) + labs(title ="Highlt Recognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
jumboHist <- ggplot() + geom_histogram(data = dataset.no.na, aes(x = dataset.no.na$response_error, fill="All"), bins = 50) + geom_histogram(data = recog, aes(x = recog$response_error, fill="Recognized"), bins = 50) + geom_histogram(data = unrecog, aes(x = unrecog$response_error, fill="Unrecognized"), bins = 50) + theme_classic()+ labs(x = "Response Error (radians)", y = "Frequency",fill = "Recognition Rating")
# Write CSV in R
#write.csv(dataset, file = "dataFiltered3.csv")
p10_data <- p10_data[(p10_data$recog_rating > 3),]
highHist
