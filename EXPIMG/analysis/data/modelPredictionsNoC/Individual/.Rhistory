participant_dataset$participant <- i
name <- paste(i,"data",sep="_")
assign(name,participant_dataset)
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
#Cleaning up the dataset
dataset <- dataset[,-1] #removes the first variable, which are these weird row labels
dataset <- dataset[,-1] #removes STIM/FOIL label
#Recoding Participant
dataset$participant[dataset$participant=="p1"]<-1
dataset$participant[dataset$participant=="p2"]<-2
dataset$participant[dataset$participant=="p3"]<-3
dataset$participant[dataset$participant=="p4"]<-4
dataset$participant[dataset$participant=="p5"]<-5
dataset$participant[dataset$participant=="p6"]<-6
dataset$participant[dataset$participant=="p7"]<-7
dataset$participant[dataset$participant=="p8"]<-8
dataset$participant[dataset$participant=="p9"]<-9
dataset$participant[dataset$participant=="p10"]<-10
dataset$participant[dataset$participant=="p11"]<-11
dataset$participant[dataset$participant=="p12"]<-12
dataset$participant[dataset$participant=="p13"]<-13
dataset$participant[dataset$participant=="p15"]<-15
dataset$participant[dataset$participant=="p16"]<-16
dataset$participant[dataset$participant=="p17"]<-17
dataset$participant[dataset$participant=="p18"]<-18
dataset$participant[dataset$participant=="p19"]<-19
dataset$participant[dataset$participant=="p20"]<-20
#Recoding Low/High
dataset$condition <- relevel(dataset$condition," LOW")
dataset$condition <- as.numeric(factor(dataset$condition))
#dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
#dataset.no.na <- dataset[dataset$type!=' FOIL', ]
#dataset.na <- dataset[dataset$type==' FOIL', ]
# Write CSV in R
#write.csv(dataset, file = "filteredData.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/')
dataset <- data.frame()
participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p15","p16","p17","p18","p19","p20")
#participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12",
#"p13","p14","p15","p16","p17","p18","p19","p20") #c is vector, list is v general
for (i in participants){
participant_dataset <- data.frame()
for (j in 1:4){
sessions = c("1","2","3","4")
s <- j
this_session_dataset <- read.csv(paste(i,"_",j,".csv",sep=""))
participant_dataset <- rbind(participant_dataset,this_session_dataset)
participant_dataset <- participant_dataset[participant_dataset$type!=' FOIL', ]
participant_dataset$response_RT <- as.numeric(as.vector(participant_dataset$response_RT))
#Filter out the slowest RTs for each participant 27/02
#participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(mad(participant_dataset$response_RT, center = median(participant_dataset$response_RT,na.rm=TRUE))) - median(participant_dataset$response_RT,na.rm=TRUE))), ]
}
participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(sd(participant_dataset$response_RT)) + median(participant_dataset$response_RT,na.rm=TRUE))), ]
participant_dataset$participant <- i
name <- paste(i,"data",sep="_")
assign(name,participant_dataset)
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
#Cleaning up the dataset
dataset <- dataset[,-1] #removes the first variable, which are these weird row labels
dataset <- dataset[,-1] #removes STIM/FOIL label
#Recoding Participant
dataset$participant[dataset$participant=="p1"]<-1
dataset$participant[dataset$participant=="p2"]<-2
dataset$participant[dataset$participant=="p3"]<-3
dataset$participant[dataset$participant=="p4"]<-4
dataset$participant[dataset$participant=="p5"]<-5
dataset$participant[dataset$participant=="p6"]<-6
dataset$participant[dataset$participant=="p7"]<-7
dataset$participant[dataset$participant=="p8"]<-8
dataset$participant[dataset$participant=="p9"]<-9
dataset$participant[dataset$participant=="p10"]<-10
dataset$participant[dataset$participant=="p11"]<-11
dataset$participant[dataset$participant=="p12"]<-12
dataset$participant[dataset$participant=="p13"]<-13
dataset$participant[dataset$participant=="p15"]<-15
dataset$participant[dataset$participant=="p16"]<-16
dataset$participant[dataset$participant=="p17"]<-17
dataset$participant[dataset$participant=="p18"]<-18
dataset$participant[dataset$participant=="p19"]<-19
dataset$participant[dataset$participant=="p20"]<-20
#Recoding Low/High
dataset$condition <- relevel(dataset$condition," LOW")
dataset$condition <- as.numeric(factor(dataset$condition))
#dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
#dataset.no.na <- dataset[dataset$type!=' FOIL', ]
#dataset.na <- dataset[dataset$type==' FOIL', ]
# Write CSV in R
#write.csv(dataset, file = "filteredData.csv")
View(dataset)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/sourcemem/analysis/data/parameterEstimates")
Recog <- read.csv("recognisedParams.csv", header = FALSE)
Unrecog <- read.csv("unrecogParams.csv", header = FALSE)
Recog <- read.csv("recognisedParams.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
View(High)
View(Recog)
View(Unrecog)
Recog <- read.csv("recognisedParams.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("v1a", "v2a", "v1b", "v2b", "eta1", "eta2", "a1", "a2", "pi1", "pi2", "Ter")
Recog <- read.csv("recognisedParams.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st", "sa")
Recog <- read.csv("recognisedParams.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
View(Recog)
Recog <- read.csv("recognisedParams.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(Unrecog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(High) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
Recog$rho
Recog$kappa1
Recog$kappa2
ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point()
library(ggplot2)
ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point()
ggplot(Recog,aes(x = High$kappa1, y = High$rho)) + geom_point()
High$rho
Recog$rho
view(High)
High
View(High)
ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd("~/GitHub/sourcemem/analysis/data/parameterEstimates")
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
recogPlot
Recog$rho
highPlot
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point() + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point() + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point() + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point() + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.1)
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point() + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.1)
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point() + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05)
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point() + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot1 <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05)+ labs(title ="High", x = "kappa1", y = "rho")
highPlot2 <- ggplot(High,aes(x = High$kappa2, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="High", x = "kappa2", y = "rho")
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot1
highPlot2
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd("~/GitHub/sourcemem/analysis/data/parameterEstimates")
Recog <- read.csv("recognisedParams.csv", header = FALSE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/parameterEstimates")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/parameterEstimates")
library(ggplot2)
Recog <- read.csv("recognisedParams.csv", header = FALSE)
Unrecog <- read.csv("unrecognisedParams.csv", header = FALSE)
High <- read.csv("highParams.csv", header = FALSE)
colnames(Recog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(Unrecog) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
colnames(High) <- c("nunorm1", "nunorm2", "kappa1", "kappa2", "eta", "rho", "a", "Ter", "st")
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point() + geom_text(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
highPlot1 <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05)+ labs(title ="High", x = "kappa1", y = "rho")
highPlot2 <- ggplot(High,aes(x = High$kappa2, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="High", x = "kappa2", y = "rho")
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point() + geom_label(label=rownames(High), nudge_x = 0.25, nudge_y = 0.2)
recogPlot
highPlot1
highPlot2
unrecogPlot
recogPlot <- ggplot(Recog,aes(x = Recog$kappa1, y = Recog$rho)) + geom_point(color = "blue") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Recog", x = "kappa1", y = "rho")
highPlot1 <- ggplot(High,aes(x = High$kappa1, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05)+ labs(title ="High", x = "kappa1", y = "rho")
highPlot2 <- ggplot(High,aes(x = High$kappa2, y = High$rho)) + geom_point(color = "red") + geom_text(label=rownames(High), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="High", x = "kappa2", y = "rho")
unrecogPlot <- ggplot(Unrecog,aes(x = Unrecog$kappa1, y = Unrecog$rho)) + geom_point(colour = "green") + geom_text(label=rownames(Unrecog), nudge_x = 0.05, nudge_y = 0.05) + labs(title ="Unrecognised", x = "kappa1", y = "rho")
recogPlot
highPlot1
highPlot2
unrecogPlot
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/parameterEstimates")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/modelPredictionsNo/Individual")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/modelPredictionsNo/Individual")
library(ggplot2)
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
i
i <- 1
paste(dataset,i,sep="_")
paste("dataset",i,sep="_")
name<-paste(i,"jointDist.csv",sep="_")
read.csv(name)
name<-paste(i,"jointDist.csv",sep="")
read.csv(name)
read.csv(1jointDist.csv)
read.csv("1jointDist.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/modelPredictionsNo/Individual")
library(ggplot2)
read.csv("1jointDist.csv")
read.csv(1jointDist.csv)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
read.csv("1jointDist.csv")
setwd("~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
name<-paste(i,"jointDist.csv",sep="")
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
read.csv(name)
jointDist1<- read.csv(name)
View(jointDist1)
test <- read.csv(paste(i,"time.csv",sep=""))
View(test)
help assign
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
joint<-paste(i,"jointDist",sep="_")
theta<-paste(i,"theta",sep="_")
time<-paste(i,"time",sep="_")
assign(joint,read.csv(paste(i,"jointDist.csv",sep="")))
assign(theta,read.csv(paste(i,"theta.csv",sep="")))
assign(time,read.csv(paste(i,"time.csv",sep="")))
}
jointP<- "1_jointDist"
View(`17_jointDist`)
jointP<- `1_jointDist`
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
joint<-paste(i,"jointDist",sep="_")
theta<-paste(i,"theta",sep="_")
time<-paste(i,"time",sep="_")
assign(joint,read.csv(paste(i,"jointDist.csv",sep="")))
assign(theta,read.csv(paste(i,"theta.csv",sep="")))
assign(time,read.csv(paste(i,"time.csv",sep="")))
}
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.3, 0.7))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=150))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
View(plotQ)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd("~/GitHub/sourcemem/analysis/data/modelPredictionsNoC")
Mix <- read.csv("mixCum.csv", header = FALSE)
VP <- read.csv("vpCum.csv", header = FALSE)
time <- read.csv("time.csv", header = FALSE)
theta <- read.csv("theta.csv", header = FALSE)
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(Mix)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- Mix[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.3, 0.7))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=150))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
plotQ[,2]=Q[,1]
plotQ[,3]=Q[,2]
colnames(plotQ) <- c("Error","RT_Quantile","RT")
plotQ$RT_Quantile <- as.factor(plotQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
MixQPP <- ggplot(data = plotQ,aes(x=plotQ$Error, y=plotQ$RT, group=plotQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
MixQPP
ggsave("Mix.jpeg", plot = MixQPP)
#Same but with VP
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(VP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- VP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.3, 0.7))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=150))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
plotQ[,2]=Q[,1]
plotQ[,3]=Q[,2]
colnames(plotQ) <- c("Error","RT_Quantile","RT")
plotQ$RT_Quantile <- as.factor(plotQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
VPQPP <- ggplot(data = plotQ,aes(x=plotQ$Error, y=plotQ$RT, group=plotQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
VPQPP
ggsave("VP.jpeg", plot = VPQPP)
length(rep(angles[,1],each=3))
View(angles)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
joint<-paste(i,"jointDist",sep="_")
theta<-paste(i,"theta",sep="_")
time<-paste(i,"time",sep="_")
assign(joint,read.csv(paste(i,"jointDist.csv",sep="")))
assign(theta,read.csv(paste(i,"theta.csv",sep="")))
assign(time,read.csv(paste(i,"time.csv",sep="")))
}
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.3, 0.7))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=150))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
length(rep(angles[,1],each=3))
View(angles)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
joint<-paste(i,"jointDist",sep="_")
theta<-paste(i,"theta",sep="_")
time<-paste(i,"time",sep="_")
assign(joint,read.csv(paste(i,"jointDist.csv",sep=""),header = FALSE))
assign(theta,read.csv(paste(i,"theta.csv",sep=""), header = FALSE))
assign(time,read.csv(paste(i,"time.csv",sep=""), header = FALSE))
}
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.3, 0.7))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=150))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/analysis/data/modelPredictionsNoC/Individual")
library(ggplot2)
participants = c("1","2","3","4","5","6","7","8","9","10","11","12","13","15","16","17","18","19","20")
for (i in participants){
joint<-paste(i,"jointDist",sep="_")
theta<-paste(i,"theta",sep="_")
time<-paste(i,"time",sep="_")
assign(joint,read.csv(paste(i,"jointDist.csv",sep=""),header = FALSE))
assign(theta,read.csv(paste(i,"theta.csv",sep=""), header = FALSE))
assign(time,read.csv(paste(i,"time.csv",sep=""), header = FALSE))
}
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.3, 0.7))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
plotQ[,2]=Q[,1]
plotQ[,3]=Q[,2]
colnames(plotQ) <- c("Error","RT_Quantile","RT")
plotQ$RT_Quantile <- as.factor(plotQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
MixQPP <- ggplot(data = plotQ,aes(x=plotQ$Error, y=plotQ$RT, group=plotQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
MixQPP
j <- 1
j_jointDist
paste(j,'jointDist',sep="_")
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.3, 0.7))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
plotQ[,2]=Q[,1]
plotQ[,3]=Q[,2]
colnames(plotQ) <- c("Error","RT_Quantile","RT")
plotQ$RT_Quantile <- as.factor(plotQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
QxQ <- ggplot(data = plotQ,aes(x=plotQ$Error, y=plotQ$RT, group=plotQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title ="QxQ Participant 1", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
ggsave("QxQ_1.jpeg", plot = MixQPP)
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.3, 0.9))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
plotQ[,2]=Q[,1]
plotQ[,3]=Q[,2]
colnames(plotQ) <- c("Error","RT_Quantile","RT")
plotQ$RT_Quantile <- as.factor(plotQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
QxQ <- ggplot(data = plotQ,aes(x=plotQ$Error, y=plotQ$RT, group=plotQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title ="QxQ Participant 1", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
ggsave("QxQ_1.jpeg", plot = MixQPP)
jointP<- `1_jointDist`
theta <- `1_theta`
time <- `1_time`
angles <- theta[1,]
ys <- time[1,]
nrows <- nrow(jointP)
Q <- data.frame(matrix(ncol=0,nrow=0))
for (i in 1:nrows){
xs <- jointP[i,]
this.Quantile<- approx(xs, ys, c(0.1, 0.5, 0.9))
#this.Quantile<- interp[["y"]]
Q <- rbind(Q,this.Quantile)
}
#QPP <- ggplot(data = Q,aes(x=, y=, group=, colour = )) + geom_point() + geom_smooth(se=FALSE) + labs(title ="Response Time Quantiles by Error", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
plotQ = data.frame(matrix(ncol=3,nrow=153))
angles <- t(angles)
plotQ[,1]=rep(angles[,1],each=3)
plotQ[,2]=Q[,1]
plotQ[,3]=Q[,2]
colnames(plotQ) <- c("Error","RT_Quantile","RT")
plotQ$RT_Quantile <- as.factor(plotQ$RT_Quantile)
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
QxQ <- ggplot(data = plotQ,aes(x=plotQ$Error, y=plotQ$RT, group=plotQ$RT_Quantile, colour = RT_Quantile)) + geom_line() + labs(title ="QxQ Participant 1", x = "Response Error (degrees)", y = "Response Time (s)") + scale_colour_manual(values=cbPalette)
ggsave("QxQ_1.jpeg", plot = MixQPP)
View(Q)
Q[,2]
Q[,3]
Q[,1]
