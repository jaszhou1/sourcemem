%% model_recovery.m
% This is a script to run a model recovery exercise between the continuous
% and threshold versions of the circular diffusion model reported in Zhou
% et al, 2020. 

% Jason Zhou <jasonz1 AT student DOT unimelb DOT edu DOT au>
% 05/09/2020
%% Simulate Data
% For each individual, generate a set of simulated data. The parameters
% used to generate simulated data will be those that provided the best fit
% of that model to that participant's empirical data, and will be based on
% the same number of observations. 

% See Donkin et al, 2013 at https://dx.doi.org/10.1037
[cont,thresh] = simulate_data;

%% Cross-fit Models
% Use the same fitting procedures as those reported in the original
% manuscript to fit each model to the simulated datasets
participants = [1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20];
nruns = 10;
badix = 5;

% The format of each heading will be:
% MODEL USED TO GENERATE THE SIMULATED DATA - MODEL BEING USED TO FIT

% Continuous-Continuous
% Data generated by the continuous model, fit using the continuous model
VP_VP_Pr = cell(length(participants),8);
for i = participants
    ll = 1e7;
    
    % Multiple Starts
    for j = 1:nruns
        [llnew, bic, Pred, pest, Gstuff, penalty, pest_penalty] = ...
            FitVPx_pooled(cont(1,:),badix);
  
        if (llnew < ll && llnew > 0)
            ll = llnew;
            VP_VP_Preds_Recognised{i,1} = ll;
            VP_VP_Preds_Recognised{i,2} = bic;
            VP_VP_Preds_Recognised{i,3} = Pred;
            VP_VP_Preds_Recognised{i,4} = pest;
            VP_VP_Preds_Recognised{i,5} = Gstuff;
            VP_VP_Preds_Recognised{i,6} = cont(1,:);
            VP_VP_Preds_Recognised{i,7} = penalty;
            VP_VP_Preds_Recognised{i,8} = pest_penalty;
        end
    end 
end

% Continuous-Threshold
VP_MX_Preds_Recognised = cell(length(participants),8);
for i = participants
    VP_MX_Preds_Recognised{i,1} = -1;
    VP_MX_Preds_Recognised{i,2} = 0;
    
    ll = 1e7;
    for j=1:nruns
        [llnew, bic, Pred, pest, Gstuff,penalty, pest_penalty] =...
            FitMix_pooled(cont(1,:),badix);
        
        if (llnew < ll && llnew > 0)
            ll = llnew;
            VP_MX_Preds_Recognised{i,1} = ll;
            VP_MX_Preds_Recognised{i,2} = bic;
            VP_MX_Preds_Recognised{i,3} = Pred;
            VP_MX_Preds_Recognised{i,4} = pest;
            VP_MX_Preds_Recognised{i,5} = Gstuff;
            VP_MX_Preds_Recognised{i,6} = cont(1,:);
            VP_MX_Preds_Recognised{i,7} = penalty;
            VP_MX_Preds_Recognised{i,8} = pest_penalty;
        end
    end
end


% Threshold-Continuous
MX_VP_Preds_Recognised = cell(length(participants),8);
for i = participants
    ll = 1e7;
    
    % Multiple Starts
    for j = 1:nruns
        [llnew, bic, Pred, pest, Gstuff, penalty, pest_penalty] = ...
            FitVPx_pooled(thresh(1,:),badix);
  
        if (llnew < ll && llnew > 0)
            ll = llnew;
            MX_VP_Preds_Recognised{i,1} = ll;
            MX_VP_Preds_Recognised{i,2} = bic;
            MX_VP_Preds_Recognised{i,3} = Pred;
            MX_VP_Preds_Recognised{i,4} = pest;
            MX_VP_Preds_Recognised{i,5} = Gstuff;
            MX_VP_Preds_Recognised{i,6} = thresh(1,:);
            MX_VP_Preds_Recognised{i,7} = penalty;
            MX_VP_Preds_Recognised{i,8} = pest_penalty;
        end
    end 
end

% Threshold-Threshold
MX_MX_Preds_Recognised = cell(length(participants),8);
for i = participants
    MX_MX_Preds_Recognised{i,1} = -1;
    MX_MX_Preds_Recognised{i,2} = 0;
    
    ll = 1e7;
    for j=1:nruns
        [llnew, bic, Pred, pest, Gstuff,penalty, pest_penalty] =...
            FitMix_pooled(thresh(1,:),badix);
        
        if (llnew < ll && llnew > 0)
            ll = llnew;
            MX_MX_Preds_Recognised{i,1} = ll;
            MX_MX_Preds_Recognised{i,2} = bic;
            MX_MX_Preds_Recognised{i,3} = Pred;
            MX_MX_Preds_Recognised{i,4} = pest;
            MX_MX_Preds_Recognised{i,5} = Gstuff;
            MX_MX_Preds_Recognised{i,6} = thresh(1,:);
            MX_MX_Preds_Recognised{i,7} = penalty;
            MX_MX_Preds_Recognised{i,8} = pest_penalty;
        end
    end
end

%% Save 

% Save MATLAB workspace
filename = [datestr(now,'yyyy_mm_dd_HH_MM'),'_recovery'];
save(filename)

% Print BICs out to a .csv file