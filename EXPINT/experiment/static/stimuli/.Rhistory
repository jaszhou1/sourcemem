ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(recentered_all, aes(x=error, y = ..density..)) + stat_density() +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(recentered_all, aes(x=error, y = ..density..)) + stat_density(geom="line" and position="identity) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(recentered_all, aes(x=error, y = ..density..)) + stat_density(geom='line', position='identity') +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20))
ggplot(recentered_all, aes(x=error, y = ..density..)) + stat_density(geom='line', position='identity', trum = TRUE) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20))
ggplot(recentered_all, aes(x=error, y = ..density..)) + stat_density(geom='line', position='identity', trim = TRUE) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20))
ggplot(recentered_all, aes(x=error, y = ..density..)) + stat_density(geom='line', position='identity', trim = TRUE) + xlim(-pi, pi) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20))
density(recentered_all$error)
x <- density(recentered_all$error)
x
View(x)
plot(x$x, x$y)
x <- density(recentered_all$error, from = -2, to = 2, cut = 3)
plot(x$x, x$y)
x <- density(recentered_all$error, from = -pi, to = pi, cut = 3)
plot(x$x, x$y)
x <- recentered_all[[is.element(c('data'), recentered_all$model),]]
unique(recentered_all$model)
model <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
x <- recentered_all[recentered_all$model %in% model,]
View(x)
data <- recentered_all[recentered_all$model == 'data',]
plot_1_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_1_models <- recentered_all[recentered_all$model %in% plot_1_model_strings,]
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, fill = model) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, fill = models$model) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, fill = model)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, folor = model)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, color = model)
View(recentered_all)
recentered_all$model
ggplot(recentered_all, aes(x=error, y = ..density.., color = model)) + geom_histogram(bins = 30)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, aes(color = model)) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
View(plot_1_models)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, aes(color = model, weight = 1)) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
head(recenter_all())
head(recentered_all)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
unique(recentered_all$model)
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient", "Spatiotemporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_1_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_1_models <- recentered_all[recentered_all$model %in% plot_1_model_strings,]
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, )
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
position
View(data)
head(sim_temporal)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
this_data
View(this_average_error)
i
position
data
i
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
concatenate_model_average_error <- function(){
mix <- get_average_error_across_position(sim_mix, 'Pure Guess')
pure_int <- get_average_error_across_position(sim_pure_intrusion, 'Pure Intrusion')
int <- get_average_error_across_position(sim_intprec, 'Intrusion + Guess')
temp <- get_average_error_across_position(sim_temporal, 'Temporal')
spatio <- get_average_error_across_position(sim_spatiotemporal, 'Spatiotemporal')
res <- rbind(mix, pure_int, int, temp, spatio)
return(res)
}
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- concatenate_model_average_error()
View(x)
data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
for (i in 1:10){
this_average_error[i,1] <- i
this_average_error[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
errors_across_serial_position <- function(data){
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
serial_position_data[i,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05))) +
scale_color_manual(values=c("black", "red"))
return(plot)
}
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
View(serial_position_data)
serial_position_data[,3] <- 'data'
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2)
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(serial_position_data) <- c('position','error','model')
serial_position_data[,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = simulated_error))
plot
head(models)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = error))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position, color = model))
View(models)
x <- models[modesl$model == 'Temporal',]
x <- models[models$model == 'Temporal',]
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05)))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.05))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
source('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
plot_data(data, plot_2_models, color_wheel[3:5])
source('~/git/sourcemem_online/analysis/plot_recentered.R')
compare_model_asymm(data,plot_3_models, 'Recentered Asymmetry', c(color_wheel[3], color_wheel[4], color_wheel[5]))
source('~/git/sourcemem_online/analysis/sourcemem-online-bays.R')
all.data = data.frame()
# Participant Loop
for(h in 1:length(completed.users)){
this.user.data = data.frame()
# Session Loop
for(j in 1:length(sessions)){
data <- get_session(completed.users[[h]],j)
# Bind sessions together
this.user.data <- rbind(this.user.data, data)
this.user.data$participant <- h
}
all.data <- rbind(all.data, this.user.data)
all.data = data.frame()
# Participant Loop
for(h in 1:length(completed.users)){
this.user.data = data.frame()
# Session Loop
for(j in 1:length(sessions)){
data <- get_session(completed.users[[h]],j)
# Bind sessions together
this.user.data <- rbind(this.user.data, data)
}
this.user.data$participant <- h
all.data <- rbind(all.data, this.user.data)
}
View(all.data)
this.session.data <- get.session.data.by.user.id(SERVER.BASE.URL, 1, 1,
SERVER.PORT, SERVER.MASTER.API.KEY)
this.session.data <- get.session.data.by.user.id(SERVER.BASE.URL, completed.users[[1]], 1,
SERVER.PORT, SERVER.MASTER.API.KEY)
View(this.session.data)
setwd("~/git/sourcemem_online/analysis/raw_data/small_n")
save.raw.data <- function(){
setwd("~/git/sourcemem_online/analysis/raw_data/small_n")
}
save.raw.data()
length(completed.users)
completed.users
save(this.session.data, file = 'test.RData')
load("~/git/sourcemem_online/analysis/raw_data/small_n/test.RData")
View(this.session.data)
p <- 1
s <- 1
s <- 2
sprintf('Subject_%i_Session_%i.png', p, s)
source('~/git/sourcemem_online/analysis/sourcemem-online-bays.R')
save.raw.data()
source('~/git/sourcemem_online/analysis/sourcemem-online-bays.R')
save.raw.data()
save.raw.data()
source('~/git/sourcemem_online/analysis/sourcemem-online-bays.R')
save.raw.data()
library(jsonlite)
setwd("~/git/sourcemem/EXPINT/experiment/static/stimuli")
semantic.lists <- read.csv('semantic_lists_final.csv')
orthographic.lists <- read.csv('orthographic_lists_final.csv')
semantic.json <- toJSON(semantic.lists, pretty = TRUE)
orthographic.json <- toJSON(orthographic.lists, pretty = TRUE)
write(semantic.json, "semantic-lists.js")
write(orthographic.json, "orthographic-lists.js")
semantic.lists <- read.csv('semantic_lists_final.csv')
orthographic.lists <- read.csv('orthographic_lists_final.csv')
# as opposed to trying to the k-means strat.
library(rjson)
library(stats)
library(lsa)
setwd("~/git/sourcemem/EXPINT/experiment/static/stimuli")
# Load in a list of words and a JSON dictionary with word2vec vectors
wordlist <- read.csv('subtlex_filtered_final.csv')
word2vec <- fromJSON(txt = 'word2vec_final.json')
orthographic.lists$word %in% names(word2vec)
!orthographic.lists$word %in% names(word2vec)
orthographic.lists[!orthographic.lists$word %in% names(word2vec)]
orthographic.lists[!orthographic.lists$word %in% names(word2vec),]
semantic.lists[!semantic.lists$word %in% names(word2vec),]
setwd("~/git/sourcemem/EXPINT/experiment/static/stimuli")
# Load in a list of words and a JSON dictionary with word2vec vectors
wordlist <- read.csv('subtlex_filtered_final.csv')
word2vec <- fromJSON(txt = 'word2vec_final.json')
#Convert lists of stimul (semantic and orthographic lists) into JSON key:value pairs to read into javascript
library(jsonlite)
setwd("~/git/sourcemem/EXPINT/experiment/static/stimuli")
semantic.lists <- read.csv('semantic_lists_final.csv')
orthographic.lists <- read.csv('orthographic_lists_final.csv')
list <- rbind(orthographic.lists, semantic.lists)
list$word
unique(list$word)
list[list$word %in% names(word2vec),'word']
list[!(list$word %in% names(word2vec)),'word']
#Convert lists of stimul (semantic and orthographic lists) into JSON key:value pairs to read into javascript
library(jsonlite)
setwd("~/git/sourcemem/EXPINT/experiment/static/stimuli")
semantic.lists <- read.csv('semantic_lists_final.csv')
orthographic.lists <- read.csv('orthographic_lists_final.csv')
semantic.json <- toJSON(semantic.lists, pretty = TRUE)
orthographic.json <- toJSON(orthographic.lists, pretty = TRUE)
orthographic.json <- toJSON(orthographic.lists, pretty = TRUE)
write(semantic.json, "semantic-lists.js")
write(orthographic.json, "orthographic-lists.js")
semantic.lists$word <- toupper(semantic.lists$word)
semantic.lists
View(semantic.lists)
View(semantic.lists)
semantic.lists$word <- toupper(semantic.lists$word)
orthographic.lists$word <- toupper(orthographic.lists$word)
semantic.json <- toJSON(semantic.lists, pretty = TRUE)
orthographic.json <- toJSON(orthographic.lists, pretty = TRUE)
write(semantic.json, "semantic-lists.js")
write(orthographic.json, "orthographic-lists.js")
