plot(x$x, x$y)
x <- density(recentered_all$error, from = -pi, to = pi, cut = 3)
plot(x$x, x$y)
x <- recentered_all[[is.element(c('data'), recentered_all$model),]]
unique(recentered_all$model)
model <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
x <- recentered_all[recentered_all$model %in% model,]
View(x)
data <- recentered_all[recentered_all$model == 'data',]
plot_1_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_1_models <- recentered_all[recentered_all$model %in% plot_1_model_strings,]
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, fill = model) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, fill = models$model) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, fill = model)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, folor = model)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, color = model)
View(recentered_all)
recentered_all$model
ggplot(recentered_all, aes(x=error, y = ..density.., color = model)) + geom_histogram(bins = 30)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, aes(color = model)) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
View(plot_1_models)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, aes(color = model, weight = 1)) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
head(recenter_all())
head(recentered_all)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
unique(recentered_all$model)
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient", "Spatiotemporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_1_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_1_models <- recentered_all[recentered_all$model %in% plot_1_model_strings,]
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, )
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
position
View(data)
head(sim_temporal)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
this_data
View(this_average_error)
i
position
data
i
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
concatenate_model_average_error <- function(){
mix <- get_average_error_across_position(sim_mix, 'Pure Guess')
pure_int <- get_average_error_across_position(sim_pure_intrusion, 'Pure Intrusion')
int <- get_average_error_across_position(sim_intprec, 'Intrusion + Guess')
temp <- get_average_error_across_position(sim_temporal, 'Temporal')
spatio <- get_average_error_across_position(sim_spatiotemporal, 'Spatiotemporal')
res <- rbind(mix, pure_int, int, temp, spatio)
return(res)
}
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- concatenate_model_average_error()
View(x)
data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
for (i in 1:10){
this_average_error[i,1] <- i
this_average_error[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
errors_across_serial_position <- function(data){
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
serial_position_data[i,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05))) +
scale_color_manual(values=c("black", "red"))
return(plot)
}
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
View(serial_position_data)
serial_position_data[,3] <- 'data'
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2)
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(serial_position_data) <- c('position','error','model')
serial_position_data[,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = simulated_error))
plot
head(models)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = error))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position, color = model))
View(models)
x <- models[modesl$model == 'Temporal',]
x <- models[models$model == 'Temporal',]
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05)))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.05))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
source('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
plot_data(data, plot_2_models, color_wheel[3:5])
source('~/git/sourcemem_online/analysis/plot_recentered.R')
compare_model_asymm(data,plot_3_models, 'Recentered Asymmetry', c(color_wheel[3], color_wheel[4], color_wheel[5]))
setwd("~/git/sourcemem/EXPINT/experiment/stimuli")
data <- read.csv('SWOW-EN.R100.csv')
data$cue[1]
nchar(data$cue[1])
class(data$cue[1])
data$cue <- as.character(data$cue)
nchar(data$cue[1])
five.letters <- data[nchar(data$cue) == 5,]
View(five.letters)
five.letters$cue <- as.factor(five.letters$cue)
five.letters$cue[1]
unique(five.letters$cue)
nrow(unique(five.letters$cue))
length(unique(five.letters$cue))
words <- unique(five.letters$cue)
words[1]
this.word <- five.letters[five.letters$cue == words[1]]
this.word <- five.letters[five.letters$cue == words[1],]
View(this.word)
table(this.word$R1, this.word$R2, this.word$R3)
class(this.word$R1)
this.word[,11:13] <- as.character(this.word[,11:13])
this.word <- five.letters[five.letters$cue == words[1],]
View(this.word)
data$cue <- as.character(data$cue)
data$R1 <- as.character(data$R1)
data$R2 <- as.character(data$R2)
data$R3 <- as.character(data$R3)
five.letters <- data[nchar(data$cue) == 5,]
words <- unique(five.letters$cue)
this.word <- five.letters[five.letters$cue == words[1],]
table(this.word$R1, this.word$R2, this.word$R3)
x <- table(this.word$R1, this.word$R2, this.word$R3)
View(this.word)
this.word[nchar(this.word$R1)!=5,]$R1
this.word[nchar(this.word$R1)!=5,]$R1 <- NA
this.word[nchar(this.word$R1)!=5,]$R1 <- 99
this.word[nchar(this.word$R1)!=5,]$R1
this.word[nchar(this.word$R1)!=5,]
View(this.word)
this.word[nchar(this.word$R1)!=5,11] <- NA
this.word[nchar(this.word$R1)!=5,11] <- 's'
unique(this.word$R1, this.word$R2, this.word$R3)
cbind(this.word$R1, this.word$R2, this.word$R3)
x <- cbind(this.word$R1, this.word$R2, this.word$R3)
View(x)
x <- rbind(this.word$R1, this.word$R2, this.word$R3)
View(x)
replace(this.word[nchar(this.word$R1) != 5, 11], NA)
aggregate(this.word$R1)
aggregate(this.word$R1, nchar)
aggregate(data.frame(count = this.word$R1), list(value = this.word$R1), length)
x <- aggregate(data.frame(count = this.word$R1), list(value = this.word$R1), length)
View(x)
class(x$value)
x <- x[nchar(x$value == 5),]
x <- aggregate(data.frame(count = this.word$R1), list(value = this.word$R1), length)
x[nchar(x$value == 5),]
x[nchar(x[,1]),]
x$value[1]
x$value[2]
nchar(x$value[1])
nchar(x$value)
nchar(x$value) == 5
y <- x[nchar(x$value) == 5,]
View(y)
y <- x[nchar(x$value) in c(4,5,6),]
y <- x[nchar(x$value) == c(4,5,6),]
View(y)
y <- x[nchar(x$value) == 5,]
View(x)
as.vector(as.matrix(this.word[,c(R1, R2, R3)]))
as.vector(as.matrix(this.word[,c("R1", "R2", "R3")]))
z <- as.vector(as.matrix(this.word[,c("R1", "R2", "R3")]))
x <- aggregate(data.frame(count = this.word.responses), list(value = this.word.responses), length)
this.word.responses <- as.vector(as.matrix(this.word[,c("R1", "R2", "R3")]))
x <- aggregate(data.frame(count = this.word.responses), list(value = this.word.responses), length)
View(x)
this.word.responses <- this.word.responses[nchar(this.word.responses == 5)]
this.word <- five.letters[five.letters$cue == words[1],]
this.word.responses <- as.vector(as.matrix(this.word[,c("R1", "R2", "R3")]))
this.word.responses <- this.word.responses[nchar(this.word.responses == 5)]
this.word.responses.count <- aggregate(data.frame(count = this.word.responses),
list(value = this.word.responses), length)
View(this.word.responses.count)
this.word <- five.letters[five.letters$cue == words[1],]
this.word.responses <- as.vector(as.matrix(this.word[,c("R1", "R2", "R3")]))
this.word.responses <- this.word.responses[nchar(this.word.responses)==5]
this.word.responses.count <- aggregate(data.frame(count = this.word.responses),
list(value = this.word.responses), length)
View(this.word.responses.count)
View(this.word.responses.count)
x <- list(words)
View(x)
words <- as.list(words)
View(words)
View(this.word.responses.count)
this.word.responses.count <- cbind(this.word.responses.count = words[1], this.word.responses.count)
View(this.word.responses.count)
this.word.responses.count <- aggregate(data.frame(count = this.word.responses),
list(value = this.word.responses), length)
this.word.responses.count <- cbind(cue= words[1], this.word.responses.count)
View(this.word.responses.count)
colnames(this.word.responses.count) <- c('cue', 'resp', 'count')
View(this.word.responses.count)
order(this.word.responses.count, resp)
order(this.word.responses.count, this.word.responses.count$resp)
res <- this.word.responses.count[order(count),]
res <- this.word.responses.count[order('count'),]
View(res)
res <- this.word.responses.count[order(this.word.responses.count$count),]
View(res)
res <- this.word.responses.count[order(this.word.responses.count$count, decreasing = TRUE),]
View(res)
semantic.lists <- data.frame(matrix(nrow = 0, ncol = 3))
colnames(semantic.lists) <- c('cue', 'resp', 'count')
source('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
View(this.word.responses.count)
View(semantic.lists)
View(res)
# and the number of times they occur
for(i in words){
this.word <- five.letters[five.letters$cue == i,]
# Pull out all the unique responses across the three response columns
this.word.responses <- as.vector(as.matrix(this.word[,c("R1", "R2", "R3")]))
this.word.responses <- this.word.responses[nchar(this.word.responses)==5]
# Count the number of times each 5 letter response occurs
this.word.responses.count <- aggregate(data.frame(count = this.word.responses),
list(value = this.word.responses), length)
# Add the cue word as a new column (avoiding lists of lists to play nice with other languages down the line)
this.word.responses.count <- cbind(cue= i, this.word.responses.count)
colnames(this.word.responses.count) <- c('cue', 'resp', 'count')
# Sort the resulting dataframe by the count of each response
res <- this.word.responses.count[order(this.word.responses.count$count, decreasing = TRUE),]
semantic.lists <- rbind(semantic.lists, res)
}
View(semantic.lists)
View(this.word.responses.count)
this.word.responses.count[this.word.responses.count$resp == i,]
i <- 'acids'
this.word.responses.count[this.word.responses.count$resp == i,]
this.word.responses.count[this.word.responses.count$resp == i,] <- []
this.word.responses.count[-(this.word.responses.count$resp == i),]
this.word.responses.count <- this.word.responses.count[-(this.word.responses.count$resp == i),]
source('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
source('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
debugSource('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
this.word.responses.count <- aggregate(data.frame(count = this.word.responses),
list(value = this.word.responses), length)
View(this.word.responses.count)
this.word.responses.count[-(this.word.responses.count$resp == i),]
this.word.responses.count[-c(this.word.responses.count$resp == i),]
View(this.word.responses.count)
this.word.responses.count[-c(this.word.responses.count$value == i),]
this.word.responses.count[this.word.responses.count$value != i,]
source('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
View(semantic.lists)
semantic.lists <- semantic.lists[semantic.lists$n_resp <20,]
View(semantic.lists)
source('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
View(semantic.lists)
x <- aggregate(data.frame(count = semantic.lists$cue,
list(value = semantic.lists$cue), length)
)
x <- aggregate(data.frame(count = semantic.lists$cue,
list(value = semantic.lists$cue), length))
x <- unique(semantic.lists$cue)
nrow(cue)
nrow(x)
x
write.csv(semantic.lists, file = "filtered_SWOW.csv")
source('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
debugSource('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
View(this.word.responses.count)
View(this.word.responses.count)
source('~/git/sourcemem/EXPINT/experiment/stimuli/sort_stimuli.R')
write.csv(semantic.lists, file = "filtered_SWOW2.csv")
