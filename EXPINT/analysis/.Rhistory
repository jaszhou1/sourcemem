'chi1', 'chi2', 'chi3', 'phi1', 'phi2', 'phi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
write.csv(res, paste(toString(Sys.Date()), '_', model_name,'.csv', sep =""))
return(res)
}
View(simulate_intrusion_cond_model_x)
temporal_ortho(data[data$participant ==1,])
colnames(res) <- c('participant','nLL','aic', 'kappa1', 'kappa2', 'beta1', 'beta2', 'beta3', 'gamma1', 'gamma2', 'gamma3',
'chi1', 'chi2', 'chi3', 'phi1', 'phi2', 'phi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
length(c('participant','nLL','aic', 'kappa1', 'kappa2', 'beta1', 'beta2', 'beta3', 'gamma1', 'gamma2', 'gamma3',
'chi1', 'chi2', 'chi3', 'phi1', 'phi2', 'phi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3'))
Sel = c(1, 1,  1, 0, 0,   1, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,    0, 0, 0, 0, 0, 0,   0, 0, 0,  0, 0, 0,  0, 0, 0)
# For the fixed parameters (P[Sel == 0], what value should parameter be fixed at? NA will be treated as "same as unrelated condition")
beta2 <- NA
beta3 <- NA
gamma2 <- NA
gamma3 <- NA
# intrusion weights
chi1 <- 0   # Item vs. Context weight
chi2 <- NA
chi3 <- NA
phi1 <- 0 # Space vs. Time weight
phi2 <- NA
phi3 <- NA
psi1 <- 0 # Semantic vs. Orthographic weight
psi2 <- NA
psi3 <- NA
# intrusion similarity decays
tau1 <- 0.5 # Temporal asymmetry (tau >0.5 means forwards are more similar)
tau2 <- NA
tau3 <- NA
lambda_b1 <- 0 # Similarity decay of backwards temporal lag
lambda_f1 <- 0 # Similarity decay of forwards temporal lag
lambda_b2 <- NA # Similarity decay of backwards temporal lag
lambda_f2 <- NA # Similarity decay of forwards temporal lag
lambda_b3 <- NA # Similarity decay of backwards temporal lag
lambda_f3 <- NA # Similarity decay of forwards temporal lag
zeta1 <- 0 # Similarity decay of spatial similarity
zeta2 <- NA
zeta3 <- NA
iota1 <- 0 # Similarity decay of orthographic component unrelated
iota2 <- NA # Decay for orthography orthographic
iota3 <- NA
upsilon1 <- 0 # Similarity decay of semantic component unrelated
upsilon2 <- NA # Decay for semantic orth
upsilon3 <- NA
Pfix = c(beta2, beta3, gamma2, gamma3, chi1, chi2, chi3, phi1, phi2, phi3,
psi1, psi2, psi3, tau1, tau2, tau3, lambda_b1,
lambda_f1, lambda_b2, lambda_f2, lambda_b3, lambda_f3, zeta1,
zeta2, zeta3, iota1, iota2, iota3, upsilon1, upsilon2, upsilon3)
# Boundaries for estimated parameters. DEoptim will sample uniformly between these bounds
#          prec1, prec2, beta1, gamma1
lower <- c(1,  1,  0.1, 0)
upper <- c(20, 15, 0.8, 0.14) #Gamma does a different job when all the similarity factors are weighted 0
length(Pfix)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2023-01-12_fits.RData")
# Top level script to fit response error models to my final PhD experiment
# Version 2, use a more refined set of models to narrow in on comparisons that
# can be written up sensibly.
library(CircStats)
library(circular)
library(DEoptim)
library(ggplot2)
library(extraDistr)
library(foreach)
library(doParallel)
library(plyr)
library(R.utils)
library(statip)
## Handle data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
# Source core model function
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
# Function to calculate aic
get_aic <- function(L, n_params){
aic <- 2*L + 2*n_params
return(aic)
}
cosine_distance <- function(theta, phi){
distance <- 1 - cos(theta - phi)
return(distance)
}
angle_diff <- function(a,b){
diff <- atan2(sin(a-b), cos(a-b))
return(diff)
}
## Load in the model variants
source('x1_flat_intrusion.R')
source('x2_flat_gamma_1.R')
source('x3_flat_gamma_2.R')
source('x4_temporal.R')
source('x5_asym_temporal.R')
source('x6_spatial.R')
source('x7_ortho.R')
source('x8_temp_ortho.R')
source('x9_spatial_ortho.R')
source('x10_spatiotemporal.R')
source('x11_spatiotemporal_ortho.R')
source('x12_four_factor.R')
# Introduce a new set of models, based on what fit well from the above list,
# which allow for difference in weight and slope of similarity factors
source('x13_temporal_weight.R')
source('x14_spatial_weight.R')
source('x15_spatiotemporal_weight.R')
source('x16_temporal_decay.R')
source('x17_spatial_decay.R')
source('x18_spatiotemporal_decay.R')
models <- c(flat_intrusion, flat_gamma1, flat_gamma2, temporal,
asym_temporal, spatial, ortho, temporal_ortho,
spatial_ortho, spatiotemporal, spatiotemporal_ortho,
four_factor, temporal_ortho_weight, spatial_ortho_weight,
spatiotemporal_ortho_weight, temporal_ortho_decay, spatial_ortho_decay,
spatiotemporal_ortho_decay)
model_names <- c('flat_intrusion', 'flat_gamma1', 'flat_gamma2', 'temporal',
'asym_temporal', 'spatial', 'ortho', 'temporal_ortho',
'spatial_ortho', 'spatiotemporal', 'spatiotemporal_ortho',
'four_factor', 'temporal_weight', 'spatial_weight',
'spatiotemporal_weight', 'temporal_decay', 'spatial_decay',
'spatiotemporal_decay')
fit_model <- function(data, model, model_name){
cl <- makeForkCluster((detectCores() - 1))
registerDoParallel(cl)
res = foreach (i = 1:length(participants),
.combine = rbind) %dopar% {
this.data <- data[data$participant == i,]
optim <- model(this.data)
pest <- optim$bestmem
this_fit <- c(participants[i], optim$bestval, optim$aic, optim$Pest)
return(this_fit)
}
res <- as.data.frame(res)
colnames(res) <- c('participant','nLL','aic', 'kappa1', 'kappa2', 'beta1', 'beta2', 'beta3', 'gamma1', 'gamma2', 'gamma3',
'chi1', 'chi2', 'chi3', 'phi1', 'phi2', 'phi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
write.csv(res, paste(toString(Sys.Date()), '_', model_name,'.csv', sep =""))
return(res)
}
library(CircStats)
library(circular)
library(DEoptim)
library(ggplot2)
library(extraDistr)
library(foreach)
library(doParallel)
library(plyr)
library(R.utils)
library(statip)
## Handle data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
# Source core model function
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
# Function to calculate aic
get_aic <- function(L, n_params){
aic <- 2*L + 2*n_params
return(aic)
}
cosine_distance <- function(theta, phi){
distance <- 1 - cos(theta - phi)
return(distance)
}
angle_diff <- function(a,b){
diff <- atan2(sin(a-b), cos(a-b))
return(diff)
}
## Load in the model variants
source('x1_flat_intrusion.R')
source('x2_flat_gamma_1.R')
source('x3_flat_gamma_2.R')
source('x4_temporal.R')
source('x5_asym_temporal.R')
source('x6_spatial.R')
source('x7_ortho.R')
source('x8_temp_ortho.R')
source('x9_spatial_ortho.R')
source('x10_spatiotemporal.R')
source('x11_spatiotemporal_ortho.R')
source('x12_four_factor.R')
# Introduce a new set of models, based on what fit well from the above list,
# which allow for difference in weight and slope of similarity factors
source('x13_temporal_weight.R')
source('x14_spatial_weight.R')
source('x15_spatiotemporal_weight.R')
source('x16_temporal_decay.R')
source('x17_spatial_decay.R')
source('x18_spatiotemporal_decay.R')
models <- c(flat_intrusion, flat_gamma1, flat_gamma2, temporal,
asym_temporal, spatial, ortho, temporal_ortho,
spatial_ortho, spatiotemporal, spatiotemporal_ortho,
four_factor, temporal_ortho_weight, spatial_ortho_weight,
spatiotemporal_ortho_weight, temporal_ortho_decay, spatial_ortho_decay,
spatiotemporal_ortho_decay)
model_names <- c('flat_intrusion', 'flat_gamma1', 'flat_gamma2', 'temporal',
'asym_temporal', 'spatial', 'ortho', 'temporal_ortho',
'spatial_ortho', 'spatiotemporal', 'spatiotemporal_ortho',
'four_factor', 'temporal_weight', 'spatial_weight',
'spatiotemporal_weight', 'temporal_decay', 'spatial_decay',
'spatiotemporal_decay')
this.data <- data[data$participant == 1,]
spatial_ortho(this.data)
temporal_ortho(this.data)
Sel = c(1, 1,  1, 0, 0,   1, 1, 0,  1, 0, 0,  1, 0, 0,  0, 0, 0,  0, 0, 0,   0, 0, 0, 0, 0, 0,   1, 0, 0,  1, 0, 0,  0, 0, 0)
length(Sel)
Sel = c(1, 1,  1, 0, 0,   1, 1, 0,  1, 0, 0,  1, 0, 0,  0, 0, 0,  0, 0, 0,   0, 0, 0, 0, 0, 0,   1, 0, 0,  1, 0, 0,  0, 0, 0)
# For the fixed parameters (P[Sel == 0], what value should parameter be fixed at? NA will be treated as "same as unrelated condition")
beta2 <- NA
beta3 <- NA
gamma3 <- NA
# intrusion weights
chi2 <- NA
chi3 <- NA
phi1 <- 1 # Space vs. Time weight
phi2 <- NA
phi3 <- NA
psi1 <- 0 # Semantic vs. Orthographic weight
psi2 <- NA
psi3 <- NA
# intrusion similarity decays
tau1 <- 0.5 # Temporal asymmetry (tau >0.5 means forwards are more similar)
tau2 <- NA
tau3 <- NA
lambda_b1 <- 0
lambda_f1 <- NA
lambda_b2 <- NA # Similarity decay of backwards temporal lag
lambda_f2 <- NA # Similarity decay of forwards temporal lag
lambda_b3 <- NA # Similarity decay of backwards temporal lag
lambda_f3 <- NA # Similarity decay of forwards temporal lag
zeta2 <- NA
zeta3 <- NA
iota2 <- NA # Decay for orthography orthographic
iota3 <- NA
upsilon1 <- 0 # Similarity decay of semantic component unrelated
upsilon2 <- NA # Decay for semantic orth
upsilon3 <- NA
Pfix = c(beta2, beta3, gamma3, chi2, chi3, phi1, phi2, phi3,
psi1, psi2, psi3, tau1, tau2, tau3,
lambda_b1, lambda_f1, lambda_b2, lambda_f2, lambda_b3, lambda_f3,
zeta2, zeta3, iota2, iota3, upsilon1, upsilon2, upsilon3)
lenght(Pfix)
length(Pfix)
length(Sel[Sel == 0])
flat_intrusion(this.data)
x <- flat_intrusion(this.data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/x1_flat_intrusion.R")
x <- flat_intrusion(this.data)
View(this_fit)
View(fit)
length(fit$Pest)
x
x <- optim
pest <- optim$bestmem
optim
x
fit <- flat_intrusion(this.data)
fit
View(fit)
View(fit)
pest <- fit$bestmem
pest
fit$Pest
length(fit$Pest)
this_fit <- c(1 fit$bestval, fit$aic, fit$Pest)
this_fit <- c(1 ,fit$bestval, fit$aic, fit$Pest)
this_fit
res <- as.data.frame(this_fit)
View(res)
res <- rbind(this_fit, this_fit)
View(res)
res <- as.data.frame(res)
View(res)
colnames(res) <- c('participant','nLL','aic', 'kappa1', 'kappa2', 'beta1', 'beta2', 'beta3', 'gamma1', 'gamma2', 'gamma3',
'chi1', 'chi2', 'chi3', 'phi1', 'phi2', 'phi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
View(res)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/x9_spatial_ortho.R")
x <- spatial_ortho(this.data)
x <- spatiotemporal(this.data)
x <- spatiotemporal_ortho(this.data)
x <- four_factor(this.data)
x <- temporal_weight(this.data)
x <- temporal_ortho_weight(this.data)
x <- spatial_ortho_weight(this.data)
x <- spatiotemporal_ortho_weight(this.data)
x <- temporal_ortho_decay(this.data)
x <- spatial_ortho_decay(this.data)
x <- spatiotemporal_ortho_decay(this.data)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
x <- spatiotemporal_ortho_decay(this.data)
View(temporal_similarity)
View(spatial_similarity)
View(semantic_similarity)
View(temporal_similarity)
x <- spatiotemporal_ortho_decay(this.data)
x <- spatiotemporal(this.data)
chi
chi1
gamma1
temporal_similarity
view(data)
data
View(intrusion_weights)
temporal_similarity[1,]
spatial_similarity[1,]
phi
phi1
phi1 <- 1
intrusion_weights[data$condition == 'unrelated',] <- gamma1 * (
(temporal_similarity[data$condition == 'unrelated',]^(1-phi1) *
spatial_similarity[data$condition == 'unrelated',]^phi1)^(1-chi1) *
(orthographic_similarity[data$condition == 'unrelated',]^(1-psi1) *
semantic_similarity[data$condition == 'unrelated',]^psi1)^chi1
)
intrusion_weights[1,]
spatial_weights[1,]
spatial_similarity[1,]
spatial_similarity[1,] * gamma
spatial_similarity[1,] * gamma1
intrusion_weights[1,]
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2023-01-13_preds.RData")
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2023-01-13_sim_data.RData")
View(model_simulations)
View(model_simulations)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2023-01-23_fits.RData")
View(model_fits)
# Version 2, use a more refined set of models to narrow in on comparisons that
# can be written up sensibly.
library(CircStats)
library(circular)
library(DEoptim)
library(ggplot2)
library(extraDistr)
library(foreach)
library(doParallel)
library(plyr)
library(R.utils)
library(statip)
## Handle data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
# Source core model function
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
# Function to calculate aic
get_aic <- function(L, n_params){
aic <- 2*L + 2*n_params
return(aic)
}
cosine_distance <- function(theta, phi){
distance <- 1 - cos(theta - phi)
return(distance)
}
angle_diff <- function(a,b){
diff <- atan2(sin(a-b), cos(a-b))
return(diff)
}
## Load in the model variants
source('x1_flat_intrusion.R')
source('x2_flat_gamma_1.R')
source('x3_flat_gamma_2.R')
source('x4_temporal.R')
source('x5_asym_temporal.R')
source('x6_spatial.R')
source('x7_ortho.R')
source('x8_temp_ortho.R')
source('x9_spatial_ortho.R')
source('x10_spatiotemporal.R')
source('x11_spatiotemporal_ortho.R')
source('x12_four_factor.R')
# Introduce a new set of models, based on what fit well from the above list,
# which allow for difference in weight and slope of similarity factors
source('x13_temporal_weight.R')
source('x14_spatial_weight.R')
source('x15_spatiotemporal_weight.R')
source('x16_temporal_decay.R')
source('x17_spatial_decay.R')
source('x18_spatiotemporal_decay.R')
models <- c(flat_intrusion, flat_gamma1, flat_gamma2, temporal,
asym_temporal, spatial, ortho, temporal_ortho,
spatial_ortho, spatiotemporal, spatiotemporal_ortho,
four_factor, temporal_ortho_weight, spatial_ortho_weight,
spatiotemporal_ortho_weight, temporal_ortho_decay, spatial_ortho_decay,
spatiotemporal_ortho_decay)
model_names <- c('flat_intrusion', 'flat_gamma1', 'flat_gamma2', 'temporal',
'asym_temporal', 'spatial', 'ortho', 'temporal_ortho',
'spatial_ortho', 'spatiotemporal', 'spatiotemporal_ortho',
'four_factor', 'temporal_weight', 'spatial_weight',
'spatiotemporal_weight', 'temporal_decay', 'spatial_decay',
'spatiotemporal_decay')
View(model_fits)
Sel = c(1, 1,  1, 0, 0,   1, 1, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,  0, 0, 0,    0, 0, 0, 0, 0, 0,   0, 0, 0,  0, 0, 0,  0, 0, 0)
length(Sel)
# Simulate model predictions from the estimated parameters (big job because recentering)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/resp_recenter_data.R")
sim_data <- data.frame()
recentered_sim_data <- data.frame()
for(i in 1:length(models)){
this_model <- model_fits[[i]]
for(j in participants){
this_participant_data <- data[data$participant == j,]
this_Pest <- this_model[j, 4:38]
this_sim_data <- simulate_intrusion_cond_model_x(j, this_participant_data, this_Pest, model_names[i])
this_recentered_data <- recenter.model2(this_sim_data)
sim_data <- rbind(sim_data, this_sim_data)
recentered_sim_data <- rbind(recentered_sim_data, this_recentered_data)
}
}
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
# Simulate model predictions from the estimated parameters (big job because recentering)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/resp_recenter_data.R")
sim_data <- data.frame()
recentered_sim_data <- data.frame()
for(i in 1:length(models)){
this_model <- model_fits[[i]]
for(j in participants){
this_participant_data <- data[data$participant == j,]
this_Pest <- this_model[j, 4:38]
this_sim_data <- simulate_intrusion_cond_model_x(j, this_participant_data, this_Pest, model_names[i])
this_recentered_data <- recenter.model2(this_sim_data)
sim_data <- rbind(sim_data, this_sim_data)
recentered_sim_data <- rbind(recentered_sim_data, this_recentered_data)
}
}
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/plot_simulation.R")
plot.orthographic.recenter(recentered_data, recentered_sim_data)
heaad(data)
head(data0)
head(data)
head(sim_data)
plot.response.error <- function(data, model){
plot <- ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_histogram(data = model, aes(x = simulated_error, y = ..density..), fill = 'red', bins = 50, alpha = 0.2)
return(plot)
}
plot.response.error(data, sim_data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/plot_simulation.R")
plot.orthographic.recenter(recentered_data, recentered_sim_data)
plot.response.error(data, sim_data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/plot_simulation.R")
plot.response.error(data, sim_data)
plot.orthographic.recenter(recentered_data, recentered_sim_data)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits_v2.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/plot_simulation.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/plot_simulation.R")
# Specify some parameter values
kappa1 <- 12.6
kappa2 <- 10.76
beta1 <- 0.3
beta2 <- NA
beta3 <- NA
gamma1 <- 0.4
gamma2 <- 0.4
gamma3 <- NA
# intrusion weights
chi1 <- 1 # Item weight
chi2 <- NA
chi3 <- NA
phi1 <- 0 # Space weight
phi2 <- NA
phi3 <- NA
psi1 <- 0 # Semantic weight
psi2 <- NA
psi3 <- NA
# intrusion similarity decays
tau1 <- 0.5 # Temporal asymmetry (tau >0.5 means forwards are more similar)
tau2 <- NA
tau3 <- NA
lambda_b1 <- 0 # Similarity decay of backwards temporal lag
lambda_f1 <- 0 # Similarity decay of forwards temporal lag
lambda_b2 <- NA # Similarity decay of backwards temporal lag
lambda_f2 <- NA # Similarity decay of forwards temporal lag
lambda_b3 <- NA # Similarity decay of backwards temporal lag
lambda_f3 <- NA # Similarity decay of forwards temporal lag
zeta1 <- 0 # Similarity decay of spatial similarity
zeta2 <- NA
zeta3 <- NA
iota1 <- 20 # Similarity decay of orthographic component unrelated
iota2 <- NA # Decay for orthography orthographic
iota3 <- NA
upsilon1 <- 0 # Similarity decay of semantic component unrelated
upsilon2 <- NA # Decay for semantic orth
upsilon3 <- NA
P = c(kappa1, kappa2, beta1, beta2, beta3, gamma1, gamma2, gamma3, chi1, chi2, chi3,
phi1, phi2, phi3, psi1, psi2, psi3, tau1, tau2, tau3,
lambda_b1, lambda_f1, lambda_b2, lambda_f2, lambda_b3, lambda_f3, zeta1,
zeta2, zeta3, iota1, iota2, iota3, upsilon1, upsilon2, upsilon3)
simulate_intrusion_cond_model_x(99, data, P, 'test')
