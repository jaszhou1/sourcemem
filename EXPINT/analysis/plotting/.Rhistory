plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient", "Spatiotemporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_1_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_1_models <- recentered_all[recentered_all$model %in% plot_1_model_strings,]
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, )
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
position
View(data)
head(sim_temporal)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
this_data
View(this_average_error)
i
position
data
i
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
concatenate_model_average_error <- function(){
mix <- get_average_error_across_position(sim_mix, 'Pure Guess')
pure_int <- get_average_error_across_position(sim_pure_intrusion, 'Pure Intrusion')
int <- get_average_error_across_position(sim_intprec, 'Intrusion + Guess')
temp <- get_average_error_across_position(sim_temporal, 'Temporal')
spatio <- get_average_error_across_position(sim_spatiotemporal, 'Spatiotemporal')
res <- rbind(mix, pure_int, int, temp, spatio)
return(res)
}
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- concatenate_model_average_error()
View(x)
data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
for (i in 1:10){
this_average_error[i,1] <- i
this_average_error[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
errors_across_serial_position <- function(data){
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
serial_position_data[i,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05))) +
scale_color_manual(values=c("black", "red"))
return(plot)
}
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
View(serial_position_data)
serial_position_data[,3] <- 'data'
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2)
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(serial_position_data) <- c('position','error','model')
serial_position_data[,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = simulated_error))
plot
head(models)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = error))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position, color = model))
View(models)
x <- models[modesl$model == 'Temporal',]
x <- models[models$model == 'Temporal',]
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05)))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.05))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
source('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
plot_data(data, plot_2_models, color_wheel[3:5])
source('~/git/sourcemem_online/analysis/plot_recentered.R')
compare_model_asymm(data,plot_3_models, 'Recentered Asymmetry', c(color_wheel[3], color_wheel[4], color_wheel[5]))
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
recenter_data(data)
this_intrusions
this_intrusions[[j]]
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
View(recentered_errors)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
recentered_pure_intrusion <- recenter_model(sim_pure_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
this_intrusions
this_intrusions[[j]]
this_response_angle
this_response_angle <- as.numeric(model[i,]$simulated_response)
this_target_angle <- as.numeric(model[i,]$target_angle)
angle_diff(this_response_angle, this_intrusions[[j]])
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
View(recentered_errors)
model[i, 'participant']
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
model[i, 'model']
View(model)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
View(recentered_errors)
recentered_errors[idx,8] <- model_string
View(recentered_errors)
idx
idx + 1
idx <- idx + 1
idx
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
data$condition
this_data <- data[data$condition == "orthographic",]
ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
cond <- "orth"
ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
cond <- "orthographic"
ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
View(this_data)
View(this_data)
recenter_data <- recenter.data(data)
View(recenter_data)
recenter_data$cond
cond <- "orthographic"
this_data <- recenter_data[recenter_data$cond == cond,]
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
orth
this_data <- recenter_data[recenter_data$cond == cond,]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
orth
View(data)
cond = 'unrelated'
this_data <- recenter_data[recenter_data$cond == cond,]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
orth
source("~/git/sourcemem/EXPINT/analysis/plotting/plot_diffusion_predictions.R")
View(data)
## PLOT_DIFFUSION_PREDICTIONS
# Read in simulated datasets from the MATLAB code as .csv, turn the simulated
# data into density co-ordinates to plot against the data, from a variety of
# facets.
## Load dependencies
library(circular)
library(stringdist)
library(rjson)
library(lsa)
library(psycho)
library(ggplot2)
library(grid)
## Looking at data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/analysis/modelling/MATLAB/EXPINT_data.csv")
# Exclude data from practice blocks
data <- data[data$block != -1,]
View(data)
this.data <- data[data$participant == 1,]
i <- 1
this.data <- data[data$participant == i,]
View(this.data)
View(data)
# Express RTs in seconds, not ms
data$source_RT <- data$source_RT/1000
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
this.data <- data[data$participant == i,]
View(this.data)
data <- data[(data$valid_RT) & (data$is_stimulus),]
# Express RTs in seconds, not ms
data$source_RT <- data$source_RT/1000
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
this.data <- data[data$participant == i,]
View(this.data)
hist(this.data$sou)
i <- 1
source("~/git/sourcemem/EXPINT/analysis/plotting/plot_diffusion_predictions.R")
View(this.data)
hist(this.data$source_RT)
hist(this.data$source_RT, bins = 50)
hist(this.data$source_RT, breaks = 50)
hist(this.data$source_error, breaks = 50)
data[1,16:22]
data[1,30:36]
saturated <- read.csv("~git/sourcemem/EXPINT/analysis/plotting/sim_saturated.csv")
saturated <- read.csv("~/git/sourcemem/EXPINT/analysis/plotting/sim_saturated.csv")
spatiotemporal <- read.csv("~/git/sourcemem/EXPINT/analysis/plotting/sim_spatiotemporal.csv")
data$source_error
ggplot(data) + geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white')
ggplot(data) + geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50)
head(data)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
facet_grid(participant)
data$participant
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
facet_grid(participant)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
facet_grid(~participant)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
facet_grid(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
facet_wrap(~participant, ncol = 5)
View(saturated)
colnames <- c('error', 'rt', 'resp_angle', 'targ_angle',
'offset_1', 'offset_2', 'offset_3', 'offset_4', 'offset_5',
'offset_6', 'offset_7',
'lag_1', 'lag_2', 'lag_3', 'lag_4', 'lag_5',
'lag_6', 'lag_7',
'space_1', 'space_2', 'space_3', 'space_4', 'space_5',
'space_6', 'space_7',
'orth_1', 'orth_2', 'orth_3', 'orth_4', 'orth_5',
'orth_6', 'orth_7',
'sem_1', 'sem_2', 'sem_3', 'sem_4', 'sem_5',
'sem_6', 'sem_7',
'cond', 'participant')
colnames <- c('error', 'rt', 'resp_angle', 'targ_angle', 'trial_number',
'offset_1', 'offset_2', 'offset_3', 'offset_4', 'offset_5',
'offset_6', 'offset_7',
'lag_1', 'lag_2', 'lag_3', 'lag_4', 'lag_5',
'lag_6', 'lag_7',
'space_1', 'space_2', 'space_3', 'space_4', 'space_5',
'space_6', 'space_7',
'orth_1', 'orth_2', 'orth_3', 'orth_4', 'orth_5',
'orth_6', 'orth_7',
'sem_1', 'sem_2', 'sem_3', 'sem_4', 'sem_5',
'sem_6', 'sem_7',
'angle_1', 'angle_2', 'angle_3', 'angle_4', 'angle_5',
'angle_6', 'angle_7',
'cond', 'participant')
col.names <- c('error', 'rt', 'resp_angle', 'targ_angle', 'trial_number',
'offset_1', 'offset_2', 'offset_3', 'offset_4', 'offset_5',
'offset_6', 'offset_7',
'lag_1', 'lag_2', 'lag_3', 'lag_4', 'lag_5',
'lag_6', 'lag_7',
'space_1', 'space_2', 'space_3', 'space_4', 'space_5',
'space_6', 'space_7',
'orth_1', 'orth_2', 'orth_3', 'orth_4', 'orth_5',
'orth_6', 'orth_7',
'sem_1', 'sem_2', 'sem_3', 'sem_4', 'sem_5',
'sem_6', 'sem_7',
'angle_1', 'angle_2', 'angle_3', 'angle_4', 'angle_5',
'angle_6', 'angle_7',
'cond', 'participant')
colnames(saturated, col.names)
col.names <- c('error', 'rt', 'resp_angle', 'targ_angle', 'trial_number',
'offset_1', 'offset_2', 'offset_3', 'offset_4', 'offset_5',
'offset_6', 'offset_7',
'lag_1', 'lag_2', 'lag_3', 'lag_4', 'lag_5',
'lag_6', 'lag_7',
'space_1', 'space_2', 'space_3', 'space_4', 'space_5',
'space_6', 'space_7',
'orth_1', 'orth_2', 'orth_3', 'orth_4', 'orth_5',
'orth_6', 'orth_7',
'sem_1', 'sem_2', 'sem_3', 'sem_4', 'sem_5',
'sem_6', 'sem_7',
'angle_1', 'angle_2', 'angle_3', 'angle_4', 'angle_5',
'angle_6', 'angle_7',
'cond', 'participant')
colnames(saturated) <- col.names
View(saturated)
colnames(spatiotemporal, col.names)
colnames(saturated) <- col.names
colnames(spatiotemporal) <- col.names
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = saturated, aex(error))
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = saturated, aes(x = error))
facet_wrap(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = saturated, aes(x = error)) +
facet_wrap(~participant, ncol = 5)
saturated[,50] <- 'saturated'
spatiotemporal[,50] <- 'spatiotemporal
'
'
''
saturated[,50] <- 'saturated'
saturated[,50] <- 'saturated'
spatiotemporal[,50] <- 'spatiotemporal'
col.names <- c('error', 'rt', 'resp_angle', 'targ_angle', 'trial_number',
'offset_1', 'offset_2', 'offset_3', 'offset_4', 'offset_5',
'offset_6', 'offset_7',
'lag_1', 'lag_2', 'lag_3', 'lag_4', 'lag_5',
'lag_6', 'lag_7',
'space_1', 'space_2', 'space_3', 'space_4', 'space_5',
'space_6', 'space_7',
'orth_1', 'orth_2', 'orth_3', 'orth_4', 'orth_5',
'orth_6', 'orth_7',
'sem_1', 'sem_2', 'sem_3', 'sem_4', 'sem_5',
'sem_6', 'sem_7',
'angle_1', 'angle_2', 'angle_3', 'angle_4', 'angle_5',
'angle_6', 'angle_7',
'cond', 'participant', 'model')
colnames(saturated) <- col.names
colnames(spatiotemporal) <- col.names
models <- rbind(saturated, spatiotemporal)
models <- rbind(saturated, spatiotemporal)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = models, aes(x = error, colour = model)) +
facet_wrap(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = models, aes(x = error, colour = model, weight = 2, adjust = 3)) +
facet_wrap(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = models, aes(x = error, colour = model), weight = 2, adjust = 3) +
facet_wrap(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = models, aes(x = error, colour = model), weight = 5, adjust=bw(1.5, models$error)) +
facet_wrap(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = models, aes(x = error, colour = model), weight = 5) +
facet_wrap(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = models, aes(x = error, colour = model), size = 2) +
facet_wrap(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = models, aes(x = error, colour = model), size = 1.5) +
facet_wrap(~participant, ncol = 5)
ggplot(data) +
geom_histogram(aes(x = source_RT, y = ..density..), colour = 1, fill = 'white', bins = 50) +
geom_density(data = models, aes(x = rt, colour = model), size = 1.2) +
xlim(0, 5) +
facet_wrap(~participant, ncol = 5)
data[1,16:22]
source('recenter_data.R')
setwd("~/git/sourcemem/EXPINT/analysis/plotting/")
source('recenter_data.R')
source('recenter_data.R')
recentered_data <- recenter.data(data)
source("~/git/sourcemem/EXPINT/analysis/plotting/recenter_data.R")
recentered_data <- recenter.data(data)
head(recentered_data)
hist(recentered_data$offset)
hist(recentered_data$offset, breaks = 40)
hist(recentered_data$offset, breaks = 50)
hist(recentered_data[recentered_data$lag =1,'offset'], breaks = 50)
hist(recentered_data[recentered_data$lag == 1, 'offset'], breaks = 50)
hist(recentered_data[(recentered_data$cond == 'orthographic'), 'offset'], breaks = 50)
hist(recentered_data[(recentered_data$cond == 'orthographic') & (recentered_data$orthographic == 1), 'offset'], breaks = 50)
hist(recentered_data[(recentered_data$cond == 'orthographic') & (recentered_data$orthographic == 2), 'offset'], breaks = 50)
hist(recentered_data[(recentered_data$cond == 'orthographic') & (recentered_data$orthographic == 1), 'offset'], breaks = 50)
hist(recentered_data[(recentered_data$cond == 'orthographic') & (recentered_data$spatial_bin == 1), 'offset'], breaks = 50)
hist(recentered_data[(recentered_data$cond == 'orthographic') & (recentered_data$spatial_bin == 2), 'offset'], breaks = 50)
hist(recentered_data[(recentered_data$cond == 'orthographic') & (recentered_data$spatial_bin == 3), 'offset'], breaks = 50)
hist(recentered_data[(recentered_data$cond == 'orthographic') & (recentered_data$spatial_bin == 4), 'offset'], breaks = 50)
head(saturated)
source("~/git/sourcemem/EXPINT/analysis/plotting/recenter_data.R")
recentered_saturated <- recenter.model(saturated)
recentered_saturated <- recenter.model(saturated)
x
recentered_saturated <- recenter.model(saturated)
recentered_saturated <- recenter.model(saturated)
head(saturated)
