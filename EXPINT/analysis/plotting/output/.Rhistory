View(y)
get.group.cond.error <- function(data){
res <- data.frame()
for(i in unique(data$cond)){
this_cond_error <- get.this.cond.error(data, i, k)
this_cond_error <- cbind(k, this_cond_error)
res <- rbind(res, this_cond_error)
}
res <- cbind('Group', res)
colnames(res) <- c('Participant', 'Position', 'Condition', 'Error', 'RT')
return(res)
}
group <- get.group.cond.error(data
)
get.group.cond.error <- function(data){
res <- data.frame()
for(i in unique(data$cond)){
this_cond_error <- get.this.cond.error(data, i)
this_cond_error <- cbind(k, this_cond_error)
res <- rbind(res, this_cond_error)
}
res <- cbind('Group', res)
colnames(res) <- c('Participant', 'Position', 'Condition', 'Error', 'RT')
return(res)
}
group <- get.group.cond.error(data
)
get.group.cond.error <- function(data){
res <- data.frame()
for(i in unique(data$cond)){
this_cond_error <- get.this.cond.error(data, i)
this_cond_error <- cbind(k, this_cond_error)
res <- rbind(res, this_cond_error)
}
res <- cbind('Group', res)
colnames(res) <- c('Participant', 'Position', 'Condition', 'Error', 'RT')
return(res)
}
group <- get.group.cond.error(data
)
get.group.cond.error <- function(data){
res <- data.frame()
for(i in unique(data$cond)){
this_cond_error <- get.this.cond.error(data, i)
res <- rbind(res, this_cond_error)
}
res <- cbind('Group', res)
colnames(res) <- c('Participant', 'Position', 'Condition', 'Error', 'RT')
return(res)
}
group <- get.group.cond.error(data
)
View(group)
# Participant-level
get.this.cond.error <- function(data, cond, participant){
this_cond <- data.frame(matrix(nrow = 8, ncol = 4))
if (missing(participant)){
this_data <- data[data$condition == cond,]
} else {
this_data <- data[(data$condition == cond) & (data$participant == participant),]
}
for(i in unique(data$present_trial)){
this_pos_data <- this_data[this_data$present_trial == i,]
this_error <- median(abs(this_pos_data$source_error))
this_RT <- median(abs(this_pos_data$source_RT))
this_cond[i,1] <- i
this_cond[i,2] <- cond
this_cond[i,3] <- this_error
this_cond[i,4] <- this_RT
}
return(this_cond)
}
# Wrapper, group level
get.group.cond.error <- function(data){
res <- data.frame()
for(i in unique(data$cond)){
this_cond_error <- get.this.cond.error(data, i)
res <- rbind(res, this_cond_error)
}
res <- cbind('Group', res)
colnames(res) <- c('Participant', 'Position', 'Condition', 'Error', 'RT')
return(res)
}
group <- get.group.cond.error(data
)
View(group)
plot.serial.error <- function(serial_error){
plot <- ggplot(data = serial_error) +
# Median Error in dots and lines
geom_point(aes(x = Position, y = Error, colour = Condition)) +
geom_line(aes(x = Position, y = Error, colour = Condition)) +
# Line segment for 95% confidence interval at each point
#geom_errorbar(aes(x = Position, ymin = ci_lower, ymax = ci_upper, colour = Condition), alpha = 0.3, width = 0.1) +
ggtitle('Median Error across Serial Position') +
scale_x_continuous(breaks = 1:8) +
theme(text = element_text(size = 16))
# Can facet to make each condition clearer
#facet_wrap(~Condition, nrow = 3, scales = 'free')
return(plot)
}
plot.serial.error(group)
source("~/git/sourcemem/EXPINT/analysis/plotting/error_across_position.R")
# Group-Level
# Participant-level
get.this.cond.error <- function(data, cond, participant){
this_cond <- data.frame(matrix(nrow = 8, ncol = 4))
if (missing(participant)){
this_data <- data[data$condition == cond,]
} else {
this_data <- data[(data$condition == cond) & (data$participant == participant),]
}
for(i in unique(data$present_trial)){
this_pos_data <- this_data[this_data$present_trial == i,]
this_error <- mean(abs(this_pos_data$source_error))
this_RT <- mean(abs(this_pos_data$source_RT))
this_cond[i,1] <- i
this_cond[i,2] <- cond
this_cond[i,3] <- this_error
this_cond[i,4] <- this_RT
}
return(this_cond)
}
# Wrapper, group level
get.group.cond.error <- function(data){
res <- data.frame()
for(i in unique(data$cond)){
this_cond_error <- get.this.cond.error(data, i)
res <- rbind(res, this_cond_error)
}
res <- cbind('Group', res)
colnames(res) <- c('Participant', 'Position', 'Condition', 'Error', 'RT')
return(res)
}
plot.serial.error(group)
# Group-Level
# Participant-level
get.this.cond.error <- function(data, cond, participant){
this_cond <- data.frame(matrix(nrow = 8, ncol = 4))
if (missing(participant)){
this_data <- data[data$condition == cond,]
} else {
this_data <- data[(data$condition == cond) & (data$participant == participant),]
}
for(i in unique(data$present_trial)){
this_pos_data <- this_data[this_data$present_trial == i,]
this_error <- mean(abs(this_pos_data$source_error))
this_RT <- mean(abs(this_pos_data$source_RT))
this_cond[i,1] <- i
this_cond[i,2] <- cond
this_cond[i,3] <- this_error
this_cond[i,4] <- this_RT
}
return(this_cond)
}
# Wrapper, group level
get.group.cond.error <- function(data){
res <- data.frame()
for(i in unique(data$cond)){
this_cond_error <- get.this.cond.error(data, i)
res <- rbind(res, this_cond_error)
}
res <- cbind('Group', res)
colnames(res) <- c('Participant', 'Position', 'Condition', 'Error', 'RT')
return(res)
}
plot.serial.error(group)
group <- get.group.cond.error(data)
plot.serial.error(group)
i <- 1
this.data <- data[data$present_trial == i]
this.position.data <- data[data$present_trial == i,]
View(this.position.data)
data$source_error <- abs(data$source_error)
View(data)
hist(data$source_error)
this.position.data <- data[data$present_trial == i,]
this.position.gm <- mean(this.position.data$source_error)
unique(data$present_trial)
j <- 1
this.p.data <- this.position.data[this.position.data$participant == j,]
View(this.p.data)
nrow(data[data$recognised,])
this.p.mean <- mean(this.p.data$source_error)
this.p.data$source_error <- this.p.mean - this.p.data$source_error
View(this.p.data)
this.p.data$source_error <- this.position.gm + this.p.data$source_error
hist(this.p.data$source_error)
View(this.p.data)
normalised.error <- data.frame
for(j in unique(data$participant)){
this.p.data <- this.position.data[this.position.data$participant == j,]
# 5. Find this participants mean
this.p.mean <- mean(this.p.data$source_error)
# 6. Subtract the participant mean from all observations from this participant
this.p.data$source_error <- this.p.mean - this.p.data$source_error
# 7. Add the grand mean to all observations
this.p.data$source_error <- this.position.gm + this.p.data$source_error
normalised.error <- rbind(normalised.error, this.p.data)
}
normalised.error <- data.frame()
for(j in unique(data$participant)){
this.p.data <- this.position.data[this.position.data$participant == j,]
# 5. Find this participants mean
this.p.mean <- mean(this.p.data$source_error)
# 6. Subtract the participant mean from all observations from this participant
this.p.data$source_error <- this.p.mean - this.p.data$source_error
# 7. Add the grand mean to all observations
this.p.data$source_error <- this.position.gm + this.p.data$source_error
normalised.error <- rbind(normalised.error, this.p.data)
}
hist(normalised.error$source_error)
hist(normalised.error$source_error, bins = 50)
hist(normalised.error$source_error, breaks = 50)
warnings()
hist(this.position.data$source_error)
sd(normalised.error$source_error)
sqrt
sqrt(10)
(sd(normalised.error$source_error))/sqrt(length(participants))
# 4. Subset participant, normalise the between-participant variability
normalised.error <- data.frame()
for(j in participants){
this.p.data <- this.position.data[this.position.data$participant == j,]
# 5. Find this participants mean
this.p.mean <- mean(this.p.data$source_error)
# 6. Subtract the participant mean from all observations from this participant
this.p.data$source_error <- this.p.mean - this.p.data$source_error
# 7. Add the grand mean to all observations
this.p.data$source_error <- abs(this.position.gm + this.p.data$source_error)
normalised.error <- rbind(normalised.error, this.p.data)
}
(sd(normalised.error$source_error))/sqrt(length(participants))
## Load dependencies
library(boot)
library(ggplot2)
## Looking at data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Get rid of foil data, and data with invalid RT
data <- data[(data$valid_RT) & (data$is_stimulus),]
data$present_trial <- data$present_trial + 1
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
aov
data$source_error <- abs(data$source_error)
View(data)
aov(source_error ~ condition, data = data)
one.way <- aov(source_error ~ condition, data = data)
summary(one.way)
View(data)
View(data)
anova <- aov(source_error ~ condition * participant, data = data)
summary(anova)
resid <- anova$residuals
hist(resid)
3/2
i <- 1
j <- 1
this.position.data <- data[data$present_trial == i,]
this.p.data <- this.position.data[this.position.data$participant == j,]
View(this.p.data)
median(this.p.data$source_error)
this.participant.data <- data[data$participant == i,]
this.position.data <- this.participant.data[this.participant.data$present_trial == j,]
this.median.error <- median(this.position.data$source_error)
this.row <- c(i, j, this.median.error)
median.error <- data.frame()
for(i in participants){
this.participant.data <- data[data$participant == i,]
for(j in unique(data$present_trial)){
this.position.data <- this.participant.data[this.participant.data$present_trial == j,]
this.median.error <- median(this.position.data$source_error)
this.row <- c(i, j, this.median.error)
median.error <- rbind(median.error, this.row)
}
}
View(median.error)
colnames(median.error) <- c('participant', 'position', 'median_error')
View(median.error)
median.error <- data.frame()
for(i in participants){
this.participant.data <- data[data$participant == i,]
for(j in conds){
this.condition.data <- this.participant.data[this.participant.data$condition == j,]
for(k in unique(data$present_trial)){
this.position.data <- this.condition.data[this.condition.data$present_trial == k,]
this.median.error <- median(this.position.data$source_error)
this.row <- c(i, j, k, this.median.error)
median.error <- rbind(median.error, this.row)
}
}
}
colnames(median.error) <- c('participant', 'condition', 'position', 'median_error')
View(median.error)
ggplot(data = median.error) +
geom_point(aes(x = position, y = median_error, color = condition))
ggplot(data = median.error) +
geom_point(aes(x = position, y = median_error, color = condition)) +
geom_line(aes(x = position, y = median_error, color = condition)) +
ggtitle('Median Error across Serial Position') +
facet_wrap(~participant) +
scale_x_continuous(breaks = 1:8) +
theme(text = element_text(size = 16))
ggplot(data = median.error) +
geom_point(aes(x = position, y = median_error, color = condition)) +
geom_line(aes(x = position, y = median_error, color = condition)) +
ggtitle('Median Error across Serial Position') +
facet_wrap(~participant) +
theme(text = element_text(size = 16))
View(median.error)
ggplot(data = median.error) +
geom_point(aes(x = position, y = median_error, color = condition)) +
geom_line(aes(x = position, y = median_error, color = condition)) +
facet_wrap(~participant)
ggplot(data = median.error, aes(x = position, y = median_error, color = condition, group = participant)) +
geom_point() +
geom_line() +
facet_wrap(~participant) +
theme(text = element_text(size = 16))
ggplot(data = median.error, aes(x = position, y = median_error, color = condition, group = 1)) +
geom_point() +
geom_line()
x <- get.individual.cond.error(data)
View(x)
# Function to get the mean error and RT at each serial position, per condition, and if requested, per participant
get.this.cond.error <- function(data, cond, participant){
this_cond <- data.frame(matrix(nrow = 8, ncol = 4))
if (missing(participant)){
this_data <- data[data$condition == cond,]
} else {
this_data <- data[(data$condition == cond) & (data$participant == participant),]
}
for(i in unique(data$present_trial)){
this_pos_data <- this_data[this_data$present_trial == i,]
this_error <- median(abs(this_pos_data$source_error))
this_RT <- median(abs(this_pos_data$source_RT))
this_cond[i,1] <- i
this_cond[i,2] <- cond
this_cond[i,3] <- this_error
this_cond[i,4] <- this_RT
}
return(this_cond)
}
x <- get.individual.cond.error(data)
View(x)
median.errors <- get.individual.cond.error(data)
plot.indiv.serial.error(median.errors)
unique(data$present_trial)
individual_median <- median.errors
head(individual_median)
unique(individual_median$Position
)
i <- 1
this_position <- individual_median[individual_median$Position == i,]
this_position
View(this_position)
j <- 1
j <- 'orthographic'
this_condition <- this_position[this_position$Condition == j,]
View(this_condition)
mean(this_condition$Error)
View(group)
sd(this_condition$Error)
sd(this_condition$Error)/sqrt(10)
error_CI <- (sd(this_condition$Error)/sqrt(10)) * 1.96
error_CI
summary(anova)
anova$effects
anova$terms
summary(anova)
aov(data = data, source_error ~ condition * participant)
summary(aov(data = data, source_error ~ condition * participant))
anova <- summary(aov(data = data, source_error ~ condition * participant))
anova
View(anova)
anova[[1]]$`Mean Sq`
anova[[1]]$`Mean Sq`[1]
sqrt(MS/10)
MS <- anova[[1]]$`Mean Sq`[1]
standard_error <- sqrt(MS/10)
standard_error
standard_error * 1.96
(sd(this_condition$Error)/sqrt(10)) * 1.96
MS
MS/10
View(data)
summary(anova)
anova
aov(data = data, source_error ~ participant)
summary(aov(data = data, source_error ~ participant))
## Looking at data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Get rid of foil data, and data with invalid RT
data <- data[(data$valid_RT) & (data$is_stimulus),]
data$present_trial <- data$present_trial + 1
aov(data = data, source_error ~ participant)
summary(aov(data = data, source_error ~ participant))
summary(aov(data = data, source_error ~ condition*participant))
anova <- summary(aov(data = data, source_error ~ condition * participant))
MS <- anova[[1]]$`Mean Sq`[1]
MS
standard_error <- sqrt(MS/10)
error_CI <- (sd(this_condition$Error)/sqrt(10)) * 1.96
error_CI
sqrt(MS/10)
MS
anova <- summary(aov(data = data, source_error ~ condition * participant))
anova
MS <- anova[[1]]$`Mean Sq`[2]
standard_error <- sqrt(MS/10) * 1.96
standard_error
this_condition <- this_position[this_position$Condition == j,]
this_condition
this_mean_error <- mean(this_condition$Error)
# Standard error of the mean (of participant median response error)
# Per Loftus & Masson (1994), we can ignore between-subject variance,
# since we are actually interested in differences between condition & position
# To isolate this from subject variability, we use a modified standard error
# based on the Mean Square from ANOVA:
anova <- summary(aov(data = data, source_error ~ condition * participant))
MS <- anova[[1]]$`Mean Sq`[2]
standard_error <- sqrt(MS/10)
# As with regular confidence interval, the 95% CI is 1.96* the standard error
CI_error <- standard_error * 1.96
# Add and subtract this value to get the end points of the 95% CI
this_mean_error_lower <- this_mean_error - CI_error
this_mean_error_upper <- this_mean_error + CI_error
c(i, j, this_mean_error, this_mean_error_lower, this_mean_error_upper)
standard_error
CI_error
group.cond.error <- data.frame()
for(i in unique(individual_median$Position)){
this_position <- individual_median[individual_median$Position == i,]
for(j in unique(individual_median$Condition)){
this_condition <- this_position[this_position$Condition == j,]
this_mean_error <- mean(this_condition$Error)
# Standard error of the mean (of participant median response error)
# Per Loftus & Masson (1994), we can ignore between-subject variance,
# since we are actually interested in differences between condition & position
# To isolate this from subject variability, we use a modified standard error
# based on the Mean Square from ANOVA:
anova <- summary(aov(data = data, source_error ~ condition * participant))
MS <- anova[[1]]$`Mean Sq`[2]
standard_error <- sqrt(MS/10)
# As with regular confidence interval, the 95% CI is 1.96* the standard error
CI_error <- standard_error * 1.96
# Add and subtract this value to get the end points of the 95% CI
this_mean_error_lower <- this_mean_error - CI_error
this_mean_error_upper <- this_mean_error + CI_error
# Let's not worry about RT for now
# this_mean_RT <- mean(this_condition$RT)
group.cond.error <- rbind(group.cond.error,
c(i, j, this_mean_error, this_mean_error_lower, this_mean_error_upper))
}
}
View(group.cond.error)
View(group)
colnames(group.cond.error) <- c('Position', 'Condition', 'Mean Error', 'CI.Lower', 'CI.Upper')
View(group.cond.error)
plot.serial.error <- function(serial_error){
plot <- ggplot(data = serial_error) +
# Median Error in dots and lines
geom_point(aes(x = Position, y = Error, colour = Condition)) +
geom_line(aes(x = Position, y = Error, colour = Condition)) +
# Line segment for 95% confidence interval at each point
geom_errorbar(aes(x = Position, ymin = CI.Lower, ymax = CI.Upper, colour = Condition), alpha = 0.3, width = 0.1) +
ggtitle('Median Error across Serial Position') +
scale_x_continuous(breaks = 1:8) +
theme(text = element_text(size = 16))
# Can facet to make each condition clearer
#facet_wrap(~Condition, nrow = 3, scales = 'free')
return(plot)
}
plot.serial.error(group.cond.error)
colnames(group.cond.error) <- c('Position', 'Condition', 'Error', 'CI.Lower', 'CI.Upper')
plot.serial.error(group.cond.error)
plot.serial.error <- function(serial_error){
plot <- ggplot(data = serial_error) +
# Median Error in dots and lines
geom_point(aes(x = Position, y = Error, colour = Condition)) +
geom_line(aes(x = Position, y = Error, colour = Condition)) +
# Line segment for 95% confidence interval at each point
geom_errorbar(aes(x = Position, ymin = CI.Lower, ymax = CI.Upper, colour = Condition), alpha = 0.3, width = 0.1) +
ggtitle('Median Error across Serial Position') +
#scale_x_continuous(breaks = 1:8) +
theme(text = element_text(size = 16))
# Can facet to make each condition clearer
#facet_wrap(~Condition, nrow = 3, scales = 'free')
return(plot)
}
plot.serial.error(group.cond.error)
View(group.cond.error)
View(group)
plot.serial.error <- function(serial_error){
plot <- ggplot(data = serial_error) +
# Median Error in dots and lines
geom_point(aes(x = Position, y = Error, colour = Condition)) +
geom_line(aes(x = Position, y = Error, colour = Condition)) +
# Line segment for 95% confidence interval at each point
#geom_errorbar(aes(x = Position, ymin = CI.Lower, ymax = CI.Upper, colour = Condition), alpha = 0.3, width = 0.1) +
ggtitle('Median Error across Serial Position') +
#scale_x_continuous(breaks = 1:8) +
theme(text = element_text(size = 16))
# Can facet to make each condition clearer
#facet_wrap(~Condition, nrow = 3, scales = 'free')
return(plot)
}
plot.serial.error(group.cond.error)
