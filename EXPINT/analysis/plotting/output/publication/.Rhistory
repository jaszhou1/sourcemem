View(data)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model.R")
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_fits.RData")
View(model_fits)
mean(model_fits$equal_nosem$gamma1)
mean(model_fits$equal_nosem$gamma2)
mean(model_fits$flat_gamma1$gamma2)
mean(model_fits$flat_gamma1$gamma1)
mean(model_fits$flat_gamma1$gamma3)
mean(model_fits$flat_gamma2$gamma3)
mean(model_fits$flat_gamma2$gamma2)
mean(model_fits$flat_gamma2$gamma1)
mean(model_fits$flat_gamma2$beta)
mean(model_fits$flat_gamma2$beta1)
mean(model_fits$flat_gamma2$beta2)
mean(model_fits$flat_gamma2$beta1)
mean(model_fits$spatiotemporal$beta1)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_simulated.RData")
View(sim_data)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_simulated.RData")
unique(sim_data$model)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/2022-11-03_response_error.RData")
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
# Load simulated datasets
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_simulated.RData")
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
head(sim_data)
head(data)
head(sim_data)
model <- sim_data
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
geom_density(data = models, aes(x = simulated_error, color = model), adjust = 1) +
facet_wrap(~condition)
library(ggplot2)
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
geom_density(data = models, aes(x = simulated_error, color = model), adjust = 1) +
facet_wrap(~condition)
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
geom_density(data = sim)data, aes(x = simulated_error, color = model), adjust = 1) +
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
geom_density(data = sim_data, aes(x = simulated_error, color = model), adjust = 1) +
facet_wrap(~condition)
View(model)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_fits.RData")
View(model_fits)
model_fits[[1]]
model_fits[[1]]$kappa1
model_fits[[2]]$kappa1
model_fits[[3]]$kappa1
model_fits[[4]]$kappa1
model_fits[[6]]$kappa1
model_fits[[20]]$kappa1
model_fits[[14]]$kappa1
model_fits[[13]]$kappa1
model_fits[[12]]$kappa1
model_fits[[12]]$kappa2
model_fits[[5]]$kappa2
model_fits[[5]]$kappa1
model_fits[[5]]$kappa2
model_fits[[5]]$beta1
model_fits[[5]]$beta2
model_fits[[5]]$gamma1
model_fits[[6]]$kappa1
model_fits[[6]]$kappa2
model_fits[[6]]$kappa1
model_fits[[6]]$gamma1
model_fits[[6]]$gamma2
model_fits[[7]]$lambda_b1
model_fits[[7]]$lambda_b2
model_fits[[7]]$lambda_f1
model_fits[[7]]$zeta1
model_fits[[7]]$zeta2
model_fits[[7]]$iota1
model_fits[[7]]$iota2
model_fits[[7]]$upsilon1
library(circular)
source("~/git/sourcemem/EXPINT/analysis/rayleigh_tests.R")
rayleigh.test(data$source_error)
x <- runif(40, min = -1, max = 1)
rayleigh.test(x)
hist(x)
hist(x, breaks = 10)
hist(x, breaks = 50)
x <- runif(10000, min = -1, max = 1)
rayleigh.test(x)
hist(x, breaks = 50)
hist(data$source_error)
rayleigh.test(data$source_error)
x <- rvonmises(n=25, mu=circular(pi), kappa=2)
rayleigh.test(x)
hist(x)
x
x <- rvonmises(n=25, mu=circular(pi), kappa=0)
rayleigh.test(x)
class(x)
unlist(x)
as.numeric(x)
hist(as.numeric(x))
x <- rvonmises(n=25, mu=circular(pi), kappa=0)
hist(as.numeric(x))
this.data <- data[data$participant == 1,]
hist(this.data$source_error)
hist(this.data$response_angle)
rayleigh.test(this.data$source_error)
rayleigh.test(this.data$response_angle)
y <- rayleigh.test(this.data$response_angle)
View(y)
as.circular(this.data$source_error)
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
this.data <- data[data$participant == 1,]
as.circular(this.data$source_error)
y <- rayleigh.test(this.data$response_angle)
rayleigh.test(this.data$response_angle)
rayleigh.test(this.data$source_error)
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
this.data <- data[data$participant == 1,]
View(this.data)
rayleigh.test(this.data$source_error, mu = 0)
rayleigh.test(this.data$response_angle, mu = 0)
x <- rvonmises(n=25, mu=circular(pi), kappa=5)
rayleigh.test(x, mu = 0)
rayleigh.test(x, mu = pi)
x <- rvonmises(n=25, mu=circular(pi), kappa=5)
y <- rvonmises(n=25, mu=circular(pi), kappa=0)
# General alternative
rayleigh.test(x)
rayleigh.test(y)
hist(as.numeric(x))
hist(as.numeric(y))
hist(this.data$source_error
)
rayleigh.test(this.data$source_error)
rayleigh.test(this.data$response_angle)
rayleigh.test(this.data$target_angle)
hist(this.data$response_angle, breaks = 100)
hist(data$response_angle, breaks = 100)
hist(data$source_error, breaks = 100)
stat <- rayleigh.test(this.data$source_error)
View(stat)
stat$res<-data.frame(participant=character(0),
statistic=numeric(0),
p.value=numeric(0))
for(i in 1:10){
this.data <- data[data$participant == i,]
this.rayleigh <- rayleigh.test(this.data$source_error, mu = 0)
res <- rbind(res,
data.frame(participant = i,
statistic = this.rayleigh$statistic,
p.value = this.rayleigh$p.value))
}
res<-data.frame(participant=character(0),
statistic=numeric(0),
p.value=numeric(0))
for(i in 1:10){
this.data <- data[data$participant == i,]
this.rayleigh <- rayleigh.test(this.data$source_error, mu = 0)
res <- rbind(res,
data.frame(participant = i,
statistic = this.rayleigh$statistic,
p.value = this.rayleigh$p.value))
}
View(res)
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/plot_resp_error.R")
plot.response.error <- function(data, model, model_list, participant){
#model <- model[model$model %in% model_names[model_list],]
if(missing(participant)){
participant <- 'Group'
} else{
data = data[data$participant == participant,]
#model = model[model$participant == participant,]
}
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
#geom_density(data = model, aes(x = simulated_error, color = model_name), adjust = 1) +
facet_wrap(~condition)
filename <- sprintf('response_error_%s.png', participant)
ggsave(filename, plot = last_plot(), width = 80, height = 60, units = "cm")
}
plot.error.all <- function(data, sim_data, model_list){
setwd("~/git/sourcemem/EXPINT/analysis/plotting/output/resp_error")
for(i in participants){
plot.response.error(data, sim_data, model_list, i)
}
plot.response.error(data, sim_data, model_list)
}
data <- data[data$recog_rating > 3,]
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
View(data)
# Exclude foils
data <- data[data$is_stimulus, ]
nrow(data[data$valid_RT,])/nrow(data)
1- nrow(data[data$valid_RT,])/nrow(data)
data2 <- data[data$recog_rating %in% c(0,8,9),]
nrow(data2)/data
nrow(data2)/nrow(data)
data <- data[data$participant != 8,]
data2 <- data[data$recog_rating %in% c(0,8,9),]
nrow(data)/nrow(data2)
nrow(data2)/nrow(data)
## Handle data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
1- nrow(data[data$valid_RT,])/nrow(data)
x <- data[!(data$valid_RT), ]
View(x)
View(res)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/fitted_models/2023-02-17_fits.RData")
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/plot_resp_error.R")
plot.error.all(data, sim_data, c(1,4,7,9))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/plot_resp_error.R")
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/plot_resp_error.R")
plot.error.all(data, sim_data, c(1,4,7,9))
plot.recentered.all(recentered_data, recentered_sim_data, c(1,4,10,12, 13))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/plot_resp_error.R")
plot.recentered.all(recentered_data, recentered_sim_data, c(1,4,10,12, 13))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/plot_resp_error.R")
plot.recentered.all(recentered_data, recentered_sim_data, c(1,4,10,12, 13))
plot.orthographic.recenter <- function(data, model, participant){
data <- data[data$orthographic < 5,]
model <- model[model$orthographic < 5,]
#If participant is not supplied, plot all the data at a group level
if (missing(participant)){
participant <- 'Group'
} else {
data = data[data$participant == participant,]
model = model[model$participant == participant,]
}
p1 <- ggplot() +
geom_histogram(data = data[data$cond == 'orthographic', ], aes(x = offset, y = ..density..), colour = 1, fill = 'white', bins = 20) +
geom_density(data = model[model$cond == 'orthographic', ], aes(x = offset,  color = model), adjust = 1.2) +
ylim(0, 0.4) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', 'orth'))
p2 <- ggplot() +
geom_histogram(data = data[data$cond == 'unrelated', ], aes(x = offset, y = ..density..), colour = 1, fill = 'white', bins = 20) +
geom_density(data = model[model$cond == 'unrelated', ], aes(x = offset,  color = model), adjust = 1.2) +
ylim(0, 0.4) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', 'unrelated'))
p3 <- ggplot() +
geom_histogram(data = data, aes(x = offset, y = ..density..), colour = 1, fill = 'white', bins = 20) +
geom_density(data = model, aes(x = offset,  color = model), adjust = 1.2) +
ylim(0, 0.4) +
facet_grid(~orthographic)  +
ggtitle(sprintf('%s Condition, Recentered on orthographic', 'overall'))
plot <- ggarrange(p1, p2, p3, ncol = 1, nrow = 3, heights = c(1, 1, 1))
filename <- sprintf('recenter_orthographic_%s.png', participant)
ggsave(filename, plot = last_plot(), width = 40, height = 45, units = "cm")
}
plot.recentered.all(recentered_data, recentered_sim_data, c(1,4,10,12, 13))
source("~/git/sourcemem/EXPSIM_online/analysis/plots/response_error/plot_experiment_1.R")
plot_response_error(c(11,14), data, "")
source("~/git/sourcemem/EXPSIM_online/analysis/plots/response_error/plot_experiment_1.R")
plot_response_error(c(11,14), data, "")
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
participants <- unique(data$participant)
PARTICIPANTS <- unique(data$participant)
NUM.PARTICIPANTS <- length(PARTICIPANTS)
PARTICIPANTS.PER.ROW <- 1
## Compute variables required for chart layout.
NUM.ROWS <- ceiling(NUM.PARTICIPANTS / PARTICIPANTS.PER.ROW)
NUM.COLS <- PARTICIPANTS.PER.ROW * 3
## Get the summary variables from the data.
PARTICIPANTS <- unique(data$participant)
NUM.PARTICIPANTS <- length(PARTICIPANTS)
PARTICIPANTS.PER.ROW <- 1
## Compute variables required for chart layout.
NUM.ROWS <- ceiling(NUM.PARTICIPANTS / PARTICIPANTS.PER.ROW)
NUM.COLS <- PARTICIPANTS.PER.ROW * 3
X.RESP.LOW <- -pi - 0.01
X.RESP.HI <- pi + 0.01
Y.RESP.LOW <- 0.0
Y.RESP.HI <- 1.25
p <- PARTICIPANTS[1]
o
p
p.data <- data[data$participant==p, ]
sprintf('Participant %s', p)
unique(data$condition)
CONDITIONS <- unique(data$condition)
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
response.error.figure(data, "")
CONDITIONS[1]
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
response.error.figure(data, "")
individual.figure <- function(data,filename="") {
## Opens a drawing device (either X11 for testing or a
## PDF for saving).
if(filename == "") {
X11() # Write to the screen
} else {
png(file=filename, width=8.3, height=10.7, units = "in", pointsize = 12, res = 300)
#pdf(file=filename, width=8.3, height=10.7)
}
## Use only the model predictions from the density data frame.
data <- data[data$is_model, ]
## Overall charting parameters.
NUM.BINS <- 50
X.AXIS.CEX <- 1.5
Y.AXIS.CEX <- 1.5
## Get the summary variables from the data.
PARTICIPANTS <- unique(data$participant)
NUM.PARTICIPANTS <- length(PARTICIPANTS)
PARTICIPANTS.PER.ROW <- 2
MODEL.TYPES <- unique(as.character(data$model_name))
## Compute variables required for chart layout.
NUM.ROWS <- ceiling(NUM.PARTICIPANTS / PARTICIPANTS.PER.ROW)
NUM.COLS <- PARTICIPANTS.PER.ROW * 2
X.RESP.LOW <- -pi - 0.01
X.RESP.HI <- pi + 0.01
Y.RESP.LOW <- 0.0
Y.RESP.HI <- 1.5
X.RT.LOW <- 0.0
X.RT.HI <- 4
Y.RT.LOW <- 0.0
Y.RT.HI <- 1
## Set up the global presentation parameters for the plot.
par(mfrow=c(NUM.ROWS, NUM.COLS))
par(mar=c(0.1, 0.1, 0.1, 0.1),
oma=c(4, 4, 3, 4),
xaxs="i")
## Iterate through each participant...
for(p.idx in 1:NUM.PARTICIPANTS) {
p <- PARTICIPANTS[p.idx]
## Get the participant's data.
p.data <- data[data$participant==p, ]
## Plot marginal response proportion for participant.
par(mar=c(0.1, 0.1, 0.1, 0.5))
plot.new()
plot.window(xlim=c(X.RESP.LOW, X.RESP.HI),
ylim=c(Y.RESP.LOW, Y.RESP.HI))
## If this is the first row, indicate the column plot type.
if(p %in% 1:PARTICIPANTS.PER.ROW) {
mtext("Response outcome", side=3, line=1)
}
## Compute and plot the empirical histograms for response error.
resp.hist <- hist(p.data$source_error,
breaks=NUM.BINS,
plot=FALSE)
for(b in 2:length(resp.hist$breaks)) {
lo.break <- resp.hist$breaks[b-1]
hi.break <- resp.hist$breaks[b]
bar.height <- resp.hist$density[b-1]
rect(lo.break, 0.0, hi.break, bar.height, border=NA, col="grey80")
}
## Plot the participant number and data type
mtext(paste0("P", p), side=3, cex=0.85, line=-2, adj=0.1)
## Plot the x axes (for the last two participants only)
if(p %in% tail(PARTICIPANTS, n=PARTICIPANTS.PER.ROW)) {
axis(side=1, at=c(-pi, 0, pi), labels=c(expression(-pi), "0", expression(pi)),
cex.axis=X.AXIS.CEX)
mtext(paste("Response outcome (rads)"), side=1, cex=0.75, line=2.5)
} else {
axis(side=1, at=c(-pi, pi), lwd.ticks=0, labels=FALSE, cex.axis=0.75)
}
## Plot the y axes (for the participants in the first col)
if((p.idx %% PARTICIPANTS.PER.ROW) == 1) {
axis(side=2, at=c(0, 1), cex.axis=Y.AXIS.CEX)
}
## Plot marginal response time for participant.
par(mar=c(0.1, 0.7, 0.1, 1.5))
plot.new()
plot.window(xlim=c(X.RT.LOW, X.RT.HI),
ylim=c(Y.RT.LOW, Y.RT.HI))
## If this is the first row, indicate the column plot type.
if(p %in% 1:PARTICIPANTS.PER.ROW) {
mtext("Response time", side=3, line=1)
}
## Compute and plot the empirical histograms for response time.
rt.hist <- hist(p.data$source_RT,
breaks=NUM.BINS,
plot=FALSE)
for(b in 2:length(rt.hist$breaks)) {
lo.break <- rt.hist$breaks[b-1]
hi.break <- rt.hist$breaks[b]
bar.height <- rt.hist$density[b-1]
rect(lo.break, 0.0, hi.break, bar.height, border=NA, col="grey80")
}
## Plot the participant number
## mtext(paste0("P", p), side=3, cex=0.5, line=-2, adj=0.8)
if(p %in% tail(PARTICIPANTS, n=PARTICIPANTS.PER.ROW)) {
axis(side=1, cex.axis=X.AXIS.CEX)
mtext(paste("Response time (s)"), side=1, cex=0.75, line=2.5)
} else {
axis(side=1, at=c(0, 2), lwd.ticks=0, labels=FALSE, cex.axis=0.75)
}
if((p.idx %% PARTICIPANTS.PER.ROW) == 0) {
axis(side=4, at=c(0, 2), cex.axis=X.AXIS.CEX)
}
}
## Put the outer margin axis labels.
mtext("Error density", side=2, line=2,outer=TRUE, padj = -0.5)
mtext("RT density", side=4, line=2, outer=TRUE)
##mtext("Response time/response error", side=1, line=2, outer=TRUE)
if(filename != "") {
dev.off()
}
}
individual.figure(data, "")
## Use only the model predictions from the density data frame.
data <- data[data$is_model, ]
## Overall charting parameters.
NUM.BINS <- 50
X.AXIS.CEX <- 1.5
Y.AXIS.CEX <- 1.5
## Get the summary variables from the data.
PARTICIPANTS <- unique(data$participant)
NUM.PARTICIPANTS <- length(PARTICIPANTS)
PARTICIPANTS.PER.ROW <- 2
MODEL.TYPES <- unique(as.character(data$model_name))
## Compute variables required for chart layout.
NUM.ROWS <- ceiling(NUM.PARTICIPANTS / PARTICIPANTS.PER.ROW)
NUM.COLS <- PARTICIPANTS.PER.ROW * 2
NUM.PARTICIPANTS
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
participants <- unique(data$participant)
## Overall charting parameters.
NUM.BINS <- 50
X.AXIS.CEX <- 1.5
Y.AXIS.CEX <- 1.5
## Get the summary variables from the data.
PARTICIPANTS <- unique(data$participant)
NUM.PARTICIPANTS <- length(PARTICIPANTS)
PARTICIPANTS.PER.ROW <- 2
MODEL.TYPES <- unique(as.character(data$model_name))
## Compute variables required for chart layout.
NUM.ROWS <- ceiling(NUM.PARTICIPANTS / PARTICIPANTS.PER.ROW)
NUM.COLS <- PARTICIPANTS.PER.ROW * 2
X.RESP.LOW <- -pi - 0.01
X.RESP.HI <- pi + 0.01
Y.RESP.LOW <- 0.0
Y.RESP.HI <- 1.5
X.RT.LOW <- 0.0
X.RT.HI <- 4
Y.RT.LOW <- 0.0
Y.RT.HI <- 1
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.figure(data, "")
p.data$source_RT
p.data$source_RT/1000
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.figure(data, "")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.figure(data, "")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.figure(data, "")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.figure(data, "")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"individual_error.png")
setwd("~/git/sourcemem/EXPINT/analysis/plotting/output/publication")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
setwd("~/git/sourcemem/EXPINT/analysis/plotting/output/publication")
individual.error.figure(data,"individual_error.png")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"individual_error.png")
source("~/git/sourcemem/EXPINT/analysis/plotting/individual_error.R")
individual.error.figure(data,"individual_error.png")
gc()
