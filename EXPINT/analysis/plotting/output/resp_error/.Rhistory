colours
ggplot(data = recentered_data) +
geom_bar(aes(x = orthographic, y = ..prop.., fill = cond),
color = "black", position="dodge") +
ylab("Proportion") +
xlab("Orthographic (Damerau-Levenshtein) Distance") +
scale_x_continuous(breaks = c(1:6)) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = recentered_data) +
geom_bar(aes(x = orthographic, y = ..prop.., fill = cond),
color = "black", position="dodge") +
ylab("Proportion") +
xlab("Orthographic (Damerau-Levenshtein) Distance") +
scale_x_continuous(breaks = c(1:6)) +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
head(recentered_data)
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..density.., fill = cond),
color = "black")
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..density.., fill = cond),
color = "black", alpha = 0.7)
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..density.., fill = cond),
color = "black", alpha = 0.7, position = "dodge")
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..density.., fill = cond),
color = "black", alpha = 0.7, position = "identity")
ggplot(data = recentered_data) +
geom_bar(aes(x = orthographic, y = ..prop.., fill = cond),
color = "black", position="identity") +
ylab("Proportion") +
xlab("Orthographic (Damerau-Levenshtein) Distance") +
scale_x_continuous(breaks = c(1:6)) +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = recentered_data) +
geom_bar(aes(x = orthographic, y = ..prop.., group = cond, fill = cond),
color = "black", position="identity") +
ylab("Proportion") +
xlab("Orthographic (Damerau-Levenshtein) Distance") +
scale_x_continuous(breaks = c(1:6)) +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = recentered_data) +
geom_bar(aes(x = orthographic, y = ..prop.., group = cond, fill = cond),
color = "black", position="dodge") +
ylab("Proportion") +
xlab("Orthographic (Damerau-Levenshtein) Distance") +
scale_x_continuous(breaks = c(1:6)) +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..density.., fill = cond),
color = "black", alpha = 0.7, position = "identity") +
ylab("Proportion") +
xlab("Semantic Cosine Dissimilarity")
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.7, position = "identity") +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity")
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.7, position = "dodge") +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity")
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.7, position = "dodge", bins = 15) +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity")
ggplot(data = recentered_data) +
geom_bar(aes(x = orthographic, y = ..prop.., group = cond, fill = cond),
color = "black", position="fill") +
ylab("Proportion") +
xlab("Orthographic Distance") +
scale_x_continuous(breaks = c(1:6)) +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.3, position = "identity", bins = 15) +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity")
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.3, position = "identity", bins = 50) +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity")
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.4, position = "identity", bins = 50) +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.7, position = "identity", bins = 50) +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.7, position = "identity", bins = 50) +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
#legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.6, position = "identity", bins = 50) +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
orth <- ggplot(data = recentered_data) +
geom_bar(aes(x = orthographic, y = ..prop.., group = cond, fill = cond),
color = "black", position="fill") +
ylab("Proportion") +
xlab("Orthographic Distance") +
scale_x_continuous(breaks = c(1:6)) +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
semantic <- ggplot(data = recentered_data) +
geom_histogram(aes(x = semantic, y = ..ncount.., fill = cond),
color = "black", alpha = 0.6, position = "identity", bins = 50) +
ylab("Density") +
xlab("Semantic Cosine Dissimilarity") +
scale_fill_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +
theme(text = element_text(size=14),
strip.background = element_blank(),
plot.title = element_text(face = "bold", size = 11),
legend.position = "none",
legend.title = element_blank(),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"))
plot <- ggarrange(orth, semantic, ncol = 1)
plot
source("~/git/sourcemem/EXPINT/analysis/plotting/pairwise_similarities.R")
plot
source("~/git/sourcemem/EXPINT/analysis/plotting/pairwise_similarities.R")
plot
source("~/git/sourcemem/EXPINT/analysis/plotting/pairwise_similarities.R")
plot
source("~/git/sourcemem/EXPINT/analysis/plotting/pairwise_similarities.R")
source("~/git/sourcemem/EXPINT/analysis/plotting/pairwise_similarities.R")
source("~/git/sourcemem/EXPINT/analysis/plotting/pairwise_similarities.R")
source("~/git/sourcemem/EXPINT/analysis/plotting/pairwise_similarities.R")
recentered_data$cond[recentered_data$cond == 'orthographic', 'cond'] <- 'Orthographic'
recentered_data$cond[recentered_data$cond == 'orthographic'] <- 'Orthographic'
unique(recentered_data$cond)
source("~/git/sourcemem/EXPINT/analysis/plotting/pairwise_similarities.R")
source("~/git/sourcemem/EXPINT/analysis/recognition_analyses.R")
lme.fa <- lme(fa ~ condition, data = recog, random = ~1|participant)
anova(lme.fa)
lme.hits <- lme(hits ~ condition, data = recog, random = ~1|participant)
anova(lme.hits)
summary(glht(lme.fa, linfct=mcp(condition = "Tukey")), test = adjusted(type = "bonferroni"))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/publication_v2.R")
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.participant(1, c(1,3))
model_list <- c(1,3)
p1 <- plot.participant(1, model_list)
p1
p3 <- plot.participant(3, model_list)
p3
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot.all.participant.cond(c(1,3))
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
ggsave('supp_fig1.png', plot = plot, width = 8, height = 10, units = "in")
ggsave('supp_fig1.png', plot = plot, width = 7.5, height = 10, units = "in")
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
model_list
model_names
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/adam_comment.R")
plot
ggsave('supp_fig1a.png', plot = plot, width = 7.5, height = 8, units = "in")
source("~/git/sourcemem/EXPINT/experiment_stimuli/word_frequency_check.R")
View(words)
mean(words$frequency)
sd(words$frequency)
mean(words[words$list_type=='semantic','frequency'])
mean(words[words$list_type=='orthographic','frequency'])
mean(words[words$list_type=='unrelated','frequency'])
t.test(words[words$list_type=='unrelated','frequency'])
t.test(words[words$list_type=='semantic','frequency'])
t.test(words[words$list_type=='semantic','frequency'], words[words$list_type=='orthographic','frequency'])
t.test(words[words$list_type=='semantic','frequency'], words[words$list_type=='orthographic','frequency'])
hist(words[words$list_type=='semantic','frequency'])
ggplot(data = words) + geom_histogram(aes(x = frequency, y = ..density..))
ggplot(data = words) + geom_histogram(aes(x = frequency, y = ..density.., color = list_type))
ggplot(data = words) + geom_histogram(aes(x = frequency, y = ..ncount.., color = list_type))
ggplot(data = words) + geom_histogram(aes(x = frequency, color = list_type))
ggplot(data = words) + geom_histogram(aes(x = frequency, color = list_type), position = 'dodge')
ggplot(data = words) + geom_histogram(aes(x = frequency, fill = list_type), alpha = 0.3, position = 'identity')
mean(words[words$list_type=='semantic','frequency'])
SD(words[words$list_type=='semantic','frequency'])
sd(words[words$list_type=='semantic','frequency'])
sd(words[words$list_type=='orthographic','frequency'])
mean(words[words$list_type=='orthographic','frequency'])
ggplot(data = words) + geom_density(aes(x = frequency, color = list_type))
ggplot(data = words) + geom_density(aes(x = frequency, color = list_type), adjust = 1.5)
ggplot(data = words) + geom_histogram(aes(x = frequency, y = ..ncount.., fill = list_type))
ggplot(data = words) + geom_density(aes(x = frequency, color = list_type), adjust = 1, lwd = 2)
ggplot(data = words) + geom_density(aes(x = frequency, color = list_type), adjust = 1, lwd = 1.5)
ggplot(data = words) + geom_density(aes(x = frequency, color = list_type), adjust = 1, lwd = 1.2)
median.default(words[words$list_type=='semantic','frequency'])
median.default(words[words$list_type=='orthographic','frequency'])
median.default(words[,'frequency'])
IQR(words[words$list_type=='semantic','frequency'])
IQR(words[words$list_type=='orthographic','frequency'])
ggplot(data = words) + geom_boxplot(aes(x = frequency, color = list_type), adjust = 1, lwd = 1.2)
ggplot(data = words) + geom_density(aes(x = frequency, color = list_type), adjust = 1, lwd = 1.2)
median.default(words[,'frequency'])
IQR(words[,'frequency'])
summary(words[,'frequency'])
summary(words[words$list_type == 'orthographic','frequency'])
summary(words[words$list_type == 'semantic','frequency'])
ggplot(data = words) + geom_density(aes(x = frequency, color = list_type), adjust = 1, lwd = 2)
ggplot(data = words) + geom_density(aes(x = frequency, color = list_type), adjust = 1, lwd = 1)
# Trimmed down script to generate the model fitting plots for manuscript
library(ggplot2)
library(ggpubr)
library(stringr)
library(paletteer)
library(dplyr)
# Load data
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Get rid of foil data, and data with invalid RT
data <- data[(data$valid_RT) & (data$is_stimulus),]
data <- data[data$recog_rating %in% c(0,8,9),]
# recentered_data <- recenter.data(data)
# save(recentered_data, file = "~/git/sourcemem/EXPINT/data/recentered_data.RData")
load("~/git/sourcemem/EXPINT/data/recentered_data.RData")
# Load Model Predictions
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/fitted_models/2023-03-16_fits.RData")
# Load simulated datasets
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/fitted_models/2023-03-16_sim_data.RData")
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/fitted_models/2023-03-16_simulated_recenter.RData")
sim_data <- sim_data[!(sim_data$model_name %in% c('fourfactor_gamma', 'spatiotemporal_ortho_weight')),]
recentered_sim_data <- recentered_sim_data[!(recentered_sim_data$model %in% c('fourfactor_gamma', 'spatiotemporal_ortho_weight')),]
participants <- unique(data$participant)
conds <- unique(data$condition)
# Some data massaging to make the plots look the way I want (in terms of ordering of panels etc.)
sim_data$model_name <- recode(sim_data$model_name, spatiotemporal = 'Spatiotemporal', four_factor = 'Four Factor',
three_factor = 'Spatiotemporal-Orthographic', fourfactor_gamma = 'Four Factor Gamma',
spatiotemporal_ortho_gamma = 'Spatiotemporal-Orthographic Gamma', semantic_beta = 'Semantic Beta')
recentered_sim_data$model <- recode(recentered_sim_data$model, spatiotemporal = 'Spatiotemporal', four_factor = 'Four Factor',
three_factor = 'Spatiotemporal-Orthographic', fourfactor_gamma = 'Four Factor Gamma',
spatiotemporal_ortho_gamma = 'Spatiotemporal-Orthographic Gamma', semantic_beta = 'Semantic Beta')
# model_names <- factor(unique(sim_data$model_name), levels = c('spatiotemporal', 'four_factor', 'three_factor', 'fourfactor_gamma', 'spatiotemporal_ortho_gamma', 'spatiotemporal_ortho_weight', 'semantic_beta'))
model_names <- factor(unique(sim_data$model_name), levels = c('Spatiotemporal', 'Four Factor','Spatiotemporal-Orthographic',
'Four Factor Gamma', 'Spatiotemporal-Orthographic Gamma', 'Semantic Beta'))
data$condition <- factor(str_to_title(data$condition), levels = c('Unrelated', 'Semantic', 'Orthographic'))
sim_data$condition <- factor(str_to_title(sim_data$condition), levels = c('Unrelated', 'Semantic', 'Orthographic'))
recentered_data$cond <- factor(str_to_title(recentered_data$cond), levels = c('Unrelated', 'Semantic', 'Orthographic'))
recentered_sim_data$cond <- factor(str_to_title(recentered_sim_data$cond), levels = c('Unrelated', 'Semantic', 'Orthographic'))
# Manually specify a colour palette (useful for picking the 2nd, and 4th, say, if i dont want to plot the 1st and 3rd model)
#           spatiotemp   4f,        STO,       STOG,       SEMB
colours <- c('#e6194B', '#f032e6', '#4363d8', '#f58231', '#42d4f4')
line.types <- c('solid', 'dotted', 'longdash', 'twodash', 'dotted')
# Set output folder
setwd("~/git/sourcemem/EXPINT/analysis/plotting/output/resp_error")
recentered_data[recentered_data$participant %in% c(1,2),]
x <0 recentered_data[recentered_data$participant %in% c(1,2),]
x <- recentered_data[recentered_data$participant %in% c(1,2),]
View(x)
source("~/git/sourcemem/EXPINT/analysis/plotting/response_error/publication_v2.R")
super_plot
plot.recenter
plot.super.recenter <- function(participants, recentered_data, recentered_sim_data, model_list){
recentered_data <- recentered_data[recentered_data$participant %in% participants,]
recentered_sim_data <- recentered_sim_data[recentered_sim_data$participant %in% participants,]
plot <- plot.recenter(recentered_data, recentered_sim_data, model_list)
return(plot)
}
sp1
sp1 <- c(1, 2, 5, 6, 8, 9)
plot.super.error(sp1, recentered_data, recentered_sim_data, c(1,2))
plot.super.recenter <- function(sp, recentered_data, recentered_sim_data, model_list){
this_recentered_data <- recentered_data[recentered_data$participant %in% sp,]
this_recentered_sim_data <- recentered_sim_data[recentered_sim_data$participant %in% participants,]
plot <- plot.recenter(this_recentered_data, this_recentered_sim_data, model_list)
return(plot)
}
sp <- sp1
sp1
this_recentered_data <- recentered_data[recentered_data$participant %in% sp,]
this_recentered_sim_data <- recentered_sim_data[recentered_sim_data$participant %in% sp,]
plot.recenter(this_recentered_data, this_recentered_sim_data, c(1))
plot.recenter(this_recentered_data, this_recentered_sim_data, c(1))
plot.participant(1, c(1))
plot.recenter <- function(recentered_data, recentered_sim_data, model_list){
plot <- ggplot() +
geom_histogram(data = recentered_data, aes(x = offset, y = ..density..), colour = 'grey80', fill = 'grey80', boundary = 0, binwidth = 1/5) +
# geom_histogram(data = model, aes(x = simulated_error, y = ..density.., fill = model_name), bins = 50, alpha = 0.2) +
stat_density(data = recentered_sim_data, aes(x = offset,
color = factor(model, levels = c('Spatiotemporal', 'Four Factor','Spatiotemporal-Orthographic',
'Four Factor Gamma', 'Spatiotemporal-Orthographic Gamma',
'Semantic Beta')),
lty = factor(model, levels = c('Spatiotemporal', 'Four Factor','Spatiotemporal-Orthographic',
'Four Factor Gamma', 'Spatiotemporal-Orthographic Gamma',
'Semantic Beta'))),
kernel = 'epanechnikov', adjust = 1,
position="identity",geom="line", linewidth = 1, bounds = c(-3.14, 3.14)) +
facet_grid(~cond) +
scale_x_continuous(name = 'Source Error', breaks = c(-3.14, 0, 3.14), labels = c(expression(-pi), "0", expression(pi))) +
scale_y_continuous(name = 'Density', breaks = c(0, 0.2), labels = (c('0', '0.20'))) +
scale_color_manual(values = colours[c(model_list)]) +
scale_linetype_manual(values = line.types[c(model_list)]) +
ylab("Density") +
theme(text = element_text(size=14),
strip.background = element_blank(),
strip.text = element_blank(),
plot.title = element_text(face = "bold", size = 11),
axis.ticks = element_line(colour = "grey70", size = 0.2),
axis.line.x = element_line(color="black", size = 0.2),
axis.line.y = element_line(color="black", size = 0.2),
axis.text.x = element_text(size = 14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white"),
legend.title = element_blank(),
legend.key = element_rect(colour = "transparent", fill = "white"),
legend.position = 'bottom',
legend.box="vertical",
legend.justification = "left",
legend.margin=margin(),)
return(plot)
}
plot.participant(1, c(1))
plot.recenter(this_recentered_data, this_recentered_sim_data, c(1))
plot.recenter(recentered_data, recentered_sim_data, c(1))
plot.participant(1, c(1))
plot.participant(1, c(1))
model_list
plot.recenter(recentered_data, recentered_sim_data, 1
)
warnings()
plot.recenter(recentered_data, recentered_sim_data, 1
)
