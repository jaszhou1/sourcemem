library(CircStats)
library(circular)
library(DEoptim)
library(ggplot2)
library(extraDistr)
library(foreach)
library(doParallel)
library(plyr)
library(R.utils)
library(statip)
## Handle data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
View(data)
View(data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/1_saturated.R")
saturated(data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2_fixed_guess.R")
fixed_guess(data)
Sel = c(1, 1,  1, 0, 0,   1, 1, 1,    1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,    1, 1, 1, 1, 1, 1,   1, 1, 1,  1, 1, 1,  1, 1, 1)
beta2 <- NA
beta3 <- NA
Pfix = c(beta2, beta3)
# Boundaries for estimated parameters. DEoptim will sample uniformly between these bounds
Pbounds <- matrix(data = NA, nrow = 2, ncol = 35)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'gamma1', 'gamma2', 'gamma3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
length(c('kappa1', 'kappa2', 'beta1', 'gamma1', 'gamma2', 'gamma3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3'))
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2_fixed_guess.R")
fixed_guess(data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/3_two_condition.R")
two_cond(data)
rho1 = 0.6
chi1 = 0.7
psi = 0.4
Sel = c(1, 1,  1, 1, 1,   1, 1, 1,    1, 1, 1, 1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,    1, 1, 1, 1, 1, 1,   1, 1, 1,  1, 1, 1,  1, 1, 1)
Pfix = NULL
# Boundaries for estimated parameters. DEoptim will sample uniformly between these bounds
Pbounds <- matrix(data = NA, nrow = 2, ncol = 38)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'beta2', 'beta3', 'gamma1', 'gamma2', 'gamma3', 'psi1', 'psi2', 'psi3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
Pbounds[1,] <- c(1, 1, 0.2, 0.2, 0.2, 0.01, 0.03, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Pbounds[2,] <- c(20, 15, 0.6, 0.6, 0.6, 0.4, 0.4, 0.4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  0.7,   0.7,   0.7,   2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6)
View(Pbounds)
Sel = c(1, 1,  1, 0, 0,   1, 1, 1,    1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1,    1, 1, 1, 1, 1, 1,   1, 1, 1,  1, 1, 1,  1, 1, 1)
beta2 <- NA
beta3 <- NA
Pfix = c(beta2, beta3)
# Boundaries for estimated parameters. DEoptim will sample uniformly between these bounds
Pbounds <- matrix(data = NA, nrow = 2, ncol = 36)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'gamma1', 'gamma2', 'gamma3', 'phi1', 'phi2', 'phi3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
Pbounds[1,] <- c(1, 1, 0.2, 0.01, 0.03, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Pbounds <- matrix(data = NA, nrow = 2, ncol = 36)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'gamma1', 'gamma2', 'gamma3', 'phi1', 'phi2', 'phi3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
Pbounds[1,] <- c(1, 1, 0.2, 0.01, 0.03, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Pbounds[2,] <- c(20, 15, 0.6, 0.4, 0.4, 0.4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   0.7,   0.7,   2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6)
View(Pbounds)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/1_saturated.R")
saturated(data)
View(saturated)
View(intrusion_cond_model)
saturated(data)
phi1
phi2
phi3
phi1
sum1
psi1
ph1
phi1
phi2
phi3
View(intrusion_weights)
gamma
gamm1
gamma1
View(trial_weights)
View(trial_weights)
View(trial_weights)
trial_weights < 0
any(trial_weights < 0)
trial_weights[trial_weights < 0]
saturated(data)
sum(trial_weights[2360])
saturated(data)
any(trial_weights < 0)
gamma
gamma1
gamma2
gamma3
bounds
Pbounds <- matrix(data = NA, nrow = 2, ncol = 38)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'beta2', 'beta3', 'gamma1', 'gamma2', 'gamma3', 'phi1', 'phi2', 'phi3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
Pbounds[1,] <- c(1, 1, 0.2, 0.2, 0.2, 0.01, 0.03, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Pbounds[2,] <- c(20, 15, 0.6, 0.6, 0.6, 0.4, 0.4, 0.4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  0.7,   0.7,   0.7,   2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6)
View(Pbounds)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/1_saturated.R")
View(Pbounds)
saturated(data)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/old_models/initial_fits.RData")
View(saturated)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/1_saturated.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
saturated[data[data$participant == 1,]]
saturated(data[data$participant == 1,])
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
library(DEoptim)
library(ggplot2)
saturated(data[data$participant == 1,])
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/1_saturated.R")
this_data <- data[data$participant ==1,]
saturated(this_data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model.R")
saturated(this_data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2_fixed_guess.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2_fixed_guess.R")
fixed_guess(this_data)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/13_flat_intrusion.R")
flat_intrusion(this_data)
hist(this_data$source_error)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/13_flat_intrusion.R")
x <- flat_intrusion(this_data)
x <- flat_intrusion(this_data)
Pest
View(this_fit)
x
View(x)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/1_saturated.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/1_saturated.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2_fixed_guess.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/3_two_condition.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/4_same_decay.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/5_orth_weight.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/6_no_sem.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/7_same_weight.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/8_spatiotemporal.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/9_space_orth.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/10_temp_orth.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/11_12_flat_gamma.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/13_flat_intrusion.R")
models <- c(saturated, fixed_guess, two_cond, same_decay, orth_weight, no_sem, same_weight, spatiotemporal, space_orth, temp_orth, flat_gamma1, flat_gamma2, flat_intrusion)
View(models)
models[1]
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
# Function to calculate aic
get_aic <- function(L, n_params){
aic <- 2*L + 2*n_params
return(aic)
}
cosine_distance <- function(theta, phi){
distance <- 1 - cos(theta - phi)
return(distance)
}
angle_diff <- function(a,b){
diff <- atan2(sin(a-b), cos(a-b))
return(diff)
}
models[1](data[data$participant ==1,])
models[1]
saturated
saturated(data)
x <- models[1]
x(data)
x
View(saturated)
models[1]
models[1] == saturated
models[1]
models[[1]]
models[[1]](data)
models[[13]](data)
x <- models[[1]]
x
x(data)
model_name <- 'saturated'
paste(toString(Sys.Date()), model_name,'.csv', sep ="")
paste(toString(Sys.Date()), '_', model_name,'.csv', sep ="")
model_names <- c('saturated', 'fixed_guess', 'two_cond', 'same_decay', 'orth_weight', 'no_sem', 'same_weight', 'spatiotemporal', 'space_orth', 'temp_orth', 'flat_gamma1', 'flat_gamma2', 'flat_intrusion')
model_names[1]
model_names[[1]]
View(models)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
fitted_saturated <- fit_model(data, models[[1]], model_names[1])
View(space_orth)
length(c('participant','nLL','aic', 'kappa1', 'kappa2', 'beta1', 'beta2', 'beta3', 'gamma1', 'gamma2', 'gamma3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3'))
model_fits <- list()
length(models)
model
x <- models
model_fits
model_fits[1] <- x
model_fits <- append(model_fits, x)
View(model_fits)
model_fits <- append(model_fits, x)
View(model_fits)
model_fits <- list()
model_fits <- append(model_fits, list(this_model_fit))
model_fits <- list()
model_fits <- append(model_fits, list(this_model_fit))
model_fits <- append(model_fits, list(x))
View(model_fits)
paste(toString(Sys.Date()), '_fits.RData', sep ="")
unique(participants)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
model_fits <- list()
for(i in length(models)){
this_model_fit <- fit_model_serial(data, models[[i]], model_names[[i]])
model_fits <- append(model_fits, list(this_model_fit))
}
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
i
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
model
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits.R")
Pbounds <- matrix(data = NA, nrow = 2, ncol = 35)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'beta2', 'beta3', 'gamma1', 'gamma2', 'gamma3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
Pbounds[1,] <- c(1, 1, 0.2, 0.2, 0.2, 0.01, 0.03, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Pbounds[2,] <- c(20, 15, 0.6, 0.6, 0.6, 0.4, 0.4, 0.4, 0.6, 0.6, 0.6, 0.7, 0.7, 0.7, 0.7,  0.7, 0.7,  0.7,   0.7,   0.7,   2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6)
dim(Pbounds)
dim(Pbounds,2)
dim(Pbounds)
size(Pbounds)
length(Pbounds[1,])
Pbounds <- matrix(data = NA, nrow = 2, ncol = 33)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'gamma1', 'gamma2', 'gamma3', 'rho1', 'rho2', 'rho3', 'chi1', 'chi2', 'chi3', 'psi1', 'psi2', 'psi3', 'tau1', 'tau2', 'tau3', 'lambda_b1', 'lambda_f1', 'lambda_b2', 'lambda_f2', 'lambda_b3', 'lambda_f3','zeta1', 'zeta2', 'zeta3', 'iota1', 'iota2', 'iota3', 'upsilon1', 'upsilon2', 'upsilon3')
Pbounds[1,] <- c(1, 1, 0.2, 0.01, 0.03, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
Pbounds[2,] <- c(20, 15, 0.6, 0.4, 0.4, 0.4, 0.6, 0.6, 0.6, 0.7, 0.7, 0.7, 0.7,  0.8, 0.8,  0.8,   0.7,   0.7,   2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6)
length(Pbounds[1,])
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_phi.R")
View(intrusion_cond_model_phi)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-25_fits.RData")
View(model_fits)
model_fits[[1]]$aic
sum(model_fits[[1]]$aic)
sum(model_fits[[2]]$aic)
sum(model_fits[[13]]$aic)
sum(model_fits[[14]]$aic)
sum(model_fits[[12]]$aic)
sum(model_fits[[11]]$aic)
sum(model_fits[[10]]$aic)
sum(model_fits[[9]]$aic)
sum(model_fits[[8]]$aic)
sum(model_fits[[7]]$aic)
sum(model_fits[[6]]$aic)
sum(model_fits[[5]]$aic)
sum(model_fits[[13]]$aic)
sum(model_fits[[12]]$aic)
View(model_fits)
length(model_fits)
AICs <- data.frame(matrix(nrow = 10, ncol = length(model_fits)))
AICs <- data.frame(matrix(nrow = 10, ncol = length(model_fits)))
for(i in 1:length(model_fits)){
AICs[,i] <- model_fits[[i]]$aic
}
View(AICs)
model_names <- c('saturated', 'fixed_guess', 'two_cond', 'same_decay', 'orth_weight', 'no_sem', 'same_weight', 'spatiotemporal', 'space_orth', 'temp_orth', 'flat_gamma1', 'flat_gamma2', 'flat_intrusion')
# Put all the aics together
AICs <- setNames(data.frame(matrix(nrow = 10, ncol = length(model_fits))), model_names)
for(i in 1:length(model_fits)){
AICs[,i] <- model_fits[[i]]$aic
}
View(AICs)
# Put all the aics together
AICs <- setNames(data.frame(matrix(nrow = 10, ncol = length(model_fits))), model_names)
for(i in 1:length(model_fits)){
AICs[,i] <- model_fits[[i]]$aic
AICS[11,i] <- sum(AICs[,i])
}
AICs <- setNames(data.frame(matrix(nrow = 10, ncol = length(model_fits))), model_names)
for(i in 1:length(model_fits)){
AICs[,i] <- model_fits[[i]]$aic
AICs[11,i] <- sum(AICs[,i])
}
AICs[11,] <- colSums(AICs)
View(AICs)
AICs <- setNames(data.frame(matrix(nrow = 10, ncol = length(model_fits))), model_names)
for(i in 1:length(model_fits)){
AICs[,i] <- model_fits[[i]]$aic
}
AICs[11,] <- colSums(AICs)
View(AICs)
View(AICs)
View(model_fits)
View(AICs)
source('~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/14_equal_nosem.R')
source('~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/14_equal_nosem.R')
Sel = c(1, 1,  1, 0, 0,   1, 1, 0,    1, 0, 0,  1, 0, 0,  0, 0, 0,  1, 0, 0,    1, 1, 0, 0, 0, 0,   1, 0, 0,  1, 0, 0,  1, 0, 0)
sum(Sel)
# Sel vector: defines which parameters are freed, and which are fixed, in the optimisation process.
#       prec.  guess      intrus.     w.space   w.orth    w.sem    time asym   d.time              d.space    d.orth    d.sem
Sel = c(1, 1,  1, 0, 0,   1, 1, 0,    1, 0, 0,  1, 0, 0,  0, 0, 0,  1, 0, 0,    1, 1, 0, 0, 0, 0,   1, 0, 0,  1, 0, 0,  1, 0, 0)
# For the fixed parameters (P[Sel == 0], what value should parameter be fixed at? NA will be treated as "same as unrelated condition")
beta2 <- NA
beta3 <- NA
gamma3 <- NA
# intrusion weights
rho2 <- NA
rho3 <- NA # Space, sem condition
chi2 <- NA
chi3 <- NA
psi1 <- 0
psi2 <- NA
psi3 <- NA
tau2 <- NA
tau3 <- NA
lambda_b2 <- NA
lambda_f2 <- NA
lambda_b3 <- NA # Similarity decay of backwards temporal lag
lambda_f3 <- NA # Similarity decay of forwards temporal lag
zeta2 <- NA
zeta3 <- NA
iota2 <- NA
iota3 <- NA
upsilon2 <- NA
upsilon3 <- NA
Pfix = c(beta2, beta3, gamma3, rho2, rho3, chi2, chi3, psi1, psi2, psi3, tau2, tau3, lambda_b2, lambda_f2, lambda_b3, lambda_f3, zeta2, zeta3, iota2, iota3, upsilon2, upsilon3)
# Boundaries for estimated parameters. DEoptim will sample uniformly between these bounds
Pbounds <- matrix(data = NA, nrow = 2, ncol = 14)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'gamma1', 'gamma2', 'rho1', 'chi1', 'psi1', 'tau1', 'lambda_b1', 'lambda_f1', 'zeta1','iota1', 'upsilon1')
Pbounds[1,] <- c(1,  1,  0.2, 0.01,0.03,  0,  0,   0.5, 0, 0, 0, 0, 0)
length(c(1,  1,  0.2, 0.01,0.03,  0,  0,   0.5, 0, 0, 0, 0, 0))
equal_nosem <- function(data){
# Sel vector: defines which parameters are freed, and which are fixed, in the optimisation process.
#       prec.  guess      intrus.     w.space   w.orth    w.sem    time asym   d.time              d.space    d.orth    d.sem
Sel = c(1, 1,  1, 0, 0,   1, 1, 0,    1, 0, 0,  1, 0, 0,  0, 0, 0,  1, 0, 0,    1, 1, 0, 0, 0, 0,   1, 0, 0,  1, 0, 0,  1, 0, 0)
# For the fixed parameters (P[Sel == 0], what value should parameter be fixed at? NA will be treated as "same as unrelated condition")
beta2 <- NA
beta3 <- NA
gamma3 <- NA
# intrusion weights
rho2 <- NA
rho3 <- NA # Space, sem condition
chi2 <- NA
chi3 <- NA
psi1 <- 0
psi2 <- NA
psi3 <- NA
tau2 <- NA
tau3 <- NA
lambda_b2 <- NA
lambda_f2 <- NA
lambda_b3 <- NA # Similarity decay of backwards temporal lag
lambda_f3 <- NA # Similarity decay of forwards temporal lag
zeta2 <- NA
zeta3 <- NA
iota2 <- NA
iota3 <- NA
upsilon2 <- NA
upsilon3 <- NA
Pfix = c(beta2, beta3, gamma3, rho2, rho3, chi2, chi3, psi1, psi2, psi3, tau2, tau3, lambda_b2, lambda_f2, lambda_b3, lambda_f3, zeta2, zeta3, iota2, iota3, upsilon2, upsilon3)
# Boundaries for estimated parameters. DEoptim will sample uniformly between these bounds
Pbounds <- matrix(data = NA, nrow = 2, ncol = 13)
#          prec1, prec2, beta1, beta2, beta3, gamma1, gamma2, gamma3, rho1, rho2, rho3, chi1, psi1, tau1, lambda_b1, lambda_f1, zeta1, iota1, upsilon1
colnames(Pbounds) <- c('kappa1', 'kappa2', 'beta1', 'gamma1', 'gamma2', 'rho1', 'chi1', 'psi1', 'tau1', 'lambda_b1', 'lambda_f1', 'zeta1','iota1', 'upsilon1')
Pbounds[1,] <- c(1,  1,  0.2, 0.01,0.03,  0,  0,   0.5, 0, 0, 0, 0, 0)
Pbounds[2,] <- c(20, 15, 0.8, 1, 1,  0.8, 0.8, 0.7, 2, 2, 6, 6, 6)
View(Pbounds)
