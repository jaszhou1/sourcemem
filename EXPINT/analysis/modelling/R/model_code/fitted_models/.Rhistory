recentered_errors[idx,8] <- model_string
View(recentered_errors)
idx
idx + 1
idx <- idx + 1
idx
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
data$condition
this_data <- data[data$condition == "orthographic",]
ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
cond <- "orth"
ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
cond <- "orthographic"
ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
View(this_data)
View(this_data)
recenter_data <- recenter.data(data)
View(recenter_data)
recenter_data$cond
cond <- "orthographic"
this_data <- recenter_data[recenter_data$cond == cond,]
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
orth
this_data <- recenter_data[recenter_data$cond == cond,]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
orth
View(data)
cond = 'unrelated'
this_data <- recenter_data[recenter_data$cond == cond,]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
orth
View(data)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model.R")
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_fits.RData")
View(model_fits)
mean(model_fits$equal_nosem$gamma1)
mean(model_fits$equal_nosem$gamma2)
mean(model_fits$flat_gamma1$gamma2)
mean(model_fits$flat_gamma1$gamma1)
mean(model_fits$flat_gamma1$gamma3)
mean(model_fits$flat_gamma2$gamma3)
mean(model_fits$flat_gamma2$gamma2)
mean(model_fits$flat_gamma2$gamma1)
mean(model_fits$flat_gamma2$beta)
mean(model_fits$flat_gamma2$beta1)
mean(model_fits$flat_gamma2$beta2)
mean(model_fits$flat_gamma2$beta1)
mean(model_fits$spatiotemporal$beta1)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_simulated.RData")
View(sim_data)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_simulated.RData")
unique(sim_data$model)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/2022-11-03_response_error.RData")
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
# Load simulated datasets
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_simulated.RData")
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
head(sim_data)
head(data)
head(sim_data)
model <- sim_data
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
geom_density(data = models, aes(x = simulated_error, color = model), adjust = 1) +
facet_wrap(~condition)
library(ggplot2)
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
geom_density(data = models, aes(x = simulated_error, color = model), adjust = 1) +
facet_wrap(~condition)
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
geom_density(data = sim)data, aes(x = simulated_error, color = model), adjust = 1) +
ggplot() +
geom_histogram(data = data, aes(x = source_error, y = ..density..), colour = 1, fill = 'white', bins = 30) +
geom_density(data = sim_data, aes(x = simulated_error, color = model), adjust = 1) +
facet_wrap(~condition)
View(model)
load("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/2022-12-26_fits.RData")
View(model_fits)
model_fits[[1]]
model_fits[[1]]$kappa1
model_fits[[2]]$kappa1
model_fits[[3]]$kappa1
model_fits[[4]]$kappa1
model_fits[[6]]$kappa1
model_fits[[20]]$kappa1
model_fits[[14]]$kappa1
model_fits[[13]]$kappa1
model_fits[[12]]$kappa1
model_fits[[12]]$kappa2
model_fits[[5]]$kappa2
model_fits[[5]]$kappa1
model_fits[[5]]$kappa2
model_fits[[5]]$beta1
model_fits[[5]]$beta2
model_fits[[5]]$gamma1
model_fits[[6]]$kappa1
model_fits[[6]]$kappa2
model_fits[[6]]$kappa1
model_fits[[6]]$gamma1
model_fits[[6]]$gamma2
model_fits[[7]]$lambda_b1
model_fits[[7]]$lambda_b2
model_fits[[7]]$lambda_f1
model_fits[[7]]$zeta1
model_fits[[7]]$zeta2
model_fits[[7]]$iota1
model_fits[[7]]$iota2
model_fits[[7]]$upsilon1
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
# Version 2, use a more refined set of models to narrow in on comparisons that
# can be written up sensibly.
library(CircStats)
library(circular)
library(DEoptim)
library(ggplot2)
library(extraDistr)
library(foreach)
library(doParallel)
library(plyr)
library(R.utils)
library(statip)
## Handle data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
# Source core model function
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
# Function to calculate aic
get_aic <- function(L, n_params){
aic <- 2*L + 2*n_params
return(aic)
}
cosine_distance <- function(theta, phi){
distance <- 1 - cos(theta - phi)
return(distance)
}
angle_diff <- function(a,b){
diff <- atan2(sin(a-b), cos(a-b))
return(diff)
}
## Load in the model variants
source('x1_flat_intrusion.R')
source('x2_flat_gamma_1.R')
source('x3_flat_gamma_2.R')
source('x4_temporal.R')
source('x5_asym_temporal.R')
source('x6_spatial.R')
source('x7_ortho.R')
source('x8_temp_ortho.R')
source('x9_spatial_ortho.R')
source('x10_spatiotemporal.R')
source('x11_spatiotemporal_ortho.R')
source('x12_four_factor.R')
# Introduce a new set of models, based on what fit well from the above list,
# which allow for difference in weight and slope of similarity factors
source('x13_temporal_weight.R')
source('x14_spatial_weight.R')
source('x15_spatiotemporal_weight.R')
source('x16_temporal_decay.R')
source('x17_spatial_decay.R')
source('x18_spatiotemporal_decay.R')
# models <- c(flat_intrusion, flat_gamma1, flat_gamma2, temporal,
#             asym_temporal, spatial, ortho, temporal_ortho,
#             spatial_ortho, spatiotemporal, spatiotemporal_ortho,
#             four_factor, temporal_ortho_weight, spatial_ortho_weight,
#             spatiotemporal_ortho_weight, temporal_ortho_decay, spatial_ortho_decay,
#             spatiotemporal_ortho_decay)
#
# model_names <- c('flat_intrusion', 'flat_gamma1', 'flat_gamma2', 'temporal',
#                  'asym_temporal', 'spatial', 'ortho', 'temporal_ortho',
#                  'spatial_ortho', 'spatiotemporal', 'spatiotemporal_ortho',
#                  'four_factor', 'temporal_weight', 'spatial_weight',
#                  'spatiotemporal_weight', 'temporal_decay', 'spatial_decay',
#                  'spatiotemporal_decay')
models <- c(temporal,
asym_temporal, spatial, ortho, temporal_ortho,
spatial_ortho, spatiotemporal, spatiotemporal_ortho,
four_factor, temporal_ortho_weight, spatial_ortho_weight,
spatiotemporal_ortho_weight, temporal_ortho_decay, spatial_ortho_decay,
spatiotemporal_ortho_decay)
model_names <- c('temporal',
'asym_temporal', 'spatial', 'ortho', 'temporal_ortho',
'spatial_ortho', 'spatiotemporal', 'spatiotemporal_ortho',
'four_factor', 'temporal_weight', 'spatial_weight',
'spatiotemporal_weight', 'temporal_decay', 'spatial_decay',
'spatiotemporal_decay')
spatial(data[data$participant == 2,])
# Version 2, use a more refined set of models to narrow in on comparisons that
# can be written up sensibly.
library(CircStats)
library(circular)
library(DEoptim)
library(ggplot2)
library(extraDistr)
library(foreach)
library(doParallel)
library(plyr)
library(R.utils)
library(statip)
## Handle data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data <- data[data$is_stimulus, ]
# Exclude data with inalid RT
data <- data[data$valid_RT, ]
# Source core model function
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
# Function to calculate aic
get_aic <- function(L, n_params){
aic <- 2*L + 2*n_params
return(aic)
}
cosine_distance <- function(theta, phi){
distance <- 1 - cos(theta - phi)
return(distance)
}
angle_diff <- function(a,b){
diff <- atan2(sin(a-b), cos(a-b))
return(diff)
}
## Load in the model variants
source('x1_flat_intrusion.R')
source('x2_flat_gamma_1.R')
source('x3_flat_gamma_2.R')
source('x4_temporal.R')
source('x5_asym_temporal.R')
source('x6_spatial.R')
source('x7_ortho.R')
source('x8_temp_ortho.R')
source('x9_spatial_ortho.R')
source('x10_spatiotemporal.R')
source('x11_spatiotemporal_ortho.R')
source('x12_four_factor.R')
# Introduce a new set of models, based on what fit well from the above list,
# which allow for difference in weight and slope of similarity factors
source('x13_temporal_weight.R')
source('x14_spatial_weight.R')
source('x15_spatiotemporal_weight.R')
source('x16_temporal_decay.R')
source('x17_spatial_decay.R')
source('x18_spatiotemporal_decay.R')
# models <- c(flat_intrusion, flat_gamma1, flat_gamma2, temporal,
#             asym_temporal, spatial, ortho, temporal_ortho,
#             spatial_ortho, spatiotemporal, spatiotemporal_ortho,
#             four_factor, temporal_ortho_weight, spatial_ortho_weight,
#             spatiotemporal_ortho_weight, temporal_ortho_decay, spatial_ortho_decay,
#             spatiotemporal_ortho_decay)
#
# model_names <- c('flat_intrusion', 'flat_gamma1', 'flat_gamma2', 'temporal',
#                  'asym_temporal', 'spatial', 'ortho', 'temporal_ortho',
#                  'spatial_ortho', 'spatiotemporal', 'spatiotemporal_ortho',
#                  'four_factor', 'temporal_weight', 'spatial_weight',
#                  'spatiotemporal_weight', 'temporal_decay', 'spatial_decay',
#                  'spatiotemporal_decay')
models <- c(temporal,
asym_temporal, spatial, ortho, temporal_ortho,
spatial_ortho, spatiotemporal, spatiotemporal_ortho,
four_factor, temporal_ortho_weight, spatial_ortho_weight,
spatiotemporal_ortho_weight, temporal_ortho_decay, spatial_ortho_decay,
spatiotemporal_ortho_decay)
model_names <- c('temporal',
'asym_temporal', 'spatial', 'ortho', 'temporal_ortho',
'spatial_ortho', 'spatiotemporal', 'spatiotemporal_ortho',
'four_factor', 'temporal_weight', 'spatial_weight',
'spatiotemporal_weight', 'temporal_decay', 'spatial_decay',
'spatiotemporal_decay')
Sel = c(1, 1,  1, 1, 0,   1, 1, 0,  1, 0, 0,   1, 0, 0,  0, 0, 0,  0, 0, 0,   1, 0, 0, 0, 0, 0,   1, 0, 0,  1, 0, 0,  0, 0, 0)
# For the fixed parameters (P[Sel == 0], what value should parameter be fixed at? NA will be treated as "same as unrelated condition")
#beta2 <- NA
beta3 <- NA
gamma3 <- NA
# intrusion weights
chi2 <- NA
chi3 <- NA
phi2 <- NA
phi3 <- NA
psi1 <- 0 # Semantic vs. Orthographic weight
psi2 <- NA
psi3 <- NA
# intrusion similarity decays
tau1 <- 0.5 # Temporal asymmetry (tau >0.5 means forwards are more similar)
tau2 <- NA
tau3 <- NA
lambda_f1 <- NA
lambda_b2 <- NA # Similarity decay of backwards temporal lag
lambda_f2 <- NA # Similarity decay of forwards temporal lag
lambda_b3 <- NA # Similarity decay of backwards temporal lag
lambda_f3 <- NA # Similarity decay of forwards temporal lag
zeta2 <- NA
zeta3 <- NA
iota2 <- NA # Decay for orthography orthographic
iota3 <- NA
upsilon1 <- 0 # Similarity decay of semantic component unrelated
upsilon2 <- NA # Decay for semantic orth
upsilon3 <- NA
Pfix = c(beta3, gamma3, chi2, chi3, phi2, phi3,
psi1, psi2, psi3, tau1, tau2, tau3,
lambda_f1, lambda_b2, lambda_f2, lambda_b3, lambda_f3,
zeta2, zeta3, iota2, iota3, upsilon1, upsilon2, upsilon3)
Pvar = c(27, 26, 0.4, 0.2, 0.1, 0.1, 0.27, 0.13, 0.5, 0.7, 4)
intrusion_cond_model_x(Pvar, data[data$participant == 2,], Pfix, Sel)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x.R")
intrusion_cond_model_x(Pvar, data[data$participant == 2,], Pfix, Sel)
View(intrusion_weights)
x <- cbind(1, intrusion_weights)
View(x)
y <- x * 0.4
View(y)
sum(y[1,])
sum(y[2,])
sum(y[3,])
intrusion_weights <- data.frame(matrix(nrow = nrow(data),ncol = n_intrusions))
intrusion_weights[data$condition == 'unrelated',] <- (
(temporal_similarity[data$condition == 'unrelated',]^(1-phi1) *
spatial_similarity[data$condition == 'unrelated',]^phi1)^(1-chi1) *
(orthographic_similarity[data$condition == 'unrelated',]^(1-psi1) *
semantic_similarity[data$condition == 'unrelated',]^psi1)^chi1
)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x2.R")
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x2.R")
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
View(intrusion_weights)
Pvar
Pvar <- c(27, 26, 0.3, 0.2, 0.1, 0.1, 0.27, 0.13, 2, 3, 10)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
View(intrusion_weights)
View(intrusion_weights)
blah 1 <- intrusion_weights[data$condition == 'semantic',]
blah1 <- intrusion_weights[data$condition == 'semantic',]
blah2 <-  intrusion_weights[data$condition == 'orthographic',]
View(blah1)
View(blah2)
target_weight <- cbind(1, intrusion_weights)
View(target_weight)
sum(target_weight[1,])
sum(target_weight[1,])
target_weight[1,] / sum(target_weight[1,])
normalise_row <- function(x){
x <- x/(sum(x))
return(x)
}
target_weight <- apply(target_weight, 1, normalise_row)
View(target_weight)
intrusion_weights <- data.frame(matrix(nrow = nrow(data),ncol = n_intrusions))
intrusion_weights[data$condition == 'unrelated',] <- (
(temporal_similarity[data$condition == 'unrelated',]^(1-phi1) *
spatial_similarity[data$condition == 'unrelated',]^phi1)^(1-chi1) *
(orthographic_similarity[data$condition == 'unrelated',]^(1-psi1) *
semantic_similarity[data$condition == 'unrelated',]^psi1)^chi1
)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x2.R")
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
View(target_weight)
x <- apply(target_weight, 1, normalise_row)
View(x)
x <- apply(target_weight, 2, normalise_row)
View(x)
sum(x[1,])
intrusion_weights <- data.frame(matrix(nrow = nrow(data),ncol = n_intrusions))
intrusion_weights[data$condition == 'unrelated',] <- (
(temporal_similarity[data$condition == 'unrelated',]^(1-phi1) *
spatial_similarity[data$condition == 'unrelated',]^phi1)^(1-chi1) *
(orthographic_similarity[data$condition == 'unrelated',]^(1-psi1) *
semantic_similarity[data$condition == 'unrelated',]^psi1)^chi1
)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
View(target_weight)
target_weight <- apply(target_weight, 2, normalise_row)
View(target_weight)
intrusion_weights <- data.frame(matrix(nrow = nrow(data),ncol = n_intrusions))
intrusion_weights[data$condition == 'unrelated',] <- (
(temporal_similarity[data$condition == 'unrelated',]^(1-phi1) *
spatial_similarity[data$condition == 'unrelated',]^phi1)^(1-chi1) *
(orthographic_similarity[data$condition == 'unrelated',]^(1-psi1) *
semantic_similarity[data$condition == 'unrelated',]^psi1)^chi1
)
intrusion_weights[data$condition == 'orthographic',] <- (
(temporal_similarity[data$condition == 'orthographic',]^(1-phi2) *
spatial_similarity[data$condition == 'orthographic',]^phi2)^(1-chi2) *
(orthographic_similarity[data$condition == 'orthographic',]^(1-psi2) *
semantic_similarity[data$condition == 'orthographic',]^psi2)^chi2
)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
x <- apply(target_weight, 1, normalise_row)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
x <- apply(target_weight, 1, normalise_row)
View(x)
t(x)
x <- t(x)
View(x)
target_weight <- t(apply(target_weight, 1, normalise_row))
View(target_weight)
trial_weights[data$condition == 'unrelated',] <- trial_weights[data$condition == 'unrelated',] * (beta1)
# Assume targets have a similarity of 1, treat it as if it is an intrusion self-match
trial_weights <- cbind(1, intrusion_weights)
# Normalise each row so that it sums to 1, this makes it so target weight varies depending on how similar the nontargets are to it
trial_weights <- t(apply(target_weight, 1, function(x) x/sum(x)))
trial_weights[data$condition == 'unrelated',] <- trial_weights[data$condition == 'unrelated',] * (beta1)
trial_weights[data$condition == 'unrelated', ncol(trial_weights)+1] <- 1 - trial_weights[data$condition == 'unrelated',]
1 - trial_weights[data$condition == 'unrelated',]
beta1
View(trial_weights)
trial_weights[data$condition == 'unrelated',]
ncol(trial_weights)+1
# Assume targets have a similarity of 1, treat it as if it is an intrusion self-match
trial_weights <- cbind(1, intrusion_weights)
# Normalise each row so that it sums to 1, this makes it so target weight varies depending on how similar the nontargets are to it
trial_weights <- as.data.frame(t(apply(target_weight, 1, function(x) x/sum(x))))
trial_weights[data$condition == 'unrelated',] <- trial_weights[data$condition == 'unrelated',] * (beta1)
trial_weights[data$condition == 'unrelated', ncol(trial_weights)+1] <- 1 - trial_weights[data$condition == 'unrelated',]
View(trial_weights)
1 - trial_weights[data$condition == 'unrelated',]
x <- 1 - trial_weights[data$condition == 'unrelated',]
View(x)
rowSums(trial_weights)
# Assume targets have a similarity of 1, treat it as if it is an intrusion self-match
trial_weights <- cbind(1, intrusion_weights)
# Normalise each row so that it sums to 1, this makes it so target weight varies depending on how similar the nontargets are to it
trial_weights <- as.data.frame(t(apply(target_weight, 1, function(x) x/sum(x))))
rowSums(trial_weights)
trial_weights[data$condition == 'unrelated',] <- trial_weights[data$condition == 'unrelated',] * (1-beta1)
rowSums(trial_weights)
View(trial_weights)
trial_weights <- trial_weights * 0.5
View(trial_weights)
rowSums(trial_weights
)
# Unrelated condition
trial_weights[data$condition == 'unrelated',] <- trial_weights[data$condition == 'unrelated',] * (beta1)
trial_weights[data$condition == 'unrelated', ncol(trial_weights)+1] <- beta1
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x2.R")
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
View(trial_weights)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x2.R")
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x2.R")
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
View(trial_weights)
View(trial_weights)
0.002 + 0.002 + 0.002 + 0.002 + 0.001+ 0.001 + 0.001
sum(trial_weights[1,])
View(trial_weights)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
View(trial_weights)
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x2.R")
debugSource("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/intrusion_cond_model_x2.R")
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
View(trial_weights)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
intrusion_cond_model_x(Pvar, data[data$participant == 2,], Pfix, Sel)
intrusion_cond_model_x(Pvar, data[data$participant == 2,], Pfix, Sel)
intrusion_cond_model_x2(Pvar, data[data$participant == 2,], Pfix, Sel)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/x1_flat_intrusion.R")
flat_intrusion(data[data$participant == 2,])
setwd("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/fitted_models")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits_v2.R")
source("~/git/sourcemem/EXPINT/analysis/modelling/R/model_code/run_fits_v2.R")
