hist(data[data$participant == 1, 'source_error'], breaks = 50)
hist(data[data$participant == 2, 'source_error'], breaks = 50)
hist(data[data$participant == 3, 'source_error'], breaks = 50)
hist(data[data$participant == 4, 'source_error'], breaks = 50)
hist(data[data$participant == 5, 'source_error'], breaks = 50)
hist(data[data$participant == 6, 'source_error'], breaks = 50)
hist(data[data$participant == 7, 'source_error'], breaks = 50)
hist(data[data$participant == 8, 'source_error'], breaks = 50)
hist(data[data$participant == 9, 'source_error'], breaks = 50)
hist(data[data$participant == 10, 'source_error'], breaks = 50)
hist(data[data$participant == 1, 'source_rt'], breaks = 50)
hist(data[data$participant == 1, 'source_RT'], breaks = 50)
hist(data[data$participant == 1, 'source_RT'], breaks = 30)
hist(data[data$participant == 2, 'source_RT'], breaks = 30)
hist(data[data$participant == 3, 'source_RT'], breaks = 30)
hist(data[data$participant == 2, 'source_RT'], breaks = 30)
hist(data[data$participant == 4, 'source_RT'], breaks = 30)
hist(data[data$participant == 5, 'source_RT'], breaks = 30)
hist(data[data$participant == 6, 'source_RT'], breaks = 30)
hist(data[data$participant == 7, 'source_RT'], breaks = 30)
hist(data[data$participant == 8, 'source_RT'], breaks = 30)
hist(data[data$participant == 9, 'source_RT'], breaks = 30)
hist(data[data$participant == 10, 'source_RT'], breaks = 30)
rayleigh <- data.frame(participant = integer(),
sig = numeric())
for(i in participants){
this.p.data <- data[data$participant == i, ]
this.rayleigh <- rayleigh.test(this.p.data$source_error)
rayleigh[i, 'participant'] <- i
rayleigh[i, 'sig'] <- this.rayleigh
}
warnings()
this.p.data <- data[data$participant == 1, ]
this.rayleigh <- rayleigh.test(this.p.data$source_error)
rayleigh[i, 'participant'] <- i
this.rayleigh
this.rayleigh$statistic
this.rayleigh$p.value
this.rayleigh$mu
rayleigh <- data.frame(participant = integer(),
stat = numeirc(),
sig = numeric())
for(i in participants){
this.p.data <- data[data$participant == i, ]
this.rayleigh <- rayleigh.test(this.p.data$source_error)
rayleigh[i, 'participant'] <- i
rayleigh[i, 'stat'] <- this.rayleigh$statistic
rayleigh[i, 'sig'] <- this.rayleigh$p.value
}
View(rayleigh)
source("~/git/sourcemem/EXPINT/analysis/modelling/R/response_error_models.R")
x <- data[data$valid_RT,]
data[data$valid_RT,]
nrow(data[data$valid_RT,])
nrow(data[data$valid_RT,])/nrow(data)
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Exclude foils
data[data$is_stimulus, ]
x <- data[data$valid_RT,]
nrow(data[data$valid_RT,])/nrow(data)
View(data)
data[data$is_stimulus, ]
data[data$is_stimulus == TRUE, ]
class(data$is_stimulus)
data <- data[data$is_stimulus, ]
x <- data[data$valid_RT,]
nrow(data[data$valid_RT,])/nrow(data)
View(data)
View(data)
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recentered_data <- recenter.data(data)
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recentered_data <- recenter.data(data)
View(recentered_data)
library(ggplot2)
ggplot(recentered_data) + geom_histogram(aes(x = offset))
ggplot(recentered_data) + geom_histogram(aes(x = offset), bins = 50)
ggplot(recentered_data) + geom_histogram(aes(x = offset), bins = 30)
hist(recentered_data$orthographic)
hist(recentered_data$semantic)
hist(recentered_data$spatial)
hist(recentered_data$lag)
ggplot(recentered_data) + geom_histogram(aes(x = offset), bins = 30) + facet_grid(rows = orthographic)
ggplot(recentered_data) + geom_histogram(aes(x = offset), bins = 30) + facet_grid(~orthographic)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~orthographic)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 10) + facet_grid(~orthographic)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 20) + facet_grid(~orthographic)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 20) + facet_grid(~semantic)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 20) + facet_grid(~semantic)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 20) + facet_grid(~lag)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~lag)
hist(recentered_data$semantic)
quantiles(recentered_data$semantic, c(0.25, 0.5, 0.75))
quantile(recentered_data$semantic, c(0.25, 0.5, 0.75))
quantile(recentered_data$semantic, c(0.25, 0.5, 0.75), na.rm = TRUE)
quantile(recentered_data$semantic, c(0.25, 0.5, 0.75), na.rm = TRUE)
hist(recentered_data$semantic)
quantile(recentered_data$semantic, c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~orthographic)
seq
seq(0,1,7)
seq(0, 1, length = 7)
quantile(recentered_data$semantic, c(0.25, 0.5, 0.75), na.rm = TRUE)
sem_bins <- quantile(recentered_data$semantic, c(0.25, 0.5, 0.75), na.rm = TRUE)
spatial_bins <- quantile(recentered_data$spatial, c(0.25, 0.5, 0.75), na.rm = TRUE)
spatial_bins
recentered_data[recentered_data$semantic < spatial_bins[1], 'spatial_bin'] <- '<0.25'
recenter_data <- na.omit(recentered_data)
View(recenter_data)
recentered_data <- na.omit(recentered_data)
recentered_data[recentered_data$semantic < spatial_bins[1], 'spatial_bin'] <- '<0.25'
recentered_data[recentered_data$semantic < spatial_bins[1], 'spatial_bin'] <- 1
recentered_data[recentered_data$spatial < spatial_bins[1], 'spatial_bin'] <- 1
spatial_bins[1]
spatial_bins[[1]]
recentered_data[recentered_data$spatial < spatial_bins[[1]], 'spatial_bin'] <- 1
sem_bins <- quantile(recentered_data$semantic, c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
spatial_bins <- quantile(recentered_data$spatial, c(0, 0.25, 0.5, 0.75, 1), na.rm = TRUE)
sem_bins
spatial_bins
length(sem_bins)
seq(0, 1, length =5 )
head(recentered_data)
1 >= 1
debugSource("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recentered_data <- recenter.data(data)
View(recentered_errors)
recentered_errors$spatial >= spatial_bins[[i]]
spatial_bins
spatial_bins[1]
spatial_bins[[1]]
ecentered_errors[(recentered_errors$spatial >= spatial_bins[[i]]&
recentered_errors$spatial < spatial_bins[[i+1]]),
'spatial_bin']
recentered_errors[(recentered_errors$spatial >= spatial_bins[[i]]&
recentered_errors$spatial < spatial_bins[[i+1]]),
'spatial_bin']
spatial_bins[[i]]
i
i <- i+1
i
recentered_errors[(recentered_errors$spatial >= spatial_bins[[i]]&
recentered_errors$spatial < spatial_bins[[i+1]]),
'spatial_bin']
i
View(recentered_errors)
spatial_bins
debugSource("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recentered_data <- recenter.data(data)
View(recentered_data)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~semantic_bin)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~spatial_bin)
View(recentered_data)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~orthographic)
debugSource("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recentered_data <- recenter.data(data)
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recentered_data <- recenter.data(data)
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recentered_data <- recenter.data(data)
View(recentered_data)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~semantic_bin)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~semantic_bin)
ggplot(recentered_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~spatial_bin)
recenter.condition <- function(data, cond){
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~orthographic)
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~semantic_bin)
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~spatial_bin)
}
debugSource("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
debugSource("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
cond <- 'semantic'
sprintf('recenter_orthographic_cond_%s', cond)
sprintf('recenter_orthographic_cond_%s.png', cond)
ggsave
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
unique(recentered_data$cond)
recenter.condition(recentered_data, "unrelated")
recenter.condition <- function(data, cond){
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~orthographic)
ggsave(sprintf('recenter_orthographic_cond_%s.png', cond), plot = orth, width = 20, height = 20, units = "cm")
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~semantic_bin)
ggsave(sprintf('recenter_semantic_cond_%s.png', cond), plot = sem, width = 20, height = 20, units = "cm")
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 50) + facet_grid(~spatial_bin)
ggsave(sprintf('recenter_spatial_cond_%s.png', cond), plot = spatial, width = 20, height = 20, units = "cm")
}
recenter.condition(recentered_data, "unrelated")
recenter.condition <- function(data, cond){
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~orthographic)
ggsave(sprintf('recenter_orthographic_cond_%s.png', cond), plot = orth, width = 20, height = 15, units = "cm")
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~semantic_bin)
ggsave(sprintf('recenter_semantic_cond_%s.png', cond), plot = sem, width = 20, height = 15, units = "cm")
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~spatial_bin)
ggsave(sprintf('recenter_spatial_cond_%s.png', cond), plot = spatial, width = 20, height = 15, units = "cm")
}
recenter.condition(recentered_data, "unrelated")
recenter.condition(recentered_data, "orthographic")
recenter.condition(recentered_data, "semantic")
View(data)
max(data$semantic1)
max(data$semantic2)
data <- na.omit(data)
max(data$semantic2)
max(data$semantic1)
max(data$semantic3)
max(data$semantic4)
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recentered_data <- recenter.data(data)
recenter.condition(recentered_data, "unrelated")
recenter.condition(recentered_data, "orthographic")
recenter.condition(recentered_data, "semantic")
x <- recentered_data[recentered_data$cond == "semantic",]
View(x)
View(x)
hist(data$semantic1)
hist(data[data$condition == "semmantic",]$semantic1)
hist(data[data$condition == "semantic","semantic"])
hist(data[data$condition == "semantic","semantic1"])
hist(data[data$condition == "unrelated","semantic1"])
hist(data[data$condition == "unrelated","semantic1"], xlim = (0, 1))
hist(data[data$condition == "unrelated","semantic1"])
hist(data[data$condition == "unrelated","semantic1"], xlim = (0, 1))
mean(data[data$condition == "unrelated","semantic1"])
data <- na.omit(data)
mean(data[data$condition == "unrelated","semantic1"])
mean(data[data$condition == "semantic","semantic1"])
View(data)
data[,37:43] <- 1-data[,37:43]
View(data)
## Load dependencies
library(circular)
library(stringdist)
library(rjson)
library(lsa)
# Load in word2vec semantic vectors
word2vec <- fromJSON(file = '~/git/sourcemem/EXPINT/experiment_stimuli/word2vec_final.json')
# Function to compute angular difference
cosine_distance <- function(theta, phi){
distance <- 1 - cos(theta - phi)
return(distance)
}
angle_diff <- function(a,b){
diff <- atan2(sin(a-b), cos(a-b))
return(diff)
}
## Looking at data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
# Exclude data from practice blocks
data <- data[data$block != -1,]
# Define some things to iterate through
participants <- unique(data$participant)
conds <- unique(data$condition)
data[1,37:43]
View(data)
data[,51:57] <- 1-data[,51:57]
data <- na.omit(data)
mean(data[data$condition == "semantic","semantic1"])
mean(data[data$condition == "unrelated","semantic1"])
min(data[data$condition == "unrelated","semantic1"])
min(data[data$condition == "semantic","semantic1"])
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recenter_data <- recenter.data(data)
debugSource("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
recenter_data <- recenter.data(data)
recenter_data <- recenter.data(data)
sem_bins
recenter.condition(recenter_data, "semantic")
recenter.condition(recenter_data, "orthographic")
recenter.condition(recenter_data, "unrelated")
View(data)
View(recog)
install.packages('psycho')
library(psycho)
dprime()
recog[1,1]
recog[1,2]
recog[1,3]
debugSource("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
nrow(this.cond.stim)
nrow(this.cond.stim[this.cond.stim$recognised,]))
nrow(this.cond.stim[this.cond.stim$recognised,])
dprime(nrow(this.cond.stim[this.cond.stim$recognised,]),  nrow(this.cond.foil[this.cond.foil$recognised,]))
dprime(nrow(this.cond.stim[this.cond.stim$recognised,]),  nrow(this.cond.foil[this.cond.foil$recognised,]), nrow(this.cond.stim[!this.cond.stim$recognised,]),  nrow(this.cond.foil[!this.cond.foil$recognised,]))
SDT <- dprime(nrow(this.cond.stim[this.cond.stim$recognised,]),  nrow(this.cond.foil[this.cond.foil$recognised,]), nrow(this.cond.stim[!this.cond.stim$recognised,]),  nrow(this.cond.foil[!this.cond.foil$recognised,]))
SDT$dprime
## Hit Rates and False Alarms for each participant
recog <- data.frame(participant = integer(),
condition = character(),
hits = numeric(),
misses = numeric(),
false.alarms = numeric(),
correct.rejections = numeric(),
dprime = numeric(),
beta = numeric())
idx <- 1
for(i in participants){
this.p.data <- data[data$participant == i, ]
for(j in conds){
this.cond.data <- this.p.data[this.p.data$condition == j, ]
this.cond.stim <- this.cond.data[this.cond.data$is_stimulus,]
this.cond.foil <- this.cond.data[!this.cond.data$is_stimulus,]
# Calculate hits and misses
this.hits <- nrow(this.cond.stim[this.cond.stim$recognised,])/nrow(this.cond.stim)
this.misses <- 1-this.hits
# False alarms and correct rejections
this.fa <- nrow(this.cond.foil[this.cond.foil$recognised,])/nrow(this.cond.foil)
this.reject <- 1-this.fa
# Index for the bigger dataframe
recog[idx, 'participant'] <- i
recog[idx, 'condition'] <- j
recog[idx, 'hits'] <- this.hits
recog[idx, 'misses'] <- this.misses
recog[idx, 'false.alarms'] <- this.fa
recog[idx, 'correct.rejections'] <- this.reject
# Tacking on some SDT measurements
SDT <- dprime(nrow(this.cond.stim[this.cond.stim$recognised,]),  nrow(this.cond.foil[this.cond.foil$recognised,]),
nrow(this.cond.stim[!this.cond.stim$recognised,]),  nrow(this.cond.foil[!this.cond.foil$recognised,]))
recog[idx, "dprime"] <- SDT$dprime
recog[idx, "beta"] <- SDT$beta
idx <- idx + 1
}
}
View(SDT)
View(recog)
x <- data[data$participant == 1,]
View(x)
data[data$participant == 1, 'recognised'] <- !(data[data$participant == 1, 'recognised'])
data[data$participant == 3, 'recognised'] <- !(data[data$participant == 3, 'recognised'])
library(plyr)
x<- data[data$participant %in% c(1,3),]
View(x)
## Looking at data prior to modelling
data <- read.csv("~/git/sourcemem/EXPINT/data/EXPINT_data.csv")
x<- data[data$participant %in% c(1,3),]
View(x)
x$recog_rating_corrected <- mapvalues(x$recog_rating, from =c(1, 2, 3, 8, 9, 0), to = c(0, 9, 8, 3, 2, 1))
x$recog_rating <- mapvalues(x$recog_rating, from =c(1, 2, 3, 8, 9, 0), to = c(0, 9, 8, 3, 2, 1))
data[data$participant %in% c(1,3),]$recog_rating <- mapvalues(data[data$participant %in% c(1,3),]$recog_rating, from =c(1, 2, 3, 8, 9, 0), to = c(0, 9, 8, 3, 2, 1))
data[data$participant %in% c(1,3),]$recognised <- !(data[data$participant %in% c(1,3),]$recognised)
write.csv(data, file = 'EXPINT_data2.csv')
debugSource("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
View(recog)
head(recog)
ggplot(recog, aes(x=factor(condition)), y = dprime, group = participant)
ggplot(recog, aes(x=factor(condition)), y = dprime, group = participant) +
geom_line() +
geom_point()
ggplot(recog, aes(x=factor(condition)), y = dprime, group = participant) + geom_line() + geom_point()
head(recog)
recog$dprime
ggplot(recog, aes(x=factor(condition),  y = dprime, group = participant)) + geom_line() + geom_point()
ggplot(recog, aes(x=factor(condition),  y = dprime, group = participant, color = participant)) + geom_line() + geom_point()
recog$participant <- as.factor(recog$participant)
ggplot(recog, aes(x=factor(condition),  y = dprime, group = participant, color = participant)) + geom_line(alpha = 0.4) + geom_point(size = 1.5)
ggplot(recog, aes(x=factor(condition),  y = dprime, group = participant, color = participant)) + geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3)
recenter_data <- recenter.data(data)
this_data[recenter_data$cond == 'orthographic',]
recenter.condition(recenter_data, 'orthographic')
dev.off()
View(recenter_data)
data[1,44:50]
View(data)
source("~/git/sourcemem/EXPINT/analysis/prelim_analyses.R")
data[1,44:50]
recenter_data <- recenter.data(data)
View(recenter_data)
setwd("~/git/sourcemem/EXPINT/analysis/prelim")
recenter.condition(recenter_data, 'orthographic')
View(recenter_data)
this_data <- recenter_data[recenter_data$cond == 'orthographic',]
ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~orthographic)
this_data$orthographic
recenter.condition(recenter_data, "unrelated")
recenter.condition(recenter_data, "semantic")
recenter.condition(recenter_data, "orthographic")
View(SDT)
View(recog)
recog_plot <- ggplot(recog, aes(x=factor(condition),  y = dprime, group = participant, color = participant)) + geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3)
recog_plot
recog$condition <- ordered(recog$condition, levels = c('unrelated', 'semantic', 'orthographic', ))
recog$participant <- as.factor(recog$participant)
recog_plot <- ggplot(recog, aes(x=factor(condition),  y = dprime, group = participant, color = participant)) + geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3)
recog_plot
recog$condition <- as.factor(recog$condition, levels = c("unrelated", "semantic", "orthographic"))
recog$participant <- as.factor(recog$participant)
recog_plot <- ggplot(recog, aes(x=factor(condition),  y = dprime, group = participant, color = participant)) + geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3)
recog_plot
recog_plot <- ggplot(recog, aes(x=condition,  y = dprime, group = participant, color = participant)) + geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3)
recog_plot
recog$condition <- factor(recog$condition, levels = c("unrelated", "semantic", "orthographic"), ordered = T)
recog_plot <- ggplot(recog, aes(x=condition,  y = dprime, group = participant, color = participant)) + geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3)
recog_plot
subset(recog, condition == "orthographic")
recog_plot <- ggplot(recog, aes(x=condition,  y = dprime, group = participant, color = participant)) +
geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3) +
geom_text(data = subset(recog, condition == "orthographic"), aes(label = participant, colour = participant, x = Inf, y = Capex), hjust = -.1)
recog_plot
recog_plot <- ggplot(recog, aes(x=condition,  y = dprime, group = participant, color = participant)) +
geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3) +
geom_text(data = subset(recog, condition == "orthographic"), aes(label = participant, colour = participant, x = Inf, y = dprime), hjust = -.1)
gt <- ggplotGrob(recog_plot)
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
library(grid)
recog_plot <- ggplot(recog, aes(x=condition,  y = dprime, group = participant, color = participant)) +
geom_line(lwd = 1.5, alpha = 0.4) + geom_point(size = 3) +
geom_text(data = subset(recog, condition == "orthographic"), aes(label = participant, colour = participant, x = Inf, y = dprime), hjust = -.1)
gt <- ggplotGrob(recog_plot)
gt$layout$clip[gt$layout$name == "panel"] <- "off"
grid.draw(gt)
recenter.condition <- function(data, cond){
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + ylim(0.1, 0.3) + facet_grid(~orthographic)
ggsave(sprintf('recenter_orthographic_cond_%s.png', cond), plot = orth, width = 20, height = 15, units = "cm")
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + ylim(0.1, 0.3) + facet_grid(~semantic_bin)
ggsave(sprintf('recenter_semantic_cond_%s.png', cond), plot = sem, width = 20, height = 15, units = "cm")
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~spatial_bin)
ggsave(sprintf('recenter_spatial_cond_%s.png', cond), plot = spatial, width = 20, height = 15, units = "cm")
}
recenter.condition <- function(data, cond){
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0.1, 0.3) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic'), cond)
ggsave(sprintf('recenter_orthographic_cond_%s.png', cond), plot = orth, width = 20, height = 15, units = "cm")
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0.1, 0.3) +
facet_grid(~semantic_bin) +
ggtitle(sprintf('%s Condition, Recentered on semantic (quantile)'), cond)
ggsave(sprintf('recenter_semantic_cond_%s.png', cond), plot = sem, width = 20, height = 15, units = "cm")
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~spatial_bin) +
ggtitle(sprintf('%s Condition, Recentered on spatial (quantile)'), cond)
ggsave(sprintf('recenter_spatial_cond_%s.png', cond), plot = spatial, width = 20, height = 15, units = "cm")
}
recenter.condition(recenter_data, "unrelated")
recenter.condition <- function(data, cond){
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0.1, 0.3) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
ggsave(sprintf('recenter_orthographic_cond_%s.png', cond), plot = orth, width = 20, height = 15, units = "cm")
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0.1, 0.3) +
facet_grid(~semantic_bin) +
ggtitle(sprintf('%s Condition, Recentered on semantic (quantile)'), cond)
ggsave(sprintf('recenter_semantic_cond_%s.png', cond), plot = sem, width = 20, height = 15, units = "cm")
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~spatial_bin) +
ggtitle(sprintf('%s Condition, Recentered on spatial (quantile)'), cond)
ggsave(sprintf('recenter_spatial_cond_%s.png', cond), plot = spatial, width = 20, height = 15, units = "cm")
}
recenter.condition(recenter_data, "unrelated")
recenter.condition <- function(data, cond){
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0.1, 0.3) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
ggsave(sprintf('recenter_orthographic_cond_%s.png', cond), plot = orth, width = 20, height = 15, units = "cm")
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0.1, 0.3) +
facet_grid(~semantic_bin) +
ggtitle(sprintf('%s Condition, Recentered on semantic (quantile)', cond))
ggsave(sprintf('recenter_semantic_cond_%s.png', cond), plot = sem, width = 20, height = 15, units = "cm")
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~spatial_bin) +
ggtitle(sprintf('%s Condition, Recentered on spatial (quantile)', cond))
ggsave(sprintf('recenter_spatial_cond_%s.png', cond), plot = spatial, width = 20, height = 15, units = "cm")
}
recenter.condition(recenter_data, "unrelated")
recenter.condition <- function(data, cond){
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0.05, 0.4) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
ggsave(sprintf('recenter_orthographic_cond_%s.png', cond), plot = orth, width = 20, height = 15, units = "cm")
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0.05, 0.4) +
facet_grid(~semantic_bin) +
ggtitle(sprintf('%s Condition, Recentered on semantic (quantile)', cond))
ggsave(sprintf('recenter_semantic_cond_%s.png', cond), plot = sem, width = 20, height = 15, units = "cm")
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~spatial_bin) +
ggtitle(sprintf('%s Condition, Recentered on spatial (quantile)', cond))
ggsave(sprintf('recenter_spatial_cond_%s.png', cond), plot = spatial, width = 20, height = 15, units = "cm")
}
recenter.condition(recenter_data, "unrelated")
recenter.condition <- function(data, cond){
this_data <- data[data$cond == cond, ]
orth <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~orthographic) +
ggtitle(sprintf('%s Condition, Recentered on orthographic', cond))
ggsave(sprintf('recenter_orthographic_cond_%s.png', cond), plot = orth, width = 20, height = 15, units = "cm")
sem <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) +
ylim(0, 0.5) +
facet_grid(~semantic_bin) +
ggtitle(sprintf('%s Condition, Recentered on semantic (quantile)', cond))
ggsave(sprintf('recenter_semantic_cond_%s.png', cond), plot = sem, width = 20, height = 15, units = "cm")
spatial <- ggplot(this_data) + geom_histogram(aes(x = offset, y = ..density..), bins = 30) + facet_grid(~spatial_bin) +
ggtitle(sprintf('%s Condition, Recentered on spatial (quantile)', cond))
ggsave(sprintf('recenter_spatial_cond_%s.png', cond), plot = spatial, width = 20, height = 15, units = "cm")
}
recenter.condition(recenter_data, "unrelated")
recenter.condition(recenter_data, "orthographic")
recenter.condition(recenter_data, "semantic")
