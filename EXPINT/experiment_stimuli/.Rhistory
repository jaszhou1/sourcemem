panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, fill = model)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, folor = model)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, color = model)
View(recentered_all)
recentered_all$model
ggplot(recentered_all, aes(x=error, y = ..density.., color = model)) + geom_histogram(bins = 30)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, aes(color = model)) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
View(plot_1_models)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, aes(color = model, weight = 1)) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
head(recenter_all())
head(recentered_all)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
unique(recentered_all$model)
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient", "Spatiotemporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_1_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_1_models <- recentered_all[recentered_all$model %in% plot_1_model_strings,]
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, )
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
position
View(data)
head(sim_temporal)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
this_data
View(this_average_error)
i
position
data
i
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
concatenate_model_average_error <- function(){
mix <- get_average_error_across_position(sim_mix, 'Pure Guess')
pure_int <- get_average_error_across_position(sim_pure_intrusion, 'Pure Intrusion')
int <- get_average_error_across_position(sim_intprec, 'Intrusion + Guess')
temp <- get_average_error_across_position(sim_temporal, 'Temporal')
spatio <- get_average_error_across_position(sim_spatiotemporal, 'Spatiotemporal')
res <- rbind(mix, pure_int, int, temp, spatio)
return(res)
}
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- concatenate_model_average_error()
View(x)
data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
for (i in 1:10){
this_average_error[i,1] <- i
this_average_error[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
errors_across_serial_position <- function(data){
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
serial_position_data[i,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05))) +
scale_color_manual(values=c("black", "red"))
return(plot)
}
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
View(serial_position_data)
serial_position_data[,3] <- 'data'
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2)
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(serial_position_data) <- c('position','error','model')
serial_position_data[,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = simulated_error))
plot
head(models)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = error))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position, color = model))
View(models)
x <- models[modesl$model == 'Temporal',]
x <- models[models$model == 'Temporal',]
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05)))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.05))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
source('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
plot_data(data, plot_2_models, color_wheel[3:5])
source('~/git/sourcemem_online/analysis/plot_recentered.R')
compare_model_asymm(data,plot_3_models, 'Recentered Asymmetry', c(color_wheel[3], color_wheel[4], color_wheel[5]))
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
recenter_data(data)
this_intrusions
this_intrusions[[j]]
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
View(recentered_errors)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recenter_data(data)
recentered_pure_intrusion <- recenter_model(sim_pure_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
this_intrusions
this_intrusions[[j]]
this_response_angle
this_response_angle <- as.numeric(model[i,]$simulated_response)
this_target_angle <- as.numeric(model[i,]$target_angle)
angle_diff(this_response_angle, this_intrusions[[j]])
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
View(recentered_errors)
model[i, 'participant']
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_intrusion <- recenter_model(data, sim_intrusion)
model[i, 'model']
View(model)
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_orthosem.R')
recentered_intrusion <- recenter_model(data, sim_intrusion)
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
View(recentered_errors)
recentered_errors[idx,8] <- model_string
View(recentered_errors)
idx
idx + 1
idx <- idx + 1
idx
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
recentered_spatiotemporal <- recenter_model(data, sim_spatiotemporal, 'Spatiotemporal')
source('~/git/sourcemem/EXPINT/experiment_stimuli/word_frequency_check.R')
source('~/git/sourcemem/EXPINT/experiment_stimuli/word_frequency_check.R')
words <- rbind(semantic,orthographic)
hist(words$frequency)
View(words)
setwd("~/git/sourcemem/EXPINT/experiment_stimuli")
orthographic <- read.csv('orthographic_lists_final.csv')
semantic <- read.csv('semantic_lists_final.csv')
setwd("~/git/sourcemem/EXPINT/experiment_stimuli")
orthographic <- read.csv('orthographic_lists_final.csv')
semantic <- read.csv('semantic_lists_final.csv')
View(orthographic)
for(i in 1:nrow(semantic)){
this.list.length <- nrow(semantic[semantic$list == semantic$list[i],])
semantic$list_length[i] <- this.list.length
semantic$frequency[i] <- wordlist[wordlist$word == as.character(semantic$word[[i]]), 'FREQlow']
}
write.csv(semantic, file = 'semantic_list.csv')
for(i in 1:nrow(orthographic)){
this.list.length <- nrow(orthographic[orthographic$list == orthographic$list[i],])
orthographic$list_length[i] <- this.list.length
orthographic$frequency[i] <- wordlist[wordlist$word == as.character(orthographic$word[[i]]), 'FREQlow']
}
wordlist <- read.csv('subtlexLength.csv')
wordlist$word <- tolower(wordlist$word)
for(i in 1:nrow(semantic)){
this.list.length <- nrow(semantic[semantic$list == semantic$list[i],])
semantic$list_length[i] <- this.list.length
semantic$frequency[i] <- wordlist[wordlist$word == as.character(semantic$word[[i]]), 'FREQlow']
}
write.csv(semantic, file = 'semantic_list.csv')
for(i in 1:nrow(orthographic)){
this.list.length <- nrow(orthographic[orthographic$list == orthographic$list[i],])
orthographic$list_length[i] <- this.list.length
orthographic$frequency[i] <- wordlist[wordlist$word == as.character(orthographic$word[[i]]), 'FREQlow']
}
write.csv(orthographic, file = 'orthographic_list.csv')
words <- rbind(orthographic,semantic)
for(i in 1:nrow(semantic)){
this.list.length <- nrow(semantic[semantic$list == semantic$list[i],])
semantic$list_length[i] <- this.list.length
semantic$frequency[i] <- wordlist[wordlist$word == as.character(semantic$word[[i]]), 'FREQlow']
}
write.csv(semantic, file = 'semantic_list.csv')
View(semantic)
View(orthographic)
for(i in 1:nrow(semantic)){
this.list.length <- nrow(semantic[semantic$list == semantic$list[i],])
semantic$list_length[i] <- this.list.length
semantic$frequency[i] <- wordlist[wordlist$word == as.character(semantic$word[[i]]), 'FREQlow']
}
source('~/git/sourcemem/EXPINT/experiment_stimuli/word_frequency_check.R')
View(semantic)
View(orthographic)
semantic$frequency[1]
debugSource('~/git/sourcemem/EXPINT/experiment_stimuli/word_frequency_check.R')
View(semantic)
View(orthographic)
View(semantic)
semantic$frequency
wordlist[wordlist$word == as.character(semantic$word[[i]]), 'FREQlow']
as.character(semantic$word[[i]])
View(orthographic)
View(semantic)
source('~/git/sourcemem/EXPINT/experiment_stimuli/word_frequency_check.R')
words <- rbind(semantic,orthographic)
hist(words$frequency)
View(words)
source('~/git/sourcemem/EXPINT/experiment_stimuli/word_frequency_check.R')
source('~/git/sourcemem/EXPINT/experiment_stimuli/word_frequency_check.R')
View(words)
library(jsonlite)
setwd("~/git/sourcemem/EXPINT/experiment_stimuli")
semantic.lists <- read.csv('semantic_lists_final.csv')
orthographic.lists <- read.csv('orthographic_lists_final.csv')
semantic.json <- toJSON(semantic.lists, pretty = TRUE)
orthographic.json <- toJSON(orthographic.lists, pretty = TRUE)
write(semantic.json, "semantic-lists.js")
write(orthographic.json, "orthographic-lists.js")
semantic.lists <- read.csv('semantic_lists_final.csv', fileEncoding="UTF-8-BOM")
semantic.json <- toJSON(semantic.lists, pretty = TRUE)
write(semantic.json, "semantic-lists.js")
source('~/git/sourcemem/EXPINT/experiment_stimuli/csv_to_json.R')
load("~/git/sourcemem_online/analysis/raw_data/small_n/Subject_1_Session_1.RData")
View(this.session.data)
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
strated.users
STARTED.USER.ID.EXTENSION
started.users
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/append_distances.R')
source('~/git/sourcemem/EXPINT/analysis/append_distances.R')
setwd("~/git/sourcemem/EXPINT/experiment_stimuli")
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/append_distances.R')
source('~/git/sourcemem/EXPINT/analysis/append_distances.R')
fromJSON
word2vec <- fromJSON(file = 'word2vec_final.json')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
started.users[[1]]
get.user.recognition(started.users[[1]])
get.user.recognition(started.users[[1]])
p
get.session.data.by.user.id(SERVER.BASE.URL, p, 1,
SERVER.PORT, SERVER.MASTER.API.KEY)
View(this.session.data)
get.user.recognition(started.users[[1]])
debugSource('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
get.user.recognition(started.users[[1]])
View(data)
View(data)
unique(data$condition)
View(data)
i <- 1
j <- 2
is_stim <- unique(data$is_stimulus)
this_data <- data[(data$condition == i) & (data$is_stimulus == j),]
i
source('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
get.user.recognition(started.users[[1]])
this_data <- data[(data$condition == i) & (data$is_stimulus == j),]
View(this_data)
conditions <- conditions[-1]
conditions
View(this_data)
View(this_data)
nrow(this_data[this_data$recognised == TRUE,])
this_HR <- nrow(this_data[this_data$recognised == TRUE,])/nrow(data)
this_HR
this_HR <- nrow(this_data[this_data$recognised == TRUE,])/nrow(this_data)
this_HR
data$is_stimulus == TRUE
this_stim <- data[(data$condition == i) & (data$is_stimulus == TRUE),]
this_HR <- nrow(this_stim[this_stim$recognised == TRUE,])/nrow(this_stim)
this_stim <- data[(data$condition == i) & (data$is_stimulus == TRUE),]
this_HR <- nrow(this_stim[this_stim$recognised == TRUE,])/nrow(this_stim)
this_HR
this_stim <- data[(data$condition == i) & (data$is_stimulus == TRUE),]
this_HR <- nrow(this_stim[this_stim$recognised == TRUE,])/nrow(this_stim)
this_miss <- 1 - this_HR
this_foil <- data[(data$condition == i) & (data$is_stimulus == FALSE),]
this_FA <- nrow(this_foil[this_foil$recognised == TRUE,])/nrow(this_foil)
this_CR <- 1- this_FA
this_HR/this_FA
res <- data.frame(matrix(nrow = length(conditions), ncol = 4))
View(res)
res <- data.frame(matrix(nrow = length(conditions), ncol = 4),  dimnames=list(NULL, c("Hit Rate", "Misses",
"False Alarms", "Correct Rejections")))
res <- data.frame(matrix(nrow = length(conditions), ncol = 4),  dimnames=list(conditions, c("Hit Rate", "Misses",
"False Alarms", "Correct Rejections")))
conditions <- unique(data$condition)
conditions <- conditions[-1]
debugSource('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
get.user.recognition(started.users[[1]])
get.user.recognition(started.users[[1]])
length(conditions)
conditions
debugSource('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
get.user.recognition(started.users[[1]])
res <- setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("Hit Rate", "Misses","False Alarms", "Correct Rejections"))
View(res)
debugSource('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
debugSource('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
debugSource('~/git/sourcemem/EXPINT/analysis/pilot_analysis.R')
