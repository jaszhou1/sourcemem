# -------- HIGH IMAGINABILITY CONDITION -------------------
plotThetaHigh<-
# ------ Data ---------------------
ggplot(data=highdata,aes(x=highdata$response_error, ..density..)) + geom_histogram(bins = 50)  +
# ------ Model --------
#Continuous
geom_line(data = mcontinuous_high_theta, aes(x = value, prob), size = 0.75, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Theta (radians)") +
#Threshold
geom_line(data = mthreshold_high_theta, aes(x = value, prob), size = 0.75, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Theta (radians)") +
#Hybrid
geom_line(data = mhybrid_high_theta, aes(x = value, prob), size = 0.75, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Theta (radians)") +
#Misc
scale_x_continuous(name ="Response Error (radians)", # also x axis name
breaks = c(-2, 0, 2),
labels = c(expression(-pi), "0", expression(pi))) +
scale_colour_manual(values=c("red","black")) +
ylab("Probability \n Density") +
ggtitle("Response Error by Subject\n High Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# -------- HIGH IMAGINABILITY CONDITION -------------------
plotRThigh<-
# ------ Data ---------------------
ggplot(data=highdata,aes(x=highdata$response_RT, ..density..)) + geom_histogram(bins = 50)  +
# ------ Model --------
#Continuous
geom_line(data = mRT_continuous_high, aes(x = value, prob), size = 0.75, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Threshold
geom_line(data = mRT_threshold_high, aes(x = value, prob), size = 0.75, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Hybrid
geom_line(data = mRT_hybrid_high, aes(x = value, prob), size = 0.75, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Misc
xlab("Response Time (seconds)") +
ylab("Probability \n Density") +
ggtitle("Response Time by Subject\n High Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# -------- LOW IMAGINABILITY CONDITION -------------------
plotRTlow<-
# ------ Data ---------------------
ggplot(data=lowdata,aes(x=lowdata$response_RT, ..density..)) + geom_histogram(bins = 50) +
# ------ Model --------
#Continuous
geom_line(data = mRT_continuous_low, aes(x = value, prob), size = 0.75, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Threshold
geom_line(data = mRT_threshold_low, aes(x = value, prob), size = 0.75, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Threshold
geom_line(data = mRT_hybrid_low, aes(x = value, prob), size = 0.75, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Misc
xlab("Response Time (seconds)") +
ylab("Probability \n Density") +
ggtitle("Response Time by Subject\n Low Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
legend.background = element_blank(),
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
plotThetaHigh
plotThetaLow
plotRThigh
plotRTlow
plotRThigh
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/sourcemem/models/figures/critVarFits")
library(tidyverse)
dataset <- read.csv('dataFiltered3.csv')
# Create a new variable to label the subject numbers as strings
dataset$subjString <- NA
#dataset <- dataset[!(dataset$participant== 1),]
#dataset <- dataset[!(dataset$participant== 13),]
# Get a list of subjects
data.subjList <- unique(dataset$participant)
#data.subjList <- c(1,2,3,4)
# Custom function to create new variable labels
create.subj.string <- function(subjNo, dataset){
dataset[dataset$participant==subjNo, 'subjString'] <- sprintf('Subject %d', subjNo)
return(dataset)
}
# Run through loop - don't use lapply or map because subject numbers not in order
for (sub in 1:length(data.subjList)){
# Get the subject number
subjNo <- data.subjList[sub]
# Run function, return data frame (dataset)
dataset <- create.subj.string(subjNo, dataset)
}
# Create as factor for plotting and also include levels so the order is correct
dataset$subjString <- factor(dataset$subjString,
levels = unique(dataset$subjString))
dataset$participant <- factor(dataset$participant, levels = unique(dataset$participant))
recogdata <- dataset[dataset$recog_rating>=3,]
lowdata <- recogdata[recogdata$condition==1,]
highdata <- recogdata[recogdata$condition==2,]
Cont <- read.csv('Cont2.csv')
Thresh <- read.csv('Thresh2.csv')
Hybrid <- read.csv('hybrid2.csv')
density <- rbind(Cont,Thresh,Hybrid)
#exclude participants 1 and 13, who are non-sig on Rayleigh Test
#density <- density[!(density$participant== 1),]
#density <- density[!(density$participant== 13),]
names(density)[1] <- "model_name"
continuous<- density[density$model_name == 'Continuous', ]
threshold<- density[density$model_name == 'Threshold', ]
hybrid<- density[density$model_name == 'Hybrid', ]
# -------- CONTINUOUS MODEL -------------------
# Initialise columns
continuous$model <- matrix(NA, dim(continuous)[1])
continuous$cond <- matrix(NA, dim(continuous)[1])
continuous$theta <- matrix(NA, dim(continuous)[1])
# Find all instances of model, high and theta
continuous$model[which(continuous$is_model == ' true')] <- 1 # model
continuous$model[which(continuous$is_model == ' false')] <- 0 # not ya model
continuous$cond[which(continuous$is_high == ' true')] <- 1 # high
continuous$cond[which(continuous$is_high == ' false')] <- 0 # low
continuous$theta[which(continuous$is_theta == ' true')] <- 1 # theta
continuous$theta[which(continuous$is_theta == ' false')] <- 0 # not ya theta
continuous <- tibble(modelName = continuous$model_name,
participant = continuous$participant,
model = as.factor(continuous$model),
cond = as.factor(continuous$cond),
theta = as.factor(continuous$theta),
value = continuous$value,
prob = continuous$prob)
head(continuous)
# -------- THRESHOLD MODEL -------------------
threshold$model <- matrix(NA, dim(threshold)[1])
threshold$cond <- matrix(NA, dim(threshold)[1])
threshold$theta <- matrix(NA, dim(threshold)[1])
# Find all instances of model, high and theta
threshold$model[which(threshold$is_model == ' true')] <- 1 # model
threshold$model[which(threshold$is_model == ' false')] <- 0 # not ya model
threshold$cond[which(threshold$is_high == ' true')] <- 1 # high
threshold$cond[which(threshold$is_high == ' false')] <- 0 # low
threshold$theta[which(threshold$is_theta == ' true')] <- 1 # theta
threshold$theta[which(threshold$is_theta == ' false')] <- 0 # not ya theta
threshold <- tibble(modelName = threshold$model_name,
participant = threshold$participant,
model = as.factor(threshold$model),
cond = as.factor(threshold$cond),
theta = as.factor(threshold$theta),
value = threshold$value,
prob = threshold$prob)
# -------- HYBRID MODEL -------------------
hybrid$model <- matrix(NA, dim(hybrid)[1])
hybrid$cond <- matrix(NA, dim(hybrid)[1])
hybrid$theta <- matrix(NA, dim(hybrid)[1])
# Find all instances of model, high and theta
hybrid$model[which(hybrid$is_model == ' true')] <- 1 # model
hybrid$model[which(hybrid$is_model == ' false')] <- 0 # not ya model
hybrid$cond[which(hybrid$is_high == ' true')] <- 1 # high
hybrid$cond[which(hybrid$is_high == ' false')] <- 0 # low
hybrid$theta[which(hybrid$is_theta == ' true')] <- 1 # theta
hybrid$theta[which(hybrid$is_theta == ' false')] <- 0 # not ya theta
hybrid <- tibble(modelName = hybrid$model_name,
participant = hybrid$participant,
model = as.factor(hybrid$model),
cond = as.factor(hybrid$cond),
theta = as.factor(hybrid$theta),
value = hybrid$value,
prob = hybrid$prob)
# -------- CONTINUOUS MODEL -------------------
# Create a new variable to label the subject numbers as strings
continuous$subjString <- NA
# Get a list of subjects
data.subjList <- unique(continuous$participant)
#data.subjList <- c(1,2,3,4)
# Custom function to create new variable labels
create.subj.string <- function(subjNo, density){
density[density$participant==subjNo, 'subjString'] <- sprintf('Subject %d', subjNo)
return(density)
}
# Run through loop - don't use lapply or map because subject numbers not in order
for (sub in 1:length(data.subjList)){
# Get the subject number
subjNo <- data.subjList[sub]
# Run function, return data frame (density)
continuous <- create.subj.string(subjNo, continuous)
}
# Create as factor for plotting and also include levels so the order is correct
continuous$subjString <- factor(continuous$subjString,
levels = unique(continuous$subjString))
continuous$participant <- factor(continuous$participant, levels = unique(continuous$participant))
# Get a list of the subject strings you created just to double check
continuous.subjString <- unique(continuous$subjString)
# Get low and high conditions out
continuous_low <- continuous[continuous$cond == 0,]
continuous_high <- continuous[continuous$cond == 1,]
# Thetas
continuous_low_theta <- continuous_low[continuous_low$theta == 1,]
continuous_high_theta <- continuous_high[continuous_high$theta == 1,]
# RTs
continuous_low_RT <- continuous_low[continuous_low$theta == 0,]
continuous_high_RT <- continuous_high[continuous_high$theta == 0,]
# Model Theta
mcontinuous_low_theta <- continuous_low_theta[continuous_low_theta$model == 1,]
mcontinuous_high_theta <- continuous_high_theta[continuous_high_theta$model == 1,]
# Data Theta
dcontinuous_low_theta <- continuous_low_theta[continuous_low_theta$model == 0,]
dcontinuous_high_theta <- continuous_high_theta[continuous_high_theta$model == 0,]
# model predicted RT data
mRT_continuous_low <- continuous_low_RT[continuous_low_RT$model == 1, ]
mRT_continuous_high <- continuous_high_RT[continuous_high_RT$model == 1, ]
# RT data
dRT_continuous_low <- continuous_low_RT[continuous_low_RT$model == 0, ]
dRT_continuous_high <- continuous_high_RT[continuous_high_RT$model == 0, ]
# -------- THRESHOLD MODEL -------------------
# Create a new variable to label the subject numbers as strings
threshold$subjString <- NA
# Get a list of subjects
data.subjList <- unique(threshold$participant)
#data.subjList <- c(1,2,3,4)
# Custom function to create new variable labels
create.subj.string <- function(subjNo, density){
density[density$participant==subjNo, 'subjString'] <- sprintf('Subject %d', subjNo)
return(density)
}
# Run through loop - don't use lapply or map because subject numbers not in order
for (sub in 1:length(data.subjList)){
# Get the subject number
subjNo <- data.subjList[sub]
# Run function, return data frame (density)
threshold <- create.subj.string(subjNo, threshold)
}
# Create as factor for plotting and also include levels so the order is correct
threshold$subjString <- factor(threshold$subjString,
levels = unique(threshold$subjString))
threshold$participant <- factor(threshold$participant, levels = unique(threshold$participant))
# Get a list of the subject strings you created just to double check
threshold.subjString <- unique(threshold$subjString)
# Get low and high conditions out
threshold_low <- threshold[threshold$cond == 0,]
threshold_high <- threshold[threshold$cond == 1,]
# Thetas
threshold_low_theta <- threshold_low[threshold_low$theta == 1,]
threshold_high_theta <- threshold_high[threshold_high$theta == 1,]
# RTs
threshold_low_RT <- threshold_low[threshold_low$theta == 0,]
threshold_high_RT <- threshold_high[threshold_high$theta == 0,]
# Model Theta
mthreshold_low_theta <- threshold_low_theta[threshold_low_theta$model == 1,]
mthreshold_high_theta <- threshold_high_theta[threshold_high_theta$model == 1,]
# Data Theta
dthreshold_low_theta <- threshold_low_theta[threshold_low_theta$model == 0,]
dthreshold_high_theta <- threshold_high_theta[threshold_high_theta$model == 0,]
# model predicted RT data
mRT_threshold_low <- threshold_low_RT[threshold_low_RT$model == 1, ]
mRT_threshold_high <- threshold_high_RT[threshold_high_RT$model == 1, ]
# RT data
dRT_threshold_low <- threshold_low_RT[threshold_low_RT$model == 0, ]
dRT_threshold_high <- threshold_high_RT[threshold_high_RT$model == 0, ]
# Create a new variable to label the subject numbers as strings
hybrid$subjString <- NA
# Get a list of subjects
data.subjList <- unique(hybrid$participant)
#data.subjList <- c(1,2,3,4)
# Custom function to create new variable labels
create.subj.string <- function(subjNo, density){
density[density$participant==subjNo, 'subjString'] <- sprintf('Subject %d', subjNo)
return(density)
}
# Run through loop - don't use lapply or map because subject numbers not in order
for (sub in 1:length(data.subjList)){
# Get the subject number
subjNo <- data.subjList[sub]
# Run function, return data frame (density)
hybrid <- create.subj.string(subjNo, hybrid)
}
# Create as factor for plotting and also include levels so the order is correct
hybrid$subjString <- factor(hybrid$subjString,
levels = unique(hybrid$subjString))
hybrid$participant <- factor(hybrid$participant, levels = unique(hybrid$participant))
# Get a list of the subject strings you created just to double check
hybrid.subjString <- unique(hybrid$subjString)
# Get low and high conditions out
hybrid_low <- hybrid[hybrid$cond == 0,]
hybrid_high <- hybrid[hybrid$cond == 1,]
# Thetas
hybrid_low_theta <- hybrid_low[hybrid_low$theta == 1,]
hybrid_high_theta <- hybrid_high[hybrid_high$theta == 1,]
# RTs
hybrid_low_RT <- hybrid_low[hybrid_low$theta == 0,]
hybrid_high_RT <- hybrid_high[hybrid_high$theta == 0,]
# Model Theta
mhybrid_low_theta <- hybrid_low_theta[hybrid_low_theta$model == 1,]
mhybrid_high_theta <- hybrid_high_theta[hybrid_high_theta$model == 1,]
# Data Theta
dhybrid_low_theta <- hybrid_low_theta[hybrid_low_theta$model == 0,]
dhybrid_high_theta <- hybrid_high_theta[hybrid_high_theta$model == 0,]
# model predicted RT data
mRT_hybrid_low <- hybrid_low_RT[hybrid_low_RT$model == 1, ]
mRT_hybrid_high <- hybrid_high_RT[hybrid_high_RT$model == 1, ]
# RT data
dRT_hybrid_low <- hybrid_low_RT[hybrid_low_RT$model == 0, ]
dRT_hybrid_high <- hybrid_high_RT[hybrid_high_RT$model == 0, ]
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Setup equally spaced colours around wheel
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
n = 3
cols = gg_color_hue(n)
# -------- LOW IMAGINABILITY CONDITION -------------------
plotThetaLow<-
# ------ Data ---------------------
# 23/05, substitute data density estimates for histograms
ggplot(data=lowdata,aes(x=lowdata$response_error, ..density..)) + geom_histogram(bins = 50) +
# ------ Model --------
# Continuous
geom_line(data = mcontinuous_low_theta, aes(x = value, prob), size = 0.75, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Response Error (radians)") +
# Threshold
geom_line(data = mthreshold_low_theta, aes(x = value, prob), size = 0.75, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Response Error (radians)") +
#Hybrid
geom_line(data = mhybrid_low_theta, aes(x = value, prob), size = 0.75, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Response Error (radians)") +
#Misc
scale_x_continuous(name ="Response Error (radians)", # also x axis name
breaks = c(-2, 0, 2),
labels = c(expression(-pi), "0", expression(pi))) +
scale_colour_manual(values=c("red","blue","green")) +
ylab("Probability \n Density") +
ggtitle("Response Error by Subject\n Low Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# -------- HIGH IMAGINABILITY CONDITION -------------------
plotThetaHigh<-
# ------ Data ---------------------
ggplot(data=highdata,aes(x=highdata$response_error, ..density..)) + geom_histogram(bins = 50)  +
# ------ Model --------
#Continuous
geom_line(data = mcontinuous_high_theta, aes(x = value, prob), size = 0.75, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Theta (radians)") +
#Threshold
geom_line(data = mthreshold_high_theta, aes(x = value, prob), size = 0.75, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Theta (radians)") +
#Hybrid
geom_line(data = mhybrid_high_theta, aes(x = value, prob), size = 0.75, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
xlab("Theta (radians)") +
#Misc
scale_x_continuous(name ="Response Error (radians)", # also x axis name
breaks = c(-2, 0, 2),
labels = c(expression(-pi), "0", expression(pi))) +
scale_colour_manual(values=c("red","black")) +
ylab("Probability \n Density") +
ggtitle("Response Error by Subject\n High Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# -------- HIGH IMAGINABILITY CONDITION -------------------
plotRThigh<-
# ------ Data ---------------------
ggplot(data=highdata,aes(x=highdata$response_RT, ..density..)) + geom_histogram(bins = 50)  +
# ------ Model --------
#Continuous
geom_line(data = mRT_continuous_high, aes(x = value, prob), size = 0.75, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Threshold
geom_line(data = mRT_threshold_high, aes(x = value, prob), size = 0.75, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Hybrid
geom_line(data = mRT_hybrid_high, aes(x = value, prob), size = 0.75, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Misc
xlab("Response Time (seconds)") +
ylab("Probability \n Density") +
ggtitle("Response Time by Subject\n High Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# -------- LOW IMAGINABILITY CONDITION -------------------
plotRTlow<-
# ------ Data ---------------------
ggplot(data=lowdata,aes(x=lowdata$response_RT, ..density..)) + geom_histogram(bins = 50) +
# ------ Model --------
#Continuous
geom_line(data = mRT_continuous_low, aes(x = value, prob), size = 0.75, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Threshold
geom_line(data = mRT_threshold_low, aes(x = value, prob), size = 0.75, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Threshold
geom_line(data = mRT_hybrid_low, aes(x = value, prob), size = 0.75, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 3, scale = "free") +
#Misc
xlab("Response Time (seconds)") +
ylab("Probability \n Density") +
ggtitle("Response Time by Subject\n Low Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
legend.background = element_blank(),
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
plotThetaHigh
plotThetaLow
plotRThigh
plotRTlow
plotRThigh
rm(list = ls())
# knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("plyr")
library("tidyverse")
setwd("~/GitHub/sourcemem/models/figures/critVatFits")
setwd("~/GitHub/sourcemem/models/figures/critVarFits")
rm(list = ls())
# knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("plyr")
library("tidyverse")
setwd("~/GitHub/sourcemem/models/figures/critVatFits")
rm(list = ls())
# knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("plyr")
library("tidyverse")
#setwd("~/GitHub/sourcemem/models/figures/critVatFits")
#dataset <- read.csv('GVM_High.csv', sep = ",") #.1, .3, .5, .7, .9 quantiles
dataset <- read.csv('Hybrid7QQ.csv', sep = ",") #.1, .5, .9 quantiles
