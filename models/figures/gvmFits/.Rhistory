dRT_continuous_low <- continuous_low_RT[continuous_low_RT$model == 0, ]
dRT_continuous_high <- continuous_high_RT[continuous_high_RT$model == 0, ]
# -------- THRESHOLD MODEL -------------------
# Create a new variable to label the subject numbers as strings
threshold$subjString <- NA
# Get a list of subjects
#data.subjList <- unique(threshold$participant)
data.subjList <- c(1,2,3,4)
# Custom function to create new variable labels
create.subj.string <- function(subjNo, dataset){
dataset[dataset$participant==subjNo, 'subjString'] <- sprintf('Subject %d', subjNo)
return(dataset)
}
# Run through loop - don't use lapply or map because subject numbers not in order
for (sub in 1:length(data.subjList)){
# Get the subject number
subjNo <- data.subjList[sub]
# Run function, return data frame (dataset)
threshold <- create.subj.string(subjNo, threshold)
}
# Create as factor for plotting and also include levels so the order is correct
threshold$subjString <- factor(threshold$subjString,
levels = unique(threshold$subjString))
threshold$participant <- factor(threshold$participant, levels = unique(threshold$participant))
# Get a list of the subject strings you created just to double check
threshold.subjString <- unique(threshold$subjString)
# Get low and high conditions out
threshold_low <- threshold[threshold$cond == 0,]
threshold_high <- threshold[threshold$cond == 1,]
# Thetas
threshold_low_theta <- threshold_low[threshold_low$theta == 1,]
threshold_high_theta <- threshold_high[threshold_high$theta == 1,]
# RTs
threshold_low_RT <- threshold_low[threshold_low$theta == 0,]
threshold_high_RT <- threshold_high[threshold_high$theta == 0,]
# Model Theta
mthreshold_low_theta <- threshold_low_theta[threshold_low_theta$model == 1,]
mthreshold_high_theta <- threshold_high_theta[threshold_high_theta$model == 1,]
# Data Theta
dthreshold_low_theta <- threshold_low_theta[threshold_low_theta$model == 0,]
dthreshold_high_theta <- threshold_high_theta[threshold_high_theta$model == 0,]
# model predicted RT data
mRT_threshold_low <- threshold_low_RT[threshold_low_RT$model == 1, ]
mRT_threshold_high <- threshold_high_RT[threshold_high_RT$model == 1, ]
# RT data
dRT_threshold_low <- threshold_low_RT[threshold_low_RT$model == 0, ]
dRT_threshold_high <- threshold_high_RT[threshold_high_RT$model == 0, ]
# Create a new variable to label the subject numbers as strings
hybrid$subjString <- NA
# Get a list of subjects
#data.subjList <- unique(hybrid$participant)
data.subjList <- c(1,2,3,4)
# Custom function to create new variable labels
create.subj.string <- function(subjNo, dataset){
dataset[dataset$participant==subjNo, 'subjString'] <- sprintf('Subject %d', subjNo)
return(dataset)
}
# Run through loop - don't use lapply or map because subject numbers not in order
for (sub in 1:length(data.subjList)){
# Get the subject number
subjNo <- data.subjList[sub]
# Run function, return data frame (dataset)
hybrid <- create.subj.string(subjNo, hybrid)
}
# Create as factor for plotting and also include levels so the order is correct
hybrid$subjString <- factor(hybrid$subjString,
levels = unique(hybrid$subjString))
hybrid$participant <- factor(hybrid$participant, levels = unique(hybrid$participant))
# Get a list of the subject strings you created just to double check
hybrid.subjString <- unique(hybrid$subjString)
# Get low and high conditions out
hybrid_low <- hybrid[hybrid$cond == 0,]
hybrid_high <- hybrid[hybrid$cond == 1,]
# Thetas
hybrid_low_theta <- hybrid_low[hybrid_low$theta == 1,]
hybrid_high_theta <- hybrid_high[hybrid_high$theta == 1,]
# RTs
hybrid_low_RT <- hybrid_low[hybrid_low$theta == 0,]
hybrid_high_RT <- hybrid_high[hybrid_high$theta == 0,]
# Model Theta
mhybrid_low_theta <- hybrid_low_theta[hybrid_low_theta$model == 1,]
mhybrid_high_theta <- hybrid_high_theta[hybrid_high_theta$model == 1,]
# Data Theta
dhybrid_low_theta <- hybrid_low_theta[hybrid_low_theta$model == 0,]
dhybrid_high_theta <- hybrid_high_theta[hybrid_high_theta$model == 0,]
# model predicted RT data
mRT_hybrid_low <- hybrid_low_RT[hybrid_low_RT$model == 1, ]
mRT_hybrid_high <- hybrid_high_RT[hybrid_high_RT$model == 1, ]
# RT data
dRT_hybrid_low <- hybrid_low_RT[hybrid_low_RT$model == 0, ]
dRT_hybrid_high <- hybrid_high_RT[hybrid_high_RT$model == 0, ]
# The palette with grey:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# The palette with black:
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Setup equally spaced colours around wheel
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
n = 3
cols = gg_color_hue(n)
# -------- LOW IMAGINABILITY CONDITION -------------------
plotThetaLow<-
# ------ Data ---------------------
ggplot(data = dcontinuous_low_theta, aes(x = value, y = prob)) +
geom_point(size = 0.4) +
# ------ Model --------
# Continuous
geom_line(data = mcontinuous_low_theta, aes(x = value, prob), size = 0.5, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
xlab("Response Error (radians)") +
# Threshold
geom_line(data = mthreshold_low_theta, aes(x = value, prob), size = 0.5, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
xlab("Response Error (radians)") +
#Hybrid
geom_line(data = mhybrid_low_theta, aes(x = value, prob), size = 0.5, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
xlab("Response Error (radians)") +
#Misc
scale_x_continuous(name ="Response Error (radians)", # also x axis name
breaks = c(-2, 0, 2),
labels = c(expression(-pi), "0", expression(pi))) +
scale_colour_manual(values=c("red","black")) +
ylab("Probability \n Density") +
ggtitle("Low Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# -------- HIGH IMAGINABILITY CONDITION -------------------
plotThetaHigh<-
# ------ Data ---------------------
ggplot(data = dcontinuous_high_theta, aes(x = value, y = prob)) +
geom_point(size = 0.4) +
# ------ Model --------
#Continuous
geom_line(data = mcontinuous_high_theta, aes(x = value, prob), size = 0.5, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
xlab("Theta (radians)") +
#Threshold
geom_line(data = mthreshold_high_theta, aes(x = value, prob), size = 0.5, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
xlab("Theta (radians)") +
#Hybrid
geom_line(data = mhybrid_high_theta, aes(x = value, prob), size = 0.5, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
xlab("Theta (radians)") +
#Misc
scale_x_continuous(name ="Response Error (radians)", # also x axis name
breaks = c(-2, 0, 2),
labels = c(expression(-pi), "0", expression(pi))) +
scale_colour_manual(values=c("red","black")) +
ylab("Probability \n Density") +
ggtitle("High Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# -------- HIGH IMAGINABILITY CONDITION -------------------
plotRThigh<-
# ------ Data ---------------------
ggplot(data = dRT_continuous_high, aes(x = value, y = prob)) +
geom_point(size = 0.4) +
# ------ Model --------
#Continuous
geom_line(data = mRT_continuous_high, aes(x = value, prob), size = 0.5, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
#Threshold
geom_line(data = mRT_threshold_high, aes(x = value, prob), size = 0.5, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
#Hybrid
geom_line(data = mRT_hybrid_high, aes(x = value, prob), size = 0.5, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
#Misc
xlab("Response Time (seconds)") +
ylab("Probability \n Density") +
ggtitle("RT Density by \n High Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# -------- LOW IMAGINABILITY CONDITION -------------------
plotRTlow<-
# ------ Data ---------------------
ggplot(data = dRT_continuous_low, aes(x = value, y = prob)) +
geom_point(size = 0.4) +
# ------ Model --------
#Continuous
geom_line(data = mRT_continuous_low, aes(x = value, prob), size = 0.5, colour = "red") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
#Threshold
geom_line(data = mRT_threshold_low, aes(x = value, prob), size = 0.5, colour = "blue") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
#Threshold
geom_line(data = mRT_hybrid_low, aes(x = value, prob), size = 0.5, colour = "green") +
facet_wrap(~subjString, labeller = label_wrap_gen(width = 30), ncol = 4, scale = "free") +
#Misc
xlab("Response Time (seconds)") +
ylab("Probability \n Density") +
ggtitle("RT Density by \n Low Imageability Condition") +
theme(
# x axis label
# Theme asthetics to make the plot look nicer
legend.background = element_blank(),
axis.text.x = element_text(size=10),  # size of text on the x axis
axis.text.y = element_text(size=10),  # size of text on the y axis
plot.title = element_text(hjust = 0.5, size = 13),  # title settings (note, centering requires h = 0.5)
plot.subtitle = element_text(hjust = 0.5), # subtitle settiings (note, centering requires h = 0.5)
plot.caption = element_text(hjust = 0, face = "italic"), # caption settings
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
plotThetaHigh
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/')
dataset <- data.frame()
participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p15","p16","p17","p18","p19","p20")
#participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12",
#"p13","p14","p15","p16","p17","p18","p19","p20") #c is vector, list is v general
for (i in participants){
participant_dataset <- data.frame()
for (j in 1:4){
sessions = c("1","2","3","4")
s <- j
this_session_dataset <- read.csv(paste(i,"_",j,".csv",sep=""))
participant_dataset <- rbind(participant_dataset,this_session_dataset)
participant_dataset <- participant_dataset[participant_dataset$type!=' FOIL', ]
participant_dataset$response_RT <- as.numeric(as.vector(participant_dataset$response_RT))
#Filter out the slowest RTs for each participant 27/02
#participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(mad(participant_dataset$response_RT, center = median(participant_dataset$response_RT,na.rm=TRUE))) - median(participant_dataset$response_RT,na.rm=TRUE))), ]
}
participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(sd(participant_dataset$response_RT)) + median(participant_dataset$response_RT,na.rm=TRUE))), ]
participant_dataset$participant <- i
name <- paste(i,"data",sep="_")
assign(name,participant_dataset)
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
#Cleaning up the dataset
dataset <- dataset[,-1] #removes the first variable, which are these weird row labels
#dataset <- dataset[,-1] #removes STIM/FOIL label
#Recoding Participant
dataset$participant[dataset$participant=="p1"]<-1
dataset$participant[dataset$participant=="p2"]<-2
dataset$participant[dataset$participant=="p3"]<-3
dataset$participant[dataset$participant=="p4"]<-4
dataset$participant[dataset$participant=="p5"]<-5
dataset$participant[dataset$participant=="p6"]<-6
dataset$participant[dataset$participant=="p7"]<-7
dataset$participant[dataset$participant=="p8"]<-8
dataset$participant[dataset$participant=="p9"]<-9
dataset$participant[dataset$participant=="p10"]<-10
dataset$participant[dataset$participant=="p11"]<-11
dataset$participant[dataset$participant=="p12"]<-12
dataset$participant[dataset$participant=="p13"]<-13
dataset$participant[dataset$participant=="p15"]<-15
dataset$participant[dataset$participant=="p16"]<-16
dataset$participant[dataset$participant=="p17"]<-17
dataset$participant[dataset$participant=="p18"]<-18
dataset$participant[dataset$participant=="p19"]<-19
dataset$participant[dataset$participant=="p20"]<-20
#Recoding Low/High
dataset$condition <- relevel(dataset$condition," LOW")
dataset$condition <- as.numeric(factor(dataset$condition))
#dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
dataset$response_error <- as.numeric(as.character(dataset$response_error))
dataset.no.na <- dataset[dataset$type!=' FOIL', ]
dataset.na <- dataset[dataset$type==' FOIL', ]
recog <- dataset.no.na[dataset$recog_rating > 3, ]
unrecog <- dataset.no.na[dataset$recog_rating <= 3, ]
high <- dataset.no.na[dataset$recog_rating == 6, ]
allHist<- ggplot(data = dataset.no.na, aes(x = dataset.no.na$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="All Recognition Ratings", x = "Response Error (radians)", y = "Frequency") + theme_classic()
unrecogHist<- ggplot(data = unrecog, aes(x = unrecog$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="Unrecognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
recogHist<- ggplot(data = recog, aes(x = recog$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="Recognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
highHist<- ggplot(data = high, aes(x = high$response_error)) + geom_histogram(bins = 100)+ scale_y_continuous(limits=c(0, 700)) + labs(title ="Highlt Recognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
jumboHist <- ggplot() + geom_histogram(data = dataset.no.na, aes(x = dataset.no.na$response_error, fill="All")) + geom_histogram(data = recog, aes(x = recog$response_error, fill="Recognized")) + geom_histogram(data = unrecog, aes(x = unrecog$response_error, fill="Unrecognized")) + theme_classic()+ labs(x = "Response Error (radians)", y = "Frequency",fill = "Recognition Rating")
# Write CSV in R
#write.csv(dataset, file = "filteredData.csv")
jumboHist
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/')
dataset <- data.frame()
participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p15","p16","p17","p18","p19","p20")
#participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12",
#"p13","p14","p15","p16","p17","p18","p19","p20") #c is vector, list is v general
for (i in participants){
participant_dataset <- data.frame()
for (j in 1:4){
sessions = c("1","2","3","4")
s <- j
this_session_dataset <- read.csv(paste(i,"_",j,".csv",sep=""))
raw_participant_dataset <- rbind(participant_dataset,this_session_dataset)
raw_participant_dataset <- raw_participant_dataset[raw_participant_dataset$type!=' FOIL', ]
raw_participant_dataset$response_RT <- as.numeric(as.vector(raw_participant_dataset$response_RT))
#Filter out the slowest RTs for each participant 27/02
#participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(mad(participant_dataset$response_RT, center = median(participant_dataset$response_RT,na.rm=TRUE))) - median(participant_dataset$response_RT,na.rm=TRUE))), ]
}
participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(sd(participant_dataset$response_RT)) + median(participant_dataset$response_RT,na.rm=TRUE))), ]
participant_dataset$participant <- i
name <- paste(i,"data",sep="_")
assign(name,participant_dataset)
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/')
dataset <- data.frame()
participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p15","p16","p17","p18","p19","p20")
#participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12",
#"p13","p14","p15","p16","p17","p18","p19","p20") #c is vector, list is v general
for (i in participants){
raw_participant_dataset <- data.frame()
for (j in 1:4){
sessions = c("1","2","3","4")
s <- j
this_session_dataset <- read.csv(paste(i,"_",j,".csv",sep=""))
raw_participant_dataset <- rbind(participant_dataset,this_session_dataset)
raw_participant_dataset <- raw_participant_dataset[raw_participant_dataset$type!=' FOIL', ]
raw_participant_dataset$response_RT <- as.numeric(as.vector(raw_participant_dataset$response_RT))
#Filter out the slowest RTs for each participant 27/02
#participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(mad(participant_dataset$response_RT, center = median(participant_dataset$response_RT,na.rm=TRUE))) - median(participant_dataset$response_RT,na.rm=TRUE))), ]
}
participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(sd(participant_dataset$response_RT)) + median(participant_dataset$response_RT,na.rm=TRUE))), ]
participant_dataset$participant <- i
name <- paste(i,"data",sep="_")
assign(name,participant_dataset)
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/')
dataset <- data.frame()
participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p15","p16","p17","p18","p19","p20")
#participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12",
#"p13","p14","p15","p16","p17","p18","p19","p20") #c is vector, list is v general
for (i in participants){
participant_dataset <- data.frame()
for (j in 1:4){
sessions = c("1","2","3","4")
s <- j
this_session_dataset <- read.csv(paste(i,"_",j,".csv",sep=""))
participant_dataset <- rbind(participant_dataset,this_session_dataset)
participant_dataset <- participant_dataset[participant_dataset$type!=' FOIL', ]
participant_dataset$response_RT <- as.numeric(as.vector(participant_dataset$response_RT))
#Filter out the slowest RTs for each participant 27/02
#participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(mad(participant_dataset$response_RT, center = median(participant_dataset$response_RT,na.rm=TRUE))) - median(participant_dataset$response_RT,na.rm=TRUE))), ]
}
#participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(sd(participant_dataset$response_RT)) + median(participant_dataset$response_RT,na.rm=TRUE))), ]
participant_dataset$participant <- i
name <- paste(i,"data",sep="_")
assign(name,participant_dataset)
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
#Cleaning up the dataset
dataset <- dataset[,-1] #removes the first variable, which are these weird row labels
#dataset <- dataset[,-1] #removes STIM/FOIL label
#Recoding Participant
dataset$participant[dataset$participant=="p1"]<-1
dataset$participant[dataset$participant=="p2"]<-2
dataset$participant[dataset$participant=="p3"]<-3
dataset$participant[dataset$participant=="p4"]<-4
dataset$participant[dataset$participant=="p5"]<-5
dataset$participant[dataset$participant=="p6"]<-6
dataset$participant[dataset$participant=="p7"]<-7
dataset$participant[dataset$participant=="p8"]<-8
dataset$participant[dataset$participant=="p9"]<-9
dataset$participant[dataset$participant=="p10"]<-10
dataset$participant[dataset$participant=="p11"]<-11
dataset$participant[dataset$participant=="p12"]<-12
dataset$participant[dataset$participant=="p13"]<-13
dataset$participant[dataset$participant=="p15"]<-15
dataset$participant[dataset$participant=="p16"]<-16
dataset$participant[dataset$participant=="p17"]<-17
dataset$participant[dataset$participant=="p18"]<-18
dataset$participant[dataset$participant=="p19"]<-19
dataset$participant[dataset$participant=="p20"]<-20
#Recoding Low/High
dataset$condition <- relevel(dataset$condition," LOW")
dataset$condition <- as.numeric(factor(dataset$condition))
#dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
dataset$response_error <- as.numeric(as.character(dataset$response_error))
dataset.no.na <- dataset[dataset$type!=' FOIL', ]
dataset.na <- dataset[dataset$type==' FOIL', ]
recog <- dataset.no.na[dataset$recog_rating > 3, ]
unrecog <- dataset.no.na[dataset$recog_rating <= 3, ]
high <- dataset.no.na[dataset$recog_rating == 6, ]
allHist<- ggplot(data = dataset.no.na, aes(x = dataset.no.na$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="All Recognition Ratings", x = "Response Error (radians)", y = "Frequency") + theme_classic()
unrecogHist<- ggplot(data = unrecog, aes(x = unrecog$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="Unrecognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
recogHist<- ggplot(data = recog, aes(x = recog$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="Recognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
highHist<- ggplot(data = high, aes(x = high$response_error)) + geom_histogram(bins = 100)+ scale_y_continuous(limits=c(0, 700)) + labs(title ="Highlt Recognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
jumboHist <- ggplot() + geom_histogram(data = dataset.no.na, aes(x = dataset.no.na$response_error, fill="All")) + geom_histogram(data = recog, aes(x = recog$response_error, fill="Recognized"), bins = 100) + geom_histogram(data = unrecog, aes(x = unrecog$response_error, fill="Unrecognized")) + theme_classic()+ labs(x = "Response Error (radians)", y = "Frequency",fill = "Recognition Rating")
# Write CSV in R
#write.csv(dataset, file = "filteredData.csv")
jumboHist
dataset$response_RT
filter_dataset <- dataset[!(dataset$response_RT>5)]
filter_dataset <- dataset[!(dataset$response_RT>5),]
11050/11200
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/jason/Documents/GitHub/sourcemem/analysis/data/')
dataset <- data.frame()
participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p15","p16","p17","p18","p19","p20")
#participants = c("p1","p2","p3","p4","p4","p5","p6","p7","p8","p9","p10","p11","p12",
#"p13","p14","p15","p16","p17","p18","p19","p20") #c is vector, list is v general
for (i in participants){
participant_dataset <- data.frame()
for (j in 1:4){
sessions = c("1","2","3","4")
s <- j
this_session_dataset <- read.csv(paste(i,"_",j,".csv",sep=""))
participant_dataset <- rbind(participant_dataset,this_session_dataset)
participant_dataset <- participant_dataset[participant_dataset$type!=' FOIL', ]
participant_dataset$response_RT <- as.numeric(as.vector(participant_dataset$response_RT))
#Filter out the slowest RTs for each participant 27/02
#participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(mad(participant_dataset$response_RT, center = median(participant_dataset$response_RT,na.rm=TRUE))) - median(participant_dataset$response_RT,na.rm=TRUE))), ]
}
#--- FILTERING SLOW RESPONSES ---#
# 1.Filter out responses slower than 5 seconds
participant_dataset <- participant_dataset[!(participant_dataset$response_RT>5),]
# 2.Filter out responses slower than three standard deviations above median RT for each participant
participant_dataset<-participant_dataset[!(participant_dataset$response_RT>(3*(sd(participant_dataset$response_RT)) + median(participant_dataset$response_RT,na.rm=TRUE))), ]
#---------------------------------
participant_dataset$participant <- i
name <- paste(i,"data",sep="_")
assign(name,participant_dataset)
dataset <- rbind(dataset,participant_dataset) #could have done this with lists, but because its all the same, we are doing it with one big dataset, added a new variable that identifies.
}
#Cleaning up the dataset
dataset <- dataset[,-1] #removes the first variable, which are these weird row labels
#dataset <- dataset[,-1] #removes STIM/FOIL label
#Recoding Participant
dataset$participant[dataset$participant=="p1"]<-1
dataset$participant[dataset$participant=="p2"]<-2
dataset$participant[dataset$participant=="p3"]<-3
dataset$participant[dataset$participant=="p4"]<-4
dataset$participant[dataset$participant=="p5"]<-5
dataset$participant[dataset$participant=="p6"]<-6
dataset$participant[dataset$participant=="p7"]<-7
dataset$participant[dataset$participant=="p8"]<-8
dataset$participant[dataset$participant=="p9"]<-9
dataset$participant[dataset$participant=="p10"]<-10
dataset$participant[dataset$participant=="p11"]<-11
dataset$participant[dataset$participant=="p12"]<-12
dataset$participant[dataset$participant=="p13"]<-13
dataset$participant[dataset$participant=="p15"]<-15
dataset$participant[dataset$participant=="p16"]<-16
dataset$participant[dataset$participant=="p17"]<-17
dataset$participant[dataset$participant=="p18"]<-18
dataset$participant[dataset$participant=="p19"]<-19
dataset$participant[dataset$participant=="p20"]<-20
#Recoding Low/High
dataset$condition <- relevel(dataset$condition," LOW")
dataset$condition <- as.numeric(factor(dataset$condition))
#dataset$recog_rating <- as.factor(dataset$recog_rating) #Confidence Ratings are Discrete
dataset$response_error <- as.numeric(as.character(dataset$response_error))
dataset.no.na <- dataset[dataset$type!=' FOIL', ]
dataset.na <- dataset[dataset$type==' FOIL', ]
recog <- dataset.no.na[dataset$recog_rating > 3, ]
unrecog <- dataset.no.na[dataset$recog_rating <= 3, ]
high <- dataset.no.na[dataset$recog_rating == 6, ]
allHist<- ggplot(data = dataset.no.na, aes(x = dataset.no.na$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="All Recognition Ratings", x = "Response Error (radians)", y = "Frequency") + theme_classic()
unrecogHist<- ggplot(data = unrecog, aes(x = unrecog$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="Unrecognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
recogHist<- ggplot(data = recog, aes(x = recog$response_error)) + geom_histogram(bins = 100) + scale_y_continuous(limits=c(0, 700)) + labs(title ="Recognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
highHist<- ggplot(data = high, aes(x = high$response_error)) + geom_histogram(bins = 100)+ scale_y_continuous(limits=c(0, 700)) + labs(title ="Highlt Recognized Items", x = "Response Error (radians)", y = "Frequency") + theme_classic()
jumboHist <- ggplot() + geom_histogram(data = dataset.no.na, aes(x = dataset.no.na$response_error, fill="All"), bins = 100) + geom_histogram(data = recog, aes(x = recog$response_error, fill="Recognized"), bins = 100) + geom_histogram(data = unrecog, aes(x = unrecog$response_error, fill="Unrecognized"), bins = 100) + theme_classic()+ labs(x = "Response Error (radians)", y = "Frequency",fill = "Recognition Rating")
# Write CSV in R
#write.csv(dataset, file = "filteredData.csv")
jumboHist
allHist
View(p10_data)
testplot <- ggplot(data=p1_data, aes(x = p1_data$response_RT),bins = 50) + geom_histogram
testplot <- ggplot(data=p1_data, aes(x = p1_data$response_RT),bins = 50) + geom_histogram()
testplot
testplot <- ggplot(data=p1_data, aes(x = p1_data$response_RT),bins = 50) + geom_histogram(bins = 100)
testplot <- ggplot(data=p1_data, aes(x = p1_data$response_RT)) + geom_histogram(bins = 100)
testplot
testplot <- ggplot(data=p1_data, aes(x = p10_data$response_RT)) + geom_histogram(bins = 100)
testplot <- ggplot(data=p10_data, aes(x = p10_data$response_RT)) + geom_histogram(bins = 100)
testplot
testplot <- ggplot(data=p10_data, aes(x = p10_data$response_RT)) + geom_histogram(bins = 100)
testplot <- ggplot(data=recog, aes(x = recog$response_RT)) + geom_histogram(bins = 100)
testplot
View(dataset)
write.csv(dataset,'dataFiltered2.csv')
