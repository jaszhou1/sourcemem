compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
head(recenter_all())
head(recentered_all)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
unique(recentered_all$model)
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient", "Spatiotemporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_1_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_1_models <- recentered_all[recentered_all$model %in% plot_1_model_strings,]
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, )
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
position
View(data)
head(sim_temporal)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
this_data
View(this_average_error)
i
position
data
i
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
concatenate_model_average_error <- function(){
mix <- get_average_error_across_position(sim_mix, 'Pure Guess')
pure_int <- get_average_error_across_position(sim_pure_intrusion, 'Pure Intrusion')
int <- get_average_error_across_position(sim_intprec, 'Intrusion + Guess')
temp <- get_average_error_across_position(sim_temporal, 'Temporal')
spatio <- get_average_error_across_position(sim_spatiotemporal, 'Spatiotemporal')
res <- rbind(mix, pure_int, int, temp, spatio)
return(res)
}
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- concatenate_model_average_error()
View(x)
data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
for (i in 1:10){
this_average_error[i,1] <- i
this_average_error[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
errors_across_serial_position <- function(data){
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
serial_position_data[i,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05))) +
scale_color_manual(values=c("black", "red"))
return(plot)
}
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
View(serial_position_data)
serial_position_data[,3] <- 'data'
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2)
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(serial_position_data) <- c('position','error','model')
serial_position_data[,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = simulated_error))
plot
head(models)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = error))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position, color = model))
View(models)
x <- models[modesl$model == 'Temporal',]
x <- models[models$model == 'Temporal',]
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05)))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.05))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
source('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
plot_data(data, plot_2_models, color_wheel[3:5])
source('~/git/sourcemem_online/analysis/plot_recentered.R')
compare_model_asymm(data,plot_3_models, 'Recentered Asymmetry', c(color_wheel[3], color_wheel[4], color_wheel[5]))
load("~/git/sourcemem_online/analysis/models/R/experiment_2/output/exp_2_sim_data_updated.RData")
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp2.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp2.R')
recenter_all()
Load in data
setwd("~/git/sourcemem_online/analysis/models/R/data")
data <- read.csv('experiment_2.csv')
# Exclude practice block
data <- data[data$block != 0,]
# Exclude first session as a practice sessions
data <- data[data$session != 1,]
# Exclude invalid RTs
data <- data[data$valid_RT==TRUE,]
recenter_all()
load("~/git/sourcemem_online/analysis/models/R/experiment_2/output/exp_2_sim_data_updated.RData")
load("~/git/sourcemem_online/analysis/models/R/experiment_2/output/exp_2_sim_data_updated.RData")
load("~/git/sourcemem_online/analysis/models/R/experiment_2/output/2022-02-11_recentered_exp2_updated.RData")
View(recentered_all)
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
recenter_model
View(recentered_all)
View(recenter_model)
View(recenter_data)
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
recenter_plot()
source('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_exp2.R')
source('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_exp2.R')
models
plot_recentered(c(1:7), recentered_predictions, 'test.png')
plot_asymm_recenter(c(1:7), asymm_predictions, 'test2.png')
plot_asymm_recenter(c(1:3), asymm_predictions, 'test2.png')
plot_asymm_recenter(c(3,4,5), asymm_predictions, 'test2.png')
plot_recentered(c(1,2,3), recentered_predictions, 'test3.png')
View(recenter_model)
View(recenter_densities)
individual_recentered <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in participants){
for(j in 1:length(models)){
this_model <- recenter_model[(recenter_model$participant == i) & (recenter_model$model == models[j]),]
this_predictions <- get_recenter_density(this_model)
recentered_predictions <- rbind(individual_recentered , this_predictions)
}
}
colnames(individual_recentered) <- c("value", "prob", "model", "participant")
group_recentered <- data.frame(matrix(ncol = 4, nrow = 0))
for(j in 1:length(models)){
this_model <- recenter_model[recenter_model$model == models[j],]
this_predictions <- get_recenter_density(this_model)
this_predictions[4] <- 'Average'
recentered_predictions <- rbind(group_recentered, this_predictions)
}
colnames(group_recentered) <- c("value", "prob", "model", "participant")
View(individual_recentered)
participants
models
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
recenter_model
this_model
View(this_predictions)
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
View(group_recentered)
plot_recentered <- function(model_list, this_recentered_predictions, filename){
## Opens a drawing device (either X11 for testing or a
## PDF for saving).
if(filename == "") {
X11() # Write to the screen
} else {
png(file=filename, width=10.7, height=8.3, units = "in", pointsize = 12, res = 300)
#pdf(file=filename, width=8.3, height=10.7)
}
plot.new()
plot.window(xlim=c(X.RESP.LOW, X.RESP.HI),
ylim=c(Y.RESP.LOW, Y.RESP.HI))
## Compute and plot the empirical histograms for response error.
resp.hist <- hist(data$error,
breaks=NUM.BINS, freq=FALSE,
plot=FALSE)
for(b in 2:length(resp.hist$breaks)) {
lo.break <- resp.hist$breaks[b-1]
hi.break <- resp.hist$breaks[b]
bar.height <- resp.hist$density[b-1]
rect(lo.break, 0.0, hi.break, bar.height, border=NA, col="grey70")
}
for(model.type in MODEL.TYPES[model_list]) {
model.data <- this_recentered_predictions[this_recentered_predictions$model == model.type, ]
points(model.data$value, model.data$prob, type="l", lty=2, lwd = 2, col=MODEL.COL[[model.type]])
}
axis(side=1, at=c(-pi, 0, pi), labels=c(expression(-pi), "0", expression(pi)), cex.axis= AXIS.CEX)
mtext(paste("Response Offset (rad)"), side=1, cex= AXIS.CEX, cex.lab = AXIS.LABEL.CEX, line=2.5)
axis(side=2, at=c(0, 0.1, 0.2, 0.3), cex.axis= AXIS.CEX)
mtext(paste("Density"), side=2, cex=AXIS.CEX, cex.lab = AXIS.LABEL.CEX, line=2.5)
## Add in legend
legend("topright", legend= MODEL.TYPES[model_list],
col=color_wheel[model_list], lty=2, lwd = 2, bty = "n",cex=AXIS.CEX, title="Models")
# Close the plotting device
dev.off()
}
plot_recentered(c(1,2), group_recentered, "")
plot_recentered <- function(model_list, this_recentered_predictions, data, filename){
## Opens a drawing device (either X11 for testing or a
## PDF for saving).
if(filename == "") {
X11() # Write to the screen
} else {
png(file=filename, width=10.7, height=8.3, units = "in", pointsize = 12, res = 300)
#pdf(file=filename, width=8.3, height=10.7)
}
plot.new()
plot.window(xlim=c(X.RESP.LOW, X.RESP.HI),
ylim=c(Y.RESP.LOW, Y.RESP.HI))
## Compute and plot the empirical histograms for response error.
resp.hist <- hist(data$error,
breaks=NUM.BINS, freq=FALSE,
plot=FALSE)
for(b in 2:length(resp.hist$breaks)) {
lo.break <- resp.hist$breaks[b-1]
hi.break <- resp.hist$breaks[b]
bar.height <- resp.hist$density[b-1]
rect(lo.break, 0.0, hi.break, bar.height, border=NA, col="grey70")
}
for(model.type in MODEL.TYPES[model_list]) {
model.data <- this_recentered_predictions[this_recentered_predictions$model == model.type, ]
points(model.data$value, model.data$prob, type="l", lty=2, lwd = 2, col=MODEL.COL[[model.type]])
}
axis(side=1, at=c(-pi, 0, pi), labels=c(expression(-pi), "0", expression(pi)), cex.axis= AXIS.CEX)
mtext(paste("Response Offset (rad)"), side=1, cex= AXIS.CEX, cex.lab = AXIS.LABEL.CEX, line=2.5)
axis(side=2, at=c(0, 0.1, 0.2, 0.3), cex.axis= AXIS.CEX)
mtext(paste("Density"), side=2, cex=AXIS.CEX, cex.lab = AXIS.LABEL.CEX, line=2.5)
## Add in legend
legend("topright", legend= MODEL.TYPES[model_list],
col=color_wheel[model_list], lty=2, lwd = 2, bty = "n",cex=AXIS.CEX, title="Models")
# Close the plotting device
dev.off()
}
plot_recentered(c(1,2), group_recentered, recenter_data, "")
plot_recentered(c(1,2), group_recentered, recenter_data, "test4.png")
plot_recentered <- function(model_list, this_recentered_predictions, data, filename){
## Opens a drawing device (either X11 for testing or a
## PDF for saving).
if(filename == "") {
X11() # Write to the screen
} else {
png(file=filename, width=10, height=4, units = "in", pointsize = 12, res = 300)
#pdf(file=filename, width=8.3, height=10.7)
}
plot.new()
plot.window(xlim=c(X.RESP.LOW, X.RESP.HI),
ylim=c(Y.RESP.LOW, 0.3))
## Compute and plot the empirical histograms for response error.
resp.hist <- hist(data$error,
breaks=NUM.BINS, freq=FALSE,
plot=FALSE)
for(b in 2:length(resp.hist$breaks)) {
lo.break <- resp.hist$breaks[b-1]
hi.break <- resp.hist$breaks[b]
bar.height <- resp.hist$density[b-1]
rect(lo.break, 0.0, hi.break, bar.height, border=NA, col="grey70")
}
for(model.type in MODEL.TYPES[model_list]) {
model.data <- this_recentered_predictions[this_recentered_predictions$model == model.type, ]
points(model.data$value, model.data$prob, type="l", lty=2, lwd = 2, col=MODEL.COL[[model.type]])
}
axis(side=1, at=c(-pi, 0, pi), labels=c(expression(-pi), "0", expression(pi)), cex.axis= AXIS.CEX)
mtext(paste("Response Offset (rad)"), side=1, cex= AXIS.CEX, cex.lab = AXIS.LABEL.CEX, line=2.5)
axis(side=2, at=c(0, 0.1, 0.2, 0.3), cex.axis= AXIS.CEX)
mtext(paste("Density"), side=2, cex=AXIS.CEX, cex.lab = AXIS.LABEL.CEX, line=2.5)
## Add in legend
legend("topright", legend= MODEL.TYPES[model_list],
col=color_wheel[model_list], lty=2, lwd = 2, bty = "n",cex=AXIS.CEX, title="Models")
# Close the plotting device
dev.off()
}
plot_recentered(c(1,2), group_recentered, recenter_data, "test4.png")
plot_recentered <- function(model_list, this_recentered_predictions, data, filename){
## Opens a drawing device (either X11 for testing or a
## PDF for saving).
if(filename == "") {
X11() # Write to the screen
} else {
png(file=filename, width=10, height=7, units = "in", pointsize = 12, res = 300)
#pdf(file=filename, width=8.3, height=10.7)
}
plot.new()
plot.window(xlim=c(X.RESP.LOW, X.RESP.HI),
ylim=c(Y.RESP.LOW, 0.25))
## Compute and plot the empirical histograms for response error.
resp.hist <- hist(data$error,
breaks=NUM.BINS, freq=FALSE,
plot=FALSE)
for(b in 2:length(resp.hist$breaks)) {
lo.break <- resp.hist$breaks[b-1]
hi.break <- resp.hist$breaks[b]
bar.height <- resp.hist$density[b-1]
rect(lo.break, 0.0, hi.break, bar.height, border=NA, col="grey70")
}
for(model.type in MODEL.TYPES[model_list]) {
model.data <- this_recentered_predictions[this_recentered_predictions$model == model.type, ]
points(model.data$value, model.data$prob, type="l", lty=2, lwd = 2, col=MODEL.COL[[model.type]])
}
axis(side=1, at=c(-pi, 0, pi), labels=c(expression(-pi), "0", expression(pi)), cex.axis= AXIS.CEX)
mtext(paste("Response Offset (rad)"), side=1, cex= AXIS.CEX, cex.lab = AXIS.LABEL.CEX, line=2.5)
axis(side=2, at=c(0, 0.25), cex.axis= AXIS.CEX)
mtext(paste("Density"), side=2, cex=AXIS.CEX, cex.lab = AXIS.LABEL.CEX, line=2.5)
## Add in legend
legend("topright", legend= MODEL.TYPES[model_list],
col=color_wheel[model_list], lty=2, lwd = 2, bty = "n",cex=AXIS.CEX, title="Models")
# Close the plotting device
dev.off()
}
plot_recentered(c(1,2), group_recentered, recenter_data, "test4.png")
source('~/git/sourcemem_online/analysis/plots/response_error/plot_recentered_exp2.R')
plot_recentered(c(1,2), group_recentered, recenter_data, "test4.png")
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
plot_recentered(c(1,2), group_recentered, recenter_data, "test4.png")
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
plot_recentered(c(1,2), group_recentered, recenter_data, "test4.png")
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
plot_recentered(c(1,2), group_recentered, recenter_data, "test4.png")
View(response_error_predictions)
group_response_error_predictions <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:length(models)){
this_model <- model_predictions[model_predictions$model == models[i],]
this_predictions <- get_response_error_density(this_model)
response_error_predictions <- rbind(response_error_predictions, this_predictions)
response_error_predictions[4] <- 'Average'
}
colnames(response_error_predictions) <- c("value", "prob", "model", "participant")
group_response_error_predictions <- data.frame(matrix(ncol = 4, nrow = 0))
for(i in 1:length(models)){
this_model <- model_predictions[model_predictions$model == models[i],]
this_predictions <- get_response_error_density(this_model)
group_response_error_predictions <- rbind(group_response_error_predictions, this_predictions)
group_response_error_predictions[4] <- 'Average'
}
colnames(group_response_error_predictions ) <- c("value", "prob", "model", "participant")
View(group_recentered)
View(group_response_error_predictions)
PARTICIPANTS <- unique(data$participant)
NUM.PARTICIPANTS <- length(PARTICIPANTS) + 1
NUM.PARTICIPANTS
PARTICIPANTS.PER.ROW <- 2
NUM.ROWS <- ceiling(NUM.PARTICIPANTS / PARTICIPANTS.PER.ROW)
NUM.COLS <- PARTICIPANTS.PER.ROW * 2
NUM.ROWS
NUM.COLS
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
individual_combined_plot(c(1,2), data, model_predictions, recenter_data, recenter_model, "")
warnings()
individual_combined_plot(c(1,2), data, model_predictions, recenter_data, recenter_model, "")
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
individual_combined_plot(c(1,2), data, model_predictions, recenter_data, recenter_model, "")
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
individual_combined_plot(c(1,2), data, model_predictions, recenter_data, recenter_model, "")
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
individual_combined_plot(c(1,2), data, model_predictions, recenter_data, recenter_model, "")
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
individual_combined_plot(c(1,2), data, model_predictions, recenter_data, recenter_model, "")
MODEL.TYPES
model_list
MODEL.TYPES[model_list]
model.type
model.data
MODEL.COL
MODEL.COL[[model.type]]
View(model.data)
View(model.data)
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, recenter_model, "")
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, "")
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, "")
tail(6, 2)
unique(data$participant)
1:6
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, "")
View(group_recentered)
View(group_response_error_predictions)
source('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, "")
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, group_response_error_predictions, group_recentered, "")
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, group_response_error_predictions, group_recentered, "")
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, group_response_error_predictions, group_recentered, "")
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, group_response_error_predictions, group_recentered, "")
warnings()
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, group_response_error_predictions, group_recentered, "")
debugSource('~/git/sourcemem_online/analysis/plots/response_error/plot_experiment_2.R')
individual_combined_plot(c(1,2), data, response_error_predictions, recenter_data, individual_recentered, group_response_error_predictions, group_recentered, "")
