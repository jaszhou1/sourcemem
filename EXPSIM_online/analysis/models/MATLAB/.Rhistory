panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, fill = model)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, folor = model)
ggplot(recentered_all, aes(x=error, y = ..density..)) + geom_histogram(bins = 30, color = model)
View(recentered_all)
recentered_all$model
ggplot(recentered_all, aes(x=error, y = ..density.., color = model)) + geom_histogram(bins = 30)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, aes(color = model)) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
View(plot_1_models)
compare_model <- function(data, models){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
geom_density(data = models, aes(color = model, weight = 1)) +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
ggtitle('title') + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_text(color="black", size=14),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data, plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models)
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
head(recenter_all())
head(recentered_all)
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
unique(recentered_all$model)
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
source('~/git/sourcemem_online/analysis/models/R/model_code/recenter_exp1.R')
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_2_model_strings <- c("Intrusion + Guess", "Temporal Gradient", "Spatiotemporal Gradient")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model_asymm(data,plot_2_models, 'Flat and Temporal Gradient Recentered Asymmetry')
plot_1_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_1_models <- recentered_all[recentered_all$model %in% plot_1_model_strings,]
compare_model(data,plot_1_models, 'Threshold and Intrusion Recentered Predictions')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, )
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
position
View(data)
head(sim_temporal)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(data)
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
this_data
View(this_average_error)
i
position
data
i
x <- get_average_error_across_position(sim_spatiotemporal, 'spatiotemporal')
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
View(this_average_error)
concatenate_model_average_error <- function(){
mix <- get_average_error_across_position(sim_mix, 'Pure Guess')
pure_int <- get_average_error_across_position(sim_pure_intrusion, 'Pure Intrusion')
int <- get_average_error_across_position(sim_intprec, 'Intrusion + Guess')
temp <- get_average_error_across_position(sim_temporal, 'Temporal')
spatio <- get_average_error_across_position(sim_spatiotemporal, 'Spatiotemporal')
res <- rbind(mix, pure_int, int, temp, spatio)
return(res)
}
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
x <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
x <- concatenate_model_average_error()
View(x)
data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
for (i in 1:10){
this_average_error[i,1] <- i
this_average_error[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
errors_across_serial_position <- function(data){
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(this_average_error) <- c('position','error','model')
serial_position_data[i,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
models <- concatenate_model_average_error()
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05))) +
scale_color_manual(values=c("black", "red"))
return(plot)
}
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
debugSource('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
errors_across_serial_position(data)
View(serial_position_data)
serial_position_data[,3] <- 'data'
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2)
serial_position_data <- data.frame(matrix(nrow = 10, ncol = 3))
colnames(serial_position_data) <- c('position','error','model')
serial_position_data[,3] <- 'data'
for (i in 1:10){
serial_position_data[i,1] <- i
serial_position_data[i,2] <- serial_position(i, data)
}
plot <- ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = simulated_error))
plot
head(models)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = error))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, y = position, color = model))
View(models)
x <- models[modesl$model == 'Temporal',]
x <- models[models$model == 'Temporal',]
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position, y = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = x, method = 'loess', se = FALSE, aes(x = position))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, max(1.05, max(serial_errors$error) + 0.05)))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model))
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.90, 1.10))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.05))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1))
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_discrete(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
ggplot(data=serial_position_data, aes(x=position, y = error)) +
geom_point(size = 2) +
geom_smooth(data = models, method = 'loess', se = FALSE, aes(x = position, color = model)) +
scale_x_continuous(name = 'Study List Position', breaks = 1:10) +
scale_y_continuous(name = 'Average Absolute Error (rad)', breaks = c(1, 1.05), limits = c(0.95, 1.1)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
source('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
plot_data(data, plot_2_models, color_wheel[3:5])
source('~/git/sourcemem_online/analysis/plot_recentered.R')
compare_model_asymm(data,plot_3_models, 'Recentered Asymmetry', c(color_wheel[3], color_wheel[4], color_wheel[5]))
source('~/git/sourcemem_online/analysis/models/MATLAB/plot_diffusion_predictions.R')
View(response_time_predictions)
View(this_predictions)
debugSource('~/git/sourcemem_online/analysis/models/MATLAB/plot_diffusion_predictions.R')
this_model
models[i]
this_predictions
source('~/git/sourcemem_online/analysis/models/MATLAB/plot_diffusion_predictions.R')
plot_response_time(data, response_time_predictions, color_wheel)
library(ggplot2)
plot_response_time(data, response_time_predictions, color_wheel)
plot_response_time <- function(data, model, colors){
plot <- ggplot(data, aes(x=source_RT, y = ..density..)) + geom_histogram(bins = 50,  alpha = 0.9) +
geom_line(data = model, aes(x = value, y = prob, color = model), size = 1.2, adjust = 2) +
scale_x_continuous(breaks  = c(0,1,2,3,4,5),
labels = c("0","1", "2", "3", "4", "5")) +
scale_color_manual(values= colors) +
xlab("Response Time (s)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
plot_response_time(data, response_time_predictions, color_wheel)
View(response_error_predictions)
response_time_predictions <- data.frame(matrix(ncol = 3, nrow = 0))
for(i in 1:length(models)){
this_model <- model_predictions[model_predictions$model == models[i],]
this_predictions <- get_response_time_density(this_model)
response_time_predictions <- rbind(response_time_predictions, this_predictions)
}
colnames(response_time_predictions) <- c("value", "prob", "model")
View(response_time_predictions)
response_time_predictions <- data.frame(matrix(ncol = 3, nrow = 0))
for(i in 1:length(models)){
this_model <- model_predictions[model_predictions$model == models[i],]
this_predictions <- get_response_time_density(this_model)
response_time_predictions <- rbind(response_time_predictions, this_predictions)
}
colnames(response_time_predictions) <- c("value", "prob", "model")
plot_response_time(data, response_time_predictions, color_wheel)
ggplot(data, aes(x=source_RT, y = ..density..)) + geom_histogram(bins = 50,  alpha = 0.9)
plot_response_time <- function(data, model, colors){
plot <- ggplot(data, aes(x=source_RT, y = ..density..)) + geom_histogram(bins = 50,  alpha = 0.9) +
geom_line(data = model, aes(x = value, y = prob, color = model), size = 1.2, adjust = 2) +
scale_x_continuous(breaks  = c(0,2000, 4000, 6000),
labels = c("0", "2", "4", "6")) +
scale_color_manual(values= colors) +
xlab("Response Time (s)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
plot_response_time(data, response_time_predictions, color_wheel)
ggplot(data, aes(x=source_RT, y = ..density..)) + geom_histogram(bins = 50,  alpha = 0.9) +
geom_line(data = model, aes(x = value, y = prob, color = model), size = 1.2, adjust = 2)
model <- response_time_predictions
ggplot(data, aes(x=source_RT, y = ..density..)) + geom_histogram(bins = 50,  alpha = 0.9) +
geom_line(data = model, aes(x = value, y = prob, color = model), size = 1.2, adjust = 2)
View(response_time_predictions)
plot_response_time <- function(data, model, colors){
plot <- ggplot(data, aes(x=source_RT/1000, y = ..density..)) + geom_histogram(bins = 50,  alpha = 0.9) +
geom_line(data = model, aes(x = value, y = prob, color = model), size = 1.2, adjust = 2) +
scale_x_continuous(breaks  = c(0,2, 4, 6),
labels = c("0", "2", "4", "6")) +
scale_color_manual(values= colors) +
xlab("Response Time (s)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
theme(
axis.text.x = element_text(color="black", size = 12),
axis.text.y = element_text(color="black", size = 12),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
plot_response_time(data, response_time_predictions, color_wheel)
debugSource('~/git/sourcemem_online/analysis/models/MATLAB/plot_diffusion_predictions.R')
plot_response_time(data, response_time_predictions, color_wheel)
source('~/git/sourcemem_online/analysis/plot_recentered.R')
compare_model_asymm(data,plot_3_models, 'Recentered Asymmetry', c(color_wheel[3], color_wheel[4], color_wheel[5]))
compare_model_asymm <- function(data, models, title, colors){
plot <- ggplot(data, aes(x=error, y = ..density..)) + geom_histogram(bins = 30,  alpha = 0.9) +
#geom_density(data = models, aes(color = model), size = 1.2, adjust = 2) +
geom_histogram(data = models, aes(color = model), alpha=0.2, position="identity") +
scale_x_continuous(breaks  = c(-pi, 0, pi),
labels = c("-\u03c0", "0", "\u03c0")) +
scale_color_manual(values= colors) +
facet_wrap(~  direction + filter) +
ggtitle(title) + xlab("Error (rad)") + ylab("Density") + expand_limits(y = c(0, 0.20)) +
guides(size = FALSE) +
theme(
axis.text.x = element_text(color="black", size = 16),
axis.text.y = element_text(color="black", size = 14),
plot.title = element_blank(),
axis.title.x = element_text(color="black", size=16),
axis.title.y = element_text(color="black", size=16),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
return(plot)
}
compare_model_asymm(data,plot_3_models, 'Recentered Asymmetry', c(color_wheel[3], color_wheel[4], color_wheel[5]))
load("~/git/sourcemem_online/analysis/models/R/model_code/2022-01-10.RData")
load("~/git/sourcemem_online/analysis/models/R/model_code/2022-01-10_spatiotemporal.RData")
load("~/git/sourcemem_online/analysis/models/R/model_code/2022-01-10_temporal.RData")
hist(sim_temporal$simulated_error)
hist(sim_spatiotemporal$simulated_error)
load("~/git/sourcemem_online/analysis/models/R/model_code/2022-01-14.RData")
load("~/git/sourcemem_online/analysis/models/R/model_code/2022-01-14.RData")
hist(sim_temporal$simulated_error)
hist(sim_spatiotemporal$simulated_error)
hist(sim_intrusion$simulated_error)
hist(sim_pure_intrusion$simulated_error)
source('~/git/sourcemem_online/analysis/models/R/model_code/plot_model_predictions.R')
plot_1
load("~/git/sourcemem_online/analysis/models/R/model_code/2022-01-17_recentered_exp1.RData")
load("~/git/sourcemem_online/analysis/models/R/model_code/2022-01-14.RData")
source('~/git/sourcemem_online/analysis/plot_recentered.R')
plot_2_model_strings <- c("Pure Guess", "Pure Intrusion", "Intrusion + Guess")
plot_2_models <- recentered_all[recentered_all$model %in% plot_2_model_strings,]
compare_model(data,plot_2_models, 'Pure Threshold and Intrusion + Guess Recentered Predictions',c(color_wheel[1], color_wheel[2], color_wheel[3]))
load("~/git/sourcemem_online/analysis/models/R/model_code/2022-01-17_recentered_exp1.RData")
View(recentered_all)
View(recentered_all)
setwd("~/git/sourcemem_online/analysis/models/MATLAB/data")
data <- read.csv('sourcemem_data_2021_distances.csv')
# Exclude practice block
data <- data[data$block!= 0,]
# Exclude invalid RTs
data <- data[data$valid_RT==TRUE,]
setwd("~/git/sourcemem_online/analysis/models/MATLAB")
pure_guess <- read.csv('sim_pure_guess.csv', header = FALSE)
pure_guess$model <- 'Pure Guess'
pure_intrusion <- read.csv('sim_pure_intrusion.csv', header = FALSE)
pure_intrusion$model <- 'Pure Intrusion'
intrusion <- read.csv('sim_intrusion.csv', header = FALSE)
intrusion$model <- 'Intrusion + Guess'
intrusion_eta <- read.csv('sim_intrusion_eta.csv', header = FALSE)
intrusion_eta$model <- 'Intrusion + Guess (Different Eta)'
temporal <- read.csv('sim_temporal.csv', header = FALSE)
temporal$model <- 'Temporal Gradient'
spatiotemporal <- read.csv('sim_spatiotemporal.csv', header = FALSE)
spatiotemporal$model <- 'Spatiotemporal Gradient'
model_predictions <- rbind(pure_guess, pure_intrusion, intrusion, intrusion_eta, temporal, spatiotemporal)
colnames(model_predictions) <- c('error', 'time', 'participant', 'model')
models <- unique(model_predictions$model)
get_response_error_density <- function(model){
preds <- density(as.numeric(model$error), from = -pi, to = pi, cut = FALSE, kernel = "gaussian")
# To counteract the smoothing to zero beyond the domain -pi, pi, replace the last 50 y co-ords
# with the mean of the preceeding 50
preds$y[1:50] <- mean(preds$y[51:100])
preds$y[(length(preds$y)-50):length(preds$y)] <- mean(preds$y[(length(preds$y)-100):(length(preds$y)-50)])
this_predictions <- data.frame(matrix(ncol = 3, nrow = 512))
this_predictions[1] <- preds$x
this_predictions[2] <- preds$y
this_predictions[3] <- model$model[1]
return(this_predictions)
}
test <- get_response_error_density(pure_guess)
debugSource('~/git/sourcemem_online/analysis/models/MATLAB/plot_diffusion_predictions.R')
View(model_predictions)
hist(model_predictions[model_predictions$model == 'Pure Guess',]$error)
hist(model_predictions[model_predictions$model == 'Pure Intrusion',]$error)
hist(model_predictions[model_predictions$model == 'Intrusion + Guess',]$error)
source('~/git/sourcemem_online/analysis/models/MATLAB/plot_diffusion_predictions.R')
plot_response_error(data, model_predictions, MODEL.COL)
library(ggplot2)
plot_response_error(data, model_predictions, MODEL.COL)
plot_response_error <- function(){
plot.new()
plot.window(xlim=c(X.RESP.LOW, X.RESP.HI),
ylim=c(Y.RESP.LOW, Y.RESP.HI))
## Compute and plot the empirical histograms for response error.
resp.hist <- hist(data$response_error,
breaks=NUM.BINS, freq=FALSE,
plot=FALSE)
for(b in 2:length(resp.hist$breaks)) {
lo.break <- resp.hist$breaks[b-1]
hi.break <- resp.hist$breaks[b]
bar.height <- resp.hist$density[b-1]
rect(lo.break, 0.0, hi.break, bar.height, border=NA, col="grey70")
}
for(model.type in MODEL.TYPES) {
model.data <- response_error_predictions[response_error_predictions$model == model.type, ]
points(model.data$value, model.data$prob, type="l", col=MODEL.COL[[model.type]])
}
axis(side=1, at=c(-pi, 0, pi), labels=c("-pi", "0", "pi"), cex.axis=0.75)
mtext(paste("Response error (rads)"), side=1, cex=0.6, line=2.5)
axis(side=2, at=c(0, 0.2, 0.4, 0.6, 0.8), cex.axis=0.75)
mtext(paste("Density"), side=2, cex=0.6, line=2.5)
}
plot_response_error(data, model_predictions, MODEL.COL)
plot_response_error()
source('~/git/sourcemem_online/analysis/models/MATLAB/plot_diffusion_predictions.R')
plot_response_error()
